{"resolvedId":"E:/Project/www/wwwroot/vite/project-shangpinhui/src/stores/detail.ts","transforms":[{"name":"__load__","result":"import { defineStore } from 'pinia'\r\nimport { reqGetGoodsInfo, reqAddOrUpdateShopCart } from '@/api'\r\nimport type { detail_type } from './type/detail_type'\r\n//* 封装游客身分模块uuid--->生成一个随机的哈希字符串\r\nimport { getUUID } from '@/utils/uuid_tooken'\r\n\r\nexport const useDetailStore = defineStore({\r\n  id: 'detail',\r\n  state: () => {\r\n    return {\r\n      goodInfo: <detail_type.RootObject>{},\r\n      uuid_token: getUUID(),\r\n    }\r\n  },\r\n  getters: {\r\n    //* 路径导航简化的数据\r\n    categoryView(state) {\r\n      return state.goodInfo.categoryView || {}\r\n    },\r\n    //* 简化产品信息的数据\r\n    skuInfo(state) {\r\n      return state.goodInfo.skuInfo || {}\r\n    },\r\n    //* 产品售卖属性的简化\r\n    spuSaleAttrList(state) {\r\n      return state.goodInfo.spuSaleAttrList || []\r\n    },\r\n  },\r\n  actions: {\r\n    async getGoodsInfo(skuid: number) {\r\n      let result = await reqGetGoodsInfo(skuid)\r\n      if (result.code === 200) {\r\n        this.goodInfo = result.data\r\n      }\r\n    },\r\n    //* 将产品添加到购物车中\r\n    async addOrUpdateShopCart(skuId: number, skuNum: number) {\r\n      // 加入购物车返回的结果\r\n      // 加入购物车后（发请求），前台将参数带给服务器\r\n      // 服务器写入数据成功，并没有返回其他的数据，只是返回了code,200则为成功\r\n      // 因为服务器没有返回其他的数据，因此这里不用三连环存储数据\r\n      let result = await reqAddOrUpdateShopCart(skuId, skuNum)\r\n      // 当前函数返回的是一个promise结果\r\n      if (result.code == 200) {\r\n        return 'ok'\r\n      } else {\r\n        //加入购物车失败\r\n        return Promise.reject(new Error('faile'))\r\n      }\r\n    },\r\n  },\r\n})\r\n","start":1663399017455,"end":1663399017455},{"name":"vite:esbuild","result":"import { defineStore } from \"pinia\";\nimport { reqGetGoodsInfo, reqAddOrUpdateShopCart } from \"@/api\";\nimport { getUUID } from \"@/utils/uuid_tooken\";\nexport const useDetailStore = defineStore({\n  id: \"detail\",\n  state: () => {\n    return {\n      goodInfo: {},\n      uuid_token: getUUID()\n    };\n  },\n  getters: {\n    categoryView(state) {\n      return state.goodInfo.categoryView || {};\n    },\n    skuInfo(state) {\n      return state.goodInfo.skuInfo || {};\n    },\n    spuSaleAttrList(state) {\n      return state.goodInfo.spuSaleAttrList || [];\n    }\n  },\n  actions: {\n    async getGoodsInfo(skuid) {\n      let result = await reqGetGoodsInfo(skuid);\n      if (result.code === 200) {\n        this.goodInfo = result.data;\n      }\n    },\n    async addOrUpdateShopCart(skuId, skuNum) {\n      let result = await reqAddOrUpdateShopCart(skuId, skuNum);\n      if (result.code == 200) {\n        return \"ok\";\n      } else {\n        return Promise.reject(new Error(\"faile\"));\n      }\n    }\n  }\n});\n","start":1663399017455,"end":1663399017457,"order":"normal"},{"name":"vite:import-analysis","result":"import { defineStore } from \"/node_modules/.vite/deps/pinia.js?v=a7e311b8\";\nimport { reqGetGoodsInfo, reqAddOrUpdateShopCart } from \"/src/api/index.ts\";\nimport { getUUID } from \"/src/utils/uuid_tooken.ts\";\nexport const useDetailStore = defineStore({\n  id: \"detail\",\n  state: () => {\n    return {\n      goodInfo: {},\n      uuid_token: getUUID()\n    };\n  },\n  getters: {\n    categoryView(state) {\n      return state.goodInfo.categoryView || {};\n    },\n    skuInfo(state) {\n      return state.goodInfo.skuInfo || {};\n    },\n    spuSaleAttrList(state) {\n      return state.goodInfo.spuSaleAttrList || [];\n    }\n  },\n  actions: {\n    async getGoodsInfo(skuid) {\n      let result = await reqGetGoodsInfo(skuid);\n      if (result.code === 200) {\n        this.goodInfo = result.data;\n      }\n    },\n    async addOrUpdateShopCart(skuId, skuNum) {\n      let result = await reqAddOrUpdateShopCart(skuId, skuNum);\n      if (result.code == 200) {\n        return \"ok\";\n      } else {\n        return Promise.reject(new Error(\"faile\"));\n      }\n    }\n  }\n});\n","start":1663399017458,"end":1663399017461,"order":"normal"}]}
