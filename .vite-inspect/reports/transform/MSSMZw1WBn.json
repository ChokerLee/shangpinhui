{"resolvedId":"E:/Project/www/wwwroot/vite/project-shangpinhui/node_modules/.vite/deps/swiper_vue.js?v=a7e311b8","transforms":[{"name":"vite:optimized-deps","result":"import {\n  core_default\n} from \"./chunk-2T3Q367C.js\";\nimport {\n  computed2 as computed,\n  h,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onBeforeUpdate,\n  onMounted,\n  onUpdated,\n  provide,\n  ref,\n  watch\n} from \"./chunk-4TEYBX75.js\";\nimport \"./chunk-TWLJ45QX.js\";\n\n// node_modules/swiper/components-shared/utils.js\nfunction isObject(o) {\n  return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction extend(target, src) {\n  const noExtend = [\"__proto__\", \"constructor\", \"prototype\"];\n  Object.keys(src).filter((key) => noExtend.indexOf(key) < 0).forEach((key) => {\n    if (typeof target[key] === \"undefined\")\n      target[key] = src[key];\n    else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      if (src[key].__swiper__)\n        target[key] = src[key];\n      else\n        extend(target[key], src[key]);\n    } else {\n      target[key] = src[key];\n    }\n  });\n}\nfunction needsNavigation(params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return params.navigation && typeof params.navigation.nextEl === \"undefined\" && typeof params.navigation.prevEl === \"undefined\";\n}\nfunction needsPagination(params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return params.pagination && typeof params.pagination.el === \"undefined\";\n}\nfunction needsScrollbar(params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return params.scrollbar && typeof params.scrollbar.el === \"undefined\";\n}\nfunction uniqueClasses(classNames) {\n  if (classNames === void 0) {\n    classNames = \"\";\n  }\n  const classes = classNames.split(\" \").map((c) => c.trim()).filter((c) => !!c);\n  const unique = [];\n  classes.forEach((c) => {\n    if (unique.indexOf(c) < 0)\n      unique.push(c);\n  });\n  return unique.join(\" \");\n}\n\n// node_modules/swiper/components-shared/params-list.js\nvar paramsList = [\n  \"modules\",\n  \"init\",\n  \"_direction\",\n  \"touchEventsTarget\",\n  \"initialSlide\",\n  \"_speed\",\n  \"cssMode\",\n  \"updateOnWindowResize\",\n  \"resizeObserver\",\n  \"nested\",\n  \"focusableElements\",\n  \"_enabled\",\n  \"_width\",\n  \"_height\",\n  \"preventInteractionOnTransition\",\n  \"userAgent\",\n  \"url\",\n  \"_edgeSwipeDetection\",\n  \"_edgeSwipeThreshold\",\n  \"_freeMode\",\n  \"_autoHeight\",\n  \"setWrapperSize\",\n  \"virtualTranslate\",\n  \"_effect\",\n  \"breakpoints\",\n  \"_spaceBetween\",\n  \"_slidesPerView\",\n  \"maxBackfaceHiddenSlides\",\n  \"_grid\",\n  \"_slidesPerGroup\",\n  \"_slidesPerGroupSkip\",\n  \"_slidesPerGroupAuto\",\n  \"_centeredSlides\",\n  \"_centeredSlidesBounds\",\n  \"_slidesOffsetBefore\",\n  \"_slidesOffsetAfter\",\n  \"normalizeSlideIndex\",\n  \"_centerInsufficientSlides\",\n  \"_watchOverflow\",\n  \"roundLengths\",\n  \"touchRatio\",\n  \"touchAngle\",\n  \"simulateTouch\",\n  \"_shortSwipes\",\n  \"_longSwipes\",\n  \"longSwipesRatio\",\n  \"longSwipesMs\",\n  \"_followFinger\",\n  \"allowTouchMove\",\n  \"_threshold\",\n  \"touchMoveStopPropagation\",\n  \"touchStartPreventDefault\",\n  \"touchStartForcePreventDefault\",\n  \"touchReleaseOnEdges\",\n  \"uniqueNavElements\",\n  \"_resistance\",\n  \"_resistanceRatio\",\n  \"_watchSlidesProgress\",\n  \"_grabCursor\",\n  \"preventClicks\",\n  \"preventClicksPropagation\",\n  \"_slideToClickedSlide\",\n  \"_preloadImages\",\n  \"updateOnImagesReady\",\n  \"_loop\",\n  \"_loopAdditionalSlides\",\n  \"_loopedSlides\",\n  \"_loopedSlidesLimit\",\n  \"_loopFillGroupWithBlank\",\n  \"loopPreventsSlide\",\n  \"_rewind\",\n  \"_allowSlidePrev\",\n  \"_allowSlideNext\",\n  \"_swipeHandler\",\n  \"_noSwiping\",\n  \"noSwipingClass\",\n  \"noSwipingSelector\",\n  \"passiveListeners\",\n  \"containerModifierClass\",\n  \"slideClass\",\n  \"slideBlankClass\",\n  \"slideActiveClass\",\n  \"slideDuplicateActiveClass\",\n  \"slideVisibleClass\",\n  \"slideDuplicateClass\",\n  \"slideNextClass\",\n  \"slideDuplicateNextClass\",\n  \"slidePrevClass\",\n  \"slideDuplicatePrevClass\",\n  \"wrapperClass\",\n  \"runCallbacksOnInit\",\n  \"observer\",\n  \"observeParents\",\n  \"observeSlideChildren\",\n  \"a11y\",\n  \"_autoplay\",\n  \"_controller\",\n  \"coverflowEffect\",\n  \"cubeEffect\",\n  \"fadeEffect\",\n  \"flipEffect\",\n  \"creativeEffect\",\n  \"cardsEffect\",\n  \"hashNavigation\",\n  \"history\",\n  \"keyboard\",\n  \"lazy\",\n  \"mousewheel\",\n  \"_navigation\",\n  \"_pagination\",\n  \"parallax\",\n  \"_scrollbar\",\n  \"_thumbs\",\n  \"virtual\",\n  \"zoom\"\n];\n\n// node_modules/swiper/components-shared/get-params.js\nfunction getParams(obj, splitEvents) {\n  if (obj === void 0) {\n    obj = {};\n  }\n  if (splitEvents === void 0) {\n    splitEvents = true;\n  }\n  const params = {\n    on: {}\n  };\n  const events = {};\n  const passedParams = {};\n  extend(params, core_default.defaults);\n  extend(params, core_default.extendedDefaults);\n  params._emitClasses = true;\n  params.init = false;\n  const rest = {};\n  const allowedParams = paramsList.map((key) => key.replace(/_/, \"\"));\n  const plainObj = Object.assign({}, obj);\n  Object.keys(plainObj).forEach((key) => {\n    if (typeof obj[key] === \"undefined\")\n      return;\n    if (allowedParams.indexOf(key) >= 0) {\n      if (isObject(obj[key])) {\n        params[key] = {};\n        passedParams[key] = {};\n        extend(params[key], obj[key]);\n        extend(passedParams[key], obj[key]);\n      } else {\n        params[key] = obj[key];\n        passedParams[key] = obj[key];\n      }\n    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === \"function\") {\n      if (splitEvents) {\n        events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      } else {\n        params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      }\n    } else {\n      rest[key] = obj[key];\n    }\n  });\n  [\"navigation\", \"pagination\", \"scrollbar\"].forEach((key) => {\n    if (params[key] === true)\n      params[key] = {};\n    if (params[key] === false)\n      delete params[key];\n  });\n  return {\n    params,\n    passedParams,\n    rest,\n    events\n  };\n}\n\n// node_modules/swiper/components-shared/mount-swiper.js\nfunction mountSwiper(_ref, swiperParams) {\n  let {\n    el,\n    nextEl,\n    prevEl,\n    paginationEl,\n    scrollbarEl,\n    swiper\n  } = _ref;\n  if (needsNavigation(swiperParams) && nextEl && prevEl) {\n    swiper.params.navigation.nextEl = nextEl;\n    swiper.originalParams.navigation.nextEl = nextEl;\n    swiper.params.navigation.prevEl = prevEl;\n    swiper.originalParams.navigation.prevEl = prevEl;\n  }\n  if (needsPagination(swiperParams) && paginationEl) {\n    swiper.params.pagination.el = paginationEl;\n    swiper.originalParams.pagination.el = paginationEl;\n  }\n  if (needsScrollbar(swiperParams) && scrollbarEl) {\n    swiper.params.scrollbar.el = scrollbarEl;\n    swiper.originalParams.scrollbar.el = scrollbarEl;\n  }\n  swiper.init(el);\n}\n\n// node_modules/swiper/vue/loop.js\nfunction calcLoopedSlides(slides, swiperParams) {\n  let slidesPerViewParams = swiperParams.slidesPerView;\n  if (swiperParams.breakpoints) {\n    const breakpoint = core_default.prototype.getBreakpoint(swiperParams.breakpoints);\n    const breakpointOnlyParams = breakpoint in swiperParams.breakpoints ? swiperParams.breakpoints[breakpoint] : void 0;\n    if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {\n      slidesPerViewParams = breakpointOnlyParams.slidesPerView;\n    }\n  }\n  let loopedSlides = Math.ceil(parseFloat(swiperParams.loopedSlides || slidesPerViewParams, 10));\n  loopedSlides += swiperParams.loopAdditionalSlides;\n  if (loopedSlides > slides.length && swiperParams.loopedSlidesLimit) {\n    loopedSlides = slides.length;\n  }\n  return loopedSlides;\n}\nfunction renderLoop(swiperRef, slides, swiperParams) {\n  const modifiedSlides = slides.map((child, index) => {\n    if (!child.props)\n      child.props = {};\n    child.props.swiperRef = swiperRef;\n    child.props[\"data-swiper-slide-index\"] = index;\n    return child;\n  });\n  function duplicateSlide(child, index, position) {\n    if (!child.props)\n      child.props = {};\n    return h(child.type, {\n      ...child.props,\n      key: `${child.key}-duplicate-${index}-${position}`,\n      class: `${child.props.className || \"\"} ${swiperParams.slideDuplicateClass} ${child.props.class || \"\"}`\n    }, child.children);\n  }\n  if (swiperParams.loopFillGroupWithBlank) {\n    const blankSlidesNum = swiperParams.slidesPerGroup - modifiedSlides.length % swiperParams.slidesPerGroup;\n    if (blankSlidesNum !== swiperParams.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankSlide = h(\"div\", {\n          class: `${swiperParams.slideClass} ${swiperParams.slideBlankClass}`\n        });\n        modifiedSlides.push(blankSlide);\n      }\n    }\n  }\n  if (swiperParams.slidesPerView === \"auto\" && !swiperParams.loopedSlides) {\n    swiperParams.loopedSlides = modifiedSlides.length;\n  }\n  const loopedSlides = calcLoopedSlides(modifiedSlides, swiperParams);\n  const prependSlides = [];\n  const appendSlides = [];\n  for (let i = 0; i < loopedSlides; i += 1) {\n    const index = i - Math.floor(i / modifiedSlides.length) * modifiedSlides.length;\n    appendSlides.push(duplicateSlide(modifiedSlides[index], i, \"append\"));\n    prependSlides.unshift(duplicateSlide(modifiedSlides[modifiedSlides.length - index - 1], i, \"prepend\"));\n  }\n  if (swiperRef.value) {\n    swiperRef.value.loopedSlides = loopedSlides;\n  }\n  return [...prependSlides, ...modifiedSlides, ...appendSlides];\n}\n\n// node_modules/swiper/components-shared/get-changed-params.js\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n  const keys = [];\n  if (!oldParams)\n    return keys;\n  const addKey = (key) => {\n    if (keys.indexOf(key) < 0)\n      keys.push(key);\n  };\n  if (children && oldChildren) {\n    const oldChildrenKeys = oldChildren.map(getKey);\n    const childrenKeys = children.map(getKey);\n    if (oldChildrenKeys.join(\"\") !== childrenKeys.join(\"\"))\n      addKey(\"children\");\n    if (oldChildren.length !== children.length)\n      addKey(\"children\");\n  }\n  const watchParams = paramsList.filter((key) => key[0] === \"_\").map((key) => key.replace(/_/, \"\"));\n  watchParams.forEach((key) => {\n    if (key in swiperParams && key in oldParams) {\n      if (isObject(swiperParams[key]) && isObject(oldParams[key])) {\n        const newKeys = Object.keys(swiperParams[key]);\n        const oldKeys = Object.keys(oldParams[key]);\n        if (newKeys.length !== oldKeys.length) {\n          addKey(key);\n        } else {\n          newKeys.forEach((newKey) => {\n            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n              addKey(key);\n            }\n          });\n          oldKeys.forEach((oldKey) => {\n            if (swiperParams[key][oldKey] !== oldParams[key][oldKey])\n              addKey(key);\n          });\n        }\n      } else if (swiperParams[key] !== oldParams[key]) {\n        addKey(key);\n      }\n    }\n  });\n  return keys;\n}\n\n// node_modules/swiper/vue/get-children.js\nfunction getChildren(originalSlots, slidesRef, oldSlidesRef) {\n  if (originalSlots === void 0) {\n    originalSlots = {};\n  }\n  const slides = [];\n  const slots = {\n    \"container-start\": [],\n    \"container-end\": [],\n    \"wrapper-start\": [],\n    \"wrapper-end\": []\n  };\n  const getSlidesFromElements = (els, slotName) => {\n    if (!Array.isArray(els)) {\n      return;\n    }\n    els.forEach((vnode) => {\n      const isFragment = typeof vnode.type === \"symbol\";\n      if (slotName === \"default\")\n        slotName = \"container-end\";\n      if (isFragment && vnode.children) {\n        getSlidesFromElements(vnode.children, \"default\");\n      } else if (vnode.type && (vnode.type.name === \"SwiperSlide\" || vnode.type.name === \"AsyncComponentWrapper\")) {\n        slides.push(vnode);\n      } else if (slots[slotName]) {\n        slots[slotName].push(vnode);\n      }\n    });\n  };\n  Object.keys(originalSlots).forEach((slotName) => {\n    if (typeof originalSlots[slotName] !== \"function\")\n      return;\n    const els = originalSlots[slotName]();\n    getSlidesFromElements(els, slotName);\n  });\n  oldSlidesRef.value = slidesRef.value;\n  slidesRef.value = slides;\n  return {\n    slides,\n    slots\n  };\n}\n\n// node_modules/swiper/components-shared/update-swiper.js\nfunction updateSwiper(_ref) {\n  let {\n    swiper,\n    slides,\n    passedParams,\n    changedParams,\n    nextEl,\n    prevEl,\n    scrollbarEl,\n    paginationEl\n  } = _ref;\n  const updateParams = changedParams.filter((key) => key !== \"children\" && key !== \"direction\");\n  const {\n    params: currentParams,\n    pagination,\n    navigation,\n    scrollbar,\n    virtual,\n    thumbs\n  } = swiper;\n  let needThumbsInit;\n  let needControllerInit;\n  let needPaginationInit;\n  let needScrollbarInit;\n  let needNavigationInit;\n  if (changedParams.includes(\"thumbs\") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n    needThumbsInit = true;\n  }\n  if (changedParams.includes(\"controller\") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n    needControllerInit = true;\n  }\n  if (changedParams.includes(\"pagination\") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n    needPaginationInit = true;\n  }\n  if (changedParams.includes(\"scrollbar\") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n    needScrollbarInit = true;\n  }\n  if (changedParams.includes(\"navigation\") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n    needNavigationInit = true;\n  }\n  const destroyModule = (mod) => {\n    if (!swiper[mod])\n      return;\n    swiper[mod].destroy();\n    if (mod === \"navigation\") {\n      currentParams[mod].prevEl = void 0;\n      currentParams[mod].nextEl = void 0;\n      swiper[mod].prevEl = void 0;\n      swiper[mod].nextEl = void 0;\n    } else {\n      currentParams[mod].el = void 0;\n      swiper[mod].el = void 0;\n    }\n  };\n  updateParams.forEach((key) => {\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n      extend(currentParams[key], passedParams[key]);\n    } else {\n      const newValue = passedParams[key];\n      if ((newValue === true || newValue === false) && (key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\")) {\n        if (newValue === false) {\n          destroyModule(key);\n        }\n      } else {\n        currentParams[key] = passedParams[key];\n      }\n    }\n  });\n  if (updateParams.includes(\"controller\") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n  if (changedParams.includes(\"children\") && slides && virtual && currentParams.virtual.enabled) {\n    virtual.slides = slides;\n    virtual.update(true);\n  } else if (changedParams.includes(\"children\") && swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n  if (needThumbsInit) {\n    const initialized = thumbs.init();\n    if (initialized)\n      thumbs.update(true);\n  }\n  if (needControllerInit) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n  if (needPaginationInit) {\n    if (paginationEl)\n      currentParams.pagination.el = paginationEl;\n    pagination.init();\n    pagination.render();\n    pagination.update();\n  }\n  if (needScrollbarInit) {\n    if (scrollbarEl)\n      currentParams.scrollbar.el = scrollbarEl;\n    scrollbar.init();\n    scrollbar.updateSize();\n    scrollbar.setTranslate();\n  }\n  if (needNavigationInit) {\n    if (nextEl)\n      currentParams.navigation.nextEl = nextEl;\n    if (prevEl)\n      currentParams.navigation.prevEl = prevEl;\n    navigation.init();\n    navigation.update();\n  }\n  if (changedParams.includes(\"allowSlideNext\")) {\n    swiper.allowSlideNext = passedParams.allowSlideNext;\n  }\n  if (changedParams.includes(\"allowSlidePrev\")) {\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\n  }\n  if (changedParams.includes(\"direction\")) {\n    swiper.changeDirection(passedParams.direction, false);\n  }\n  swiper.update();\n}\n\n// node_modules/swiper/vue/virtual.js\nfunction renderVirtual(swiperRef, slides, virtualData) {\n  if (!virtualData)\n    return null;\n  const style = swiperRef.value.isHorizontal() ? {\n    [swiperRef.value.rtlTranslate ? \"right\" : \"left\"]: `${virtualData.offset}px`\n  } : {\n    top: `${virtualData.offset}px`\n  };\n  return slides.filter((slide, index) => index >= virtualData.from && index <= virtualData.to).map((slide) => {\n    if (!slide.props)\n      slide.props = {};\n    if (!slide.props.style)\n      slide.props.style = {};\n    slide.props.swiperRef = swiperRef;\n    slide.props.style = style;\n    return h(slide.type, {\n      ...slide.props\n    }, slide.children);\n  });\n}\n\n// node_modules/swiper/components-shared/update-on-virtual-data.js\nvar updateOnVirtualData = (swiper) => {\n  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled)\n    return;\n  swiper.updateSlides();\n  swiper.updateProgress();\n  swiper.updateSlidesClasses();\n  if (swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n  if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n    swiper.parallax.setTranslate();\n  }\n};\n\n// node_modules/swiper/vue/swiper.js\nvar Swiper = {\n  name: \"Swiper\",\n  props: {\n    tag: {\n      type: String,\n      default: \"div\"\n    },\n    wrapperTag: {\n      type: String,\n      default: \"div\"\n    },\n    modules: {\n      type: Array,\n      default: void 0\n    },\n    init: {\n      type: Boolean,\n      default: void 0\n    },\n    direction: {\n      type: String,\n      default: void 0\n    },\n    touchEventsTarget: {\n      type: String,\n      default: void 0\n    },\n    initialSlide: {\n      type: Number,\n      default: void 0\n    },\n    speed: {\n      type: Number,\n      default: void 0\n    },\n    cssMode: {\n      type: Boolean,\n      default: void 0\n    },\n    updateOnWindowResize: {\n      type: Boolean,\n      default: void 0\n    },\n    resizeObserver: {\n      type: Boolean,\n      default: void 0\n    },\n    nested: {\n      type: Boolean,\n      default: void 0\n    },\n    focusableElements: {\n      type: String,\n      default: void 0\n    },\n    width: {\n      type: Number,\n      default: void 0\n    },\n    height: {\n      type: Number,\n      default: void 0\n    },\n    preventInteractionOnTransition: {\n      type: Boolean,\n      default: void 0\n    },\n    userAgent: {\n      type: String,\n      default: void 0\n    },\n    url: {\n      type: String,\n      default: void 0\n    },\n    edgeSwipeDetection: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    edgeSwipeThreshold: {\n      type: Number,\n      default: void 0\n    },\n    autoHeight: {\n      type: Boolean,\n      default: void 0\n    },\n    setWrapperSize: {\n      type: Boolean,\n      default: void 0\n    },\n    virtualTranslate: {\n      type: Boolean,\n      default: void 0\n    },\n    effect: {\n      type: String,\n      default: void 0\n    },\n    breakpoints: {\n      type: Object,\n      default: void 0\n    },\n    spaceBetween: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerView: {\n      type: [Number, String],\n      default: void 0\n    },\n    maxBackfaceHiddenSlides: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerGroup: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerGroupSkip: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerGroupAuto: {\n      type: Boolean,\n      default: void 0\n    },\n    centeredSlides: {\n      type: Boolean,\n      default: void 0\n    },\n    centeredSlidesBounds: {\n      type: Boolean,\n      default: void 0\n    },\n    slidesOffsetBefore: {\n      type: Number,\n      default: void 0\n    },\n    slidesOffsetAfter: {\n      type: Number,\n      default: void 0\n    },\n    normalizeSlideIndex: {\n      type: Boolean,\n      default: void 0\n    },\n    centerInsufficientSlides: {\n      type: Boolean,\n      default: void 0\n    },\n    watchOverflow: {\n      type: Boolean,\n      default: void 0\n    },\n    roundLengths: {\n      type: Boolean,\n      default: void 0\n    },\n    touchRatio: {\n      type: Number,\n      default: void 0\n    },\n    touchAngle: {\n      type: Number,\n      default: void 0\n    },\n    simulateTouch: {\n      type: Boolean,\n      default: void 0\n    },\n    shortSwipes: {\n      type: Boolean,\n      default: void 0\n    },\n    longSwipes: {\n      type: Boolean,\n      default: void 0\n    },\n    longSwipesRatio: {\n      type: Number,\n      default: void 0\n    },\n    longSwipesMs: {\n      type: Number,\n      default: void 0\n    },\n    followFinger: {\n      type: Boolean,\n      default: void 0\n    },\n    allowTouchMove: {\n      type: Boolean,\n      default: void 0\n    },\n    threshold: {\n      type: Number,\n      default: void 0\n    },\n    touchMoveStopPropagation: {\n      type: Boolean,\n      default: void 0\n    },\n    touchStartPreventDefault: {\n      type: Boolean,\n      default: void 0\n    },\n    touchStartForcePreventDefault: {\n      type: Boolean,\n      default: void 0\n    },\n    touchReleaseOnEdges: {\n      type: Boolean,\n      default: void 0\n    },\n    uniqueNavElements: {\n      type: Boolean,\n      default: void 0\n    },\n    resistance: {\n      type: Boolean,\n      default: void 0\n    },\n    resistanceRatio: {\n      type: Number,\n      default: void 0\n    },\n    watchSlidesProgress: {\n      type: Boolean,\n      default: void 0\n    },\n    grabCursor: {\n      type: Boolean,\n      default: void 0\n    },\n    preventClicks: {\n      type: Boolean,\n      default: void 0\n    },\n    preventClicksPropagation: {\n      type: Boolean,\n      default: void 0\n    },\n    slideToClickedSlide: {\n      type: Boolean,\n      default: void 0\n    },\n    preloadImages: {\n      type: Boolean,\n      default: void 0\n    },\n    updateOnImagesReady: {\n      type: Boolean,\n      default: void 0\n    },\n    loop: {\n      type: Boolean,\n      default: void 0\n    },\n    loopAdditionalSlides: {\n      type: Number,\n      default: void 0\n    },\n    loopedSlides: {\n      type: Number,\n      default: void 0\n    },\n    loopedSlidesLimit: {\n      type: Boolean,\n      default: true\n    },\n    loopFillGroupWithBlank: {\n      type: Boolean,\n      default: void 0\n    },\n    loopPreventsSlide: {\n      type: Boolean,\n      default: void 0\n    },\n    rewind: {\n      type: Boolean,\n      default: void 0\n    },\n    allowSlidePrev: {\n      type: Boolean,\n      default: void 0\n    },\n    allowSlideNext: {\n      type: Boolean,\n      default: void 0\n    },\n    swipeHandler: {\n      type: Boolean,\n      default: void 0\n    },\n    noSwiping: {\n      type: Boolean,\n      default: void 0\n    },\n    noSwipingClass: {\n      type: String,\n      default: void 0\n    },\n    noSwipingSelector: {\n      type: String,\n      default: void 0\n    },\n    passiveListeners: {\n      type: Boolean,\n      default: void 0\n    },\n    containerModifierClass: {\n      type: String,\n      default: void 0\n    },\n    slideClass: {\n      type: String,\n      default: void 0\n    },\n    slideBlankClass: {\n      type: String,\n      default: void 0\n    },\n    slideActiveClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicateActiveClass: {\n      type: String,\n      default: void 0\n    },\n    slideVisibleClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicateClass: {\n      type: String,\n      default: void 0\n    },\n    slideNextClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicateNextClass: {\n      type: String,\n      default: void 0\n    },\n    slidePrevClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicatePrevClass: {\n      type: String,\n      default: void 0\n    },\n    wrapperClass: {\n      type: String,\n      default: void 0\n    },\n    runCallbacksOnInit: {\n      type: Boolean,\n      default: void 0\n    },\n    observer: {\n      type: Boolean,\n      default: void 0\n    },\n    observeParents: {\n      type: Boolean,\n      default: void 0\n    },\n    observeSlideChildren: {\n      type: Boolean,\n      default: void 0\n    },\n    a11y: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    autoplay: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    controller: {\n      type: Object,\n      default: void 0\n    },\n    coverflowEffect: {\n      type: Object,\n      default: void 0\n    },\n    cubeEffect: {\n      type: Object,\n      default: void 0\n    },\n    fadeEffect: {\n      type: Object,\n      default: void 0\n    },\n    flipEffect: {\n      type: Object,\n      default: void 0\n    },\n    creativeEffect: {\n      type: Object,\n      default: void 0\n    },\n    cardsEffect: {\n      type: Object,\n      default: void 0\n    },\n    hashNavigation: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    history: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    keyboard: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    lazy: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    mousewheel: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    navigation: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    pagination: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    parallax: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    scrollbar: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    thumbs: {\n      type: Object,\n      default: void 0\n    },\n    virtual: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    zoom: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    grid: {\n      type: [Object],\n      default: void 0\n    },\n    freeMode: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    enabled: {\n      type: Boolean,\n      default: void 0\n    }\n  },\n  emits: [\"_beforeBreakpoint\", \"_containerClasses\", \"_slideClass\", \"_slideClasses\", \"_swiper\", \"_freeModeNoMomentumRelease\", \"activeIndexChange\", \"afterInit\", \"autoplay\", \"autoplayStart\", \"autoplayStop\", \"autoplayPause\", \"autoplayResume\", \"beforeDestroy\", \"beforeInit\", \"beforeLoopFix\", \"beforeResize\", \"beforeSlideChangeStart\", \"beforeTransitionStart\", \"breakpoint\", \"changeDirection\", \"click\", \"disable\", \"doubleTap\", \"doubleClick\", \"destroy\", \"enable\", \"fromEdge\", \"hashChange\", \"hashSet\", \"imagesReady\", \"init\", \"keyPress\", \"lazyImageLoad\", \"lazyImageReady\", \"lock\", \"loopFix\", \"momentumBounce\", \"navigationHide\", \"navigationShow\", \"navigationPrev\", \"navigationNext\", \"observerUpdate\", \"orientationchange\", \"paginationHide\", \"paginationRender\", \"paginationShow\", \"paginationUpdate\", \"progress\", \"reachBeginning\", \"reachEnd\", \"realIndexChange\", \"resize\", \"scroll\", \"scrollbarDragEnd\", \"scrollbarDragMove\", \"scrollbarDragStart\", \"setTransition\", \"setTranslate\", \"slideChange\", \"slideChangeTransitionEnd\", \"slideChangeTransitionStart\", \"slideNextTransitionEnd\", \"slideNextTransitionStart\", \"slidePrevTransitionEnd\", \"slidePrevTransitionStart\", \"slideResetTransitionStart\", \"slideResetTransitionEnd\", \"sliderMove\", \"sliderFirstMove\", \"slidesLengthChange\", \"slidesGridLengthChange\", \"snapGridLengthChange\", \"snapIndexChange\", \"swiper\", \"tap\", \"toEdge\", \"touchEnd\", \"touchMove\", \"touchMoveOpposite\", \"touchStart\", \"transitionEnd\", \"transitionStart\", \"unlock\", \"update\", \"virtualUpdate\", \"zoomChange\"],\n  setup(props, _ref) {\n    let {\n      slots: originalSlots,\n      emit\n    } = _ref;\n    const {\n      tag: Tag,\n      wrapperTag: WrapperTag\n    } = props;\n    const containerClasses = ref(\"swiper\");\n    const virtualData = ref(null);\n    const breakpointChanged = ref(false);\n    const initializedRef = ref(false);\n    const swiperElRef = ref(null);\n    const swiperRef = ref(null);\n    const oldPassedParamsRef = ref(null);\n    const slidesRef = {\n      value: []\n    };\n    const oldSlidesRef = {\n      value: []\n    };\n    const nextElRef = ref(null);\n    const prevElRef = ref(null);\n    const paginationElRef = ref(null);\n    const scrollbarElRef = ref(null);\n    const {\n      params: swiperParams,\n      passedParams\n    } = getParams(props, false);\n    getChildren(originalSlots, slidesRef, oldSlidesRef);\n    oldPassedParamsRef.value = passedParams;\n    oldSlidesRef.value = slidesRef.value;\n    const onBeforeBreakpoint = () => {\n      getChildren(originalSlots, slidesRef, oldSlidesRef);\n      breakpointChanged.value = true;\n    };\n    swiperParams.onAny = function(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      emit(event, ...args);\n    };\n    Object.assign(swiperParams.on, {\n      _beforeBreakpoint: onBeforeBreakpoint,\n      _containerClasses(swiper, classes) {\n        containerClasses.value = classes;\n      }\n    });\n    swiperRef.value = new core_default(swiperParams);\n    swiperRef.value.loopCreate = () => {\n    };\n    swiperRef.value.loopDestroy = () => {\n    };\n    if (swiperParams.loop) {\n      swiperRef.value.loopedSlides = calcLoopedSlides(slidesRef.value, swiperParams);\n    }\n    if (swiperRef.value.virtual && swiperRef.value.params.virtual.enabled) {\n      swiperRef.value.virtual.slides = slidesRef.value;\n      const extendWith = {\n        cache: false,\n        slides: slidesRef.value,\n        renderExternal: (data) => {\n          virtualData.value = data;\n        },\n        renderExternalUpdate: false\n      };\n      extend(swiperRef.value.params.virtual, extendWith);\n      extend(swiperRef.value.originalParams.virtual, extendWith);\n    }\n    onUpdated(() => {\n      if (!initializedRef.value && swiperRef.value) {\n        swiperRef.value.emitSlidesClasses();\n        initializedRef.value = true;\n      }\n      const {\n        passedParams: newPassedParams\n      } = getParams(props, false);\n      const changedParams = getChangedParams(newPassedParams, oldPassedParamsRef.value, slidesRef.value, oldSlidesRef.value, (c) => c.props && c.props.key);\n      oldPassedParamsRef.value = newPassedParams;\n      if ((changedParams.length || breakpointChanged.value) && swiperRef.value && !swiperRef.value.destroyed) {\n        updateSwiper({\n          swiper: swiperRef.value,\n          slides: slidesRef.value,\n          passedParams: newPassedParams,\n          changedParams,\n          nextEl: nextElRef.value,\n          prevEl: prevElRef.value,\n          scrollbarEl: scrollbarElRef.value,\n          paginationEl: paginationElRef.value\n        });\n      }\n      breakpointChanged.value = false;\n    });\n    provide(\"swiper\", swiperRef);\n    watch(virtualData, () => {\n      nextTick(() => {\n        updateOnVirtualData(swiperRef.value);\n      });\n    });\n    onMounted(() => {\n      if (!swiperElRef.value)\n        return;\n      mountSwiper({\n        el: swiperElRef.value,\n        nextEl: nextElRef.value,\n        prevEl: prevElRef.value,\n        paginationEl: paginationElRef.value,\n        scrollbarEl: scrollbarElRef.value,\n        swiper: swiperRef.value\n      }, swiperParams);\n      emit(\"swiper\", swiperRef.value);\n    });\n    onBeforeUnmount(() => {\n      if (swiperRef.value && !swiperRef.value.destroyed) {\n        swiperRef.value.destroy(true, false);\n      }\n    });\n    function renderSlides(slides) {\n      if (swiperParams.virtual) {\n        return renderVirtual(swiperRef, slides, virtualData.value);\n      }\n      if (!swiperParams.loop || swiperRef.value && swiperRef.value.destroyed) {\n        slides.forEach((slide) => {\n          if (!slide.props)\n            slide.props = {};\n          slide.props.swiperRef = swiperRef;\n        });\n        return slides;\n      }\n      return renderLoop(swiperRef, slides, swiperParams);\n    }\n    return () => {\n      const {\n        slides,\n        slots\n      } = getChildren(originalSlots, slidesRef, oldSlidesRef);\n      return h(Tag, {\n        ref: swiperElRef,\n        class: uniqueClasses(containerClasses.value)\n      }, [slots[\"container-start\"], h(WrapperTag, {\n        class: \"swiper-wrapper\"\n      }, [slots[\"wrapper-start\"], renderSlides(slides), slots[\"wrapper-end\"]]), needsNavigation(props) && [h(\"div\", {\n        ref: prevElRef,\n        class: \"swiper-button-prev\"\n      }), h(\"div\", {\n        ref: nextElRef,\n        class: \"swiper-button-next\"\n      })], needsScrollbar(props) && h(\"div\", {\n        ref: scrollbarElRef,\n        class: \"swiper-scrollbar\"\n      }), needsPagination(props) && h(\"div\", {\n        ref: paginationElRef,\n        class: \"swiper-pagination\"\n      }), slots[\"container-end\"]]);\n    };\n  }\n};\n\n// node_modules/swiper/vue/swiper-slide.js\nvar SwiperSlide = {\n  name: \"SwiperSlide\",\n  props: {\n    tag: {\n      type: String,\n      default: \"div\"\n    },\n    swiperRef: {\n      type: Object,\n      required: false\n    },\n    zoom: {\n      type: Boolean,\n      default: void 0\n    },\n    virtualIndex: {\n      type: [String, Number],\n      default: void 0\n    }\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    let eventAttached = false;\n    const {\n      swiperRef\n    } = props;\n    const slideElRef = ref(null);\n    const slideClasses = ref(\"swiper-slide\");\n    function updateClasses(swiper, el, classNames) {\n      if (el === slideElRef.value) {\n        slideClasses.value = classNames;\n      }\n    }\n    onMounted(() => {\n      if (!swiperRef.value)\n        return;\n      swiperRef.value.on(\"_slideClass\", updateClasses);\n      eventAttached = true;\n    });\n    onBeforeUpdate(() => {\n      if (eventAttached || !swiperRef || !swiperRef.value)\n        return;\n      swiperRef.value.on(\"_slideClass\", updateClasses);\n      eventAttached = true;\n    });\n    onUpdated(() => {\n      if (!slideElRef.value || !swiperRef || !swiperRef.value)\n        return;\n      if (swiperRef.value.destroyed) {\n        if (slideClasses.value !== \"swiper-slide\") {\n          slideClasses.value = \"swiper-slide\";\n        }\n      }\n    });\n    onBeforeUnmount(() => {\n      if (!swiperRef || !swiperRef.value)\n        return;\n      swiperRef.value.off(\"_slideClass\", updateClasses);\n    });\n    const slideData = computed(() => ({\n      isActive: slideClasses.value.indexOf(\"swiper-slide-active\") >= 0 || slideClasses.value.indexOf(\"swiper-slide-duplicate-active\") >= 0,\n      isVisible: slideClasses.value.indexOf(\"swiper-slide-visible\") >= 0,\n      isDuplicate: slideClasses.value.indexOf(\"swiper-slide-duplicate\") >= 0,\n      isPrev: slideClasses.value.indexOf(\"swiper-slide-prev\") >= 0 || slideClasses.value.indexOf(\"swiper-slide-duplicate-prev\") >= 0,\n      isNext: slideClasses.value.indexOf(\"swiper-slide-next\") >= 0 || slideClasses.value.indexOf(\"swiper-slide-duplicate-next\") >= 0\n    }));\n    provide(\"swiperSlide\", slideData);\n    return () => {\n      return h(props.tag, {\n        class: uniqueClasses(`${slideClasses.value}`),\n        ref: slideElRef,\n        \"data-swiper-slide-index\": props.virtualIndex\n      }, props.zoom ? h(\"div\", {\n        class: \"swiper-zoom-container\",\n        \"data-swiper-zoom\": typeof props.zoom === \"number\" ? props.zoom : void 0\n      }, slots.default && slots.default(slideData.value)) : slots.default && slots.default(slideData.value));\n    };\n  }\n};\n\n// node_modules/swiper/vue/context.js\nvar useSwiperSlide = () => {\n  return inject(\"swiperSlide\");\n};\nvar useSwiper = () => {\n  return inject(\"swiper\");\n};\nexport {\n  Swiper,\n  SwiperSlide,\n  useSwiper,\n  useSwiperSlide\n};\n//# sourceMappingURL=swiper_vue.js.map\n","start":1663399072790,"end":1663399072806},{"name":"vite:import-analysis","result":"import {\n  core_default\n} from \"/node_modules/.vite/deps/chunk-2T3Q367C.js?v=a7e311b8\";\nimport {\n  computed2 as computed,\n  h,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onBeforeUpdate,\n  onMounted,\n  onUpdated,\n  provide,\n  ref,\n  watch\n} from \"/node_modules/.vite/deps/chunk-4TEYBX75.js?v=a7e311b8\";\nimport \"/node_modules/.vite/deps/chunk-TWLJ45QX.js?v=a7e311b8\";\n\n// node_modules/swiper/components-shared/utils.js\nfunction isObject(o) {\n  return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction extend(target, src) {\n  const noExtend = [\"__proto__\", \"constructor\", \"prototype\"];\n  Object.keys(src).filter((key) => noExtend.indexOf(key) < 0).forEach((key) => {\n    if (typeof target[key] === \"undefined\")\n      target[key] = src[key];\n    else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      if (src[key].__swiper__)\n        target[key] = src[key];\n      else\n        extend(target[key], src[key]);\n    } else {\n      target[key] = src[key];\n    }\n  });\n}\nfunction needsNavigation(params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return params.navigation && typeof params.navigation.nextEl === \"undefined\" && typeof params.navigation.prevEl === \"undefined\";\n}\nfunction needsPagination(params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return params.pagination && typeof params.pagination.el === \"undefined\";\n}\nfunction needsScrollbar(params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return params.scrollbar && typeof params.scrollbar.el === \"undefined\";\n}\nfunction uniqueClasses(classNames) {\n  if (classNames === void 0) {\n    classNames = \"\";\n  }\n  const classes = classNames.split(\" \").map((c) => c.trim()).filter((c) => !!c);\n  const unique = [];\n  classes.forEach((c) => {\n    if (unique.indexOf(c) < 0)\n      unique.push(c);\n  });\n  return unique.join(\" \");\n}\n\n// node_modules/swiper/components-shared/params-list.js\nvar paramsList = [\n  \"modules\",\n  \"init\",\n  \"_direction\",\n  \"touchEventsTarget\",\n  \"initialSlide\",\n  \"_speed\",\n  \"cssMode\",\n  \"updateOnWindowResize\",\n  \"resizeObserver\",\n  \"nested\",\n  \"focusableElements\",\n  \"_enabled\",\n  \"_width\",\n  \"_height\",\n  \"preventInteractionOnTransition\",\n  \"userAgent\",\n  \"url\",\n  \"_edgeSwipeDetection\",\n  \"_edgeSwipeThreshold\",\n  \"_freeMode\",\n  \"_autoHeight\",\n  \"setWrapperSize\",\n  \"virtualTranslate\",\n  \"_effect\",\n  \"breakpoints\",\n  \"_spaceBetween\",\n  \"_slidesPerView\",\n  \"maxBackfaceHiddenSlides\",\n  \"_grid\",\n  \"_slidesPerGroup\",\n  \"_slidesPerGroupSkip\",\n  \"_slidesPerGroupAuto\",\n  \"_centeredSlides\",\n  \"_centeredSlidesBounds\",\n  \"_slidesOffsetBefore\",\n  \"_slidesOffsetAfter\",\n  \"normalizeSlideIndex\",\n  \"_centerInsufficientSlides\",\n  \"_watchOverflow\",\n  \"roundLengths\",\n  \"touchRatio\",\n  \"touchAngle\",\n  \"simulateTouch\",\n  \"_shortSwipes\",\n  \"_longSwipes\",\n  \"longSwipesRatio\",\n  \"longSwipesMs\",\n  \"_followFinger\",\n  \"allowTouchMove\",\n  \"_threshold\",\n  \"touchMoveStopPropagation\",\n  \"touchStartPreventDefault\",\n  \"touchStartForcePreventDefault\",\n  \"touchReleaseOnEdges\",\n  \"uniqueNavElements\",\n  \"_resistance\",\n  \"_resistanceRatio\",\n  \"_watchSlidesProgress\",\n  \"_grabCursor\",\n  \"preventClicks\",\n  \"preventClicksPropagation\",\n  \"_slideToClickedSlide\",\n  \"_preloadImages\",\n  \"updateOnImagesReady\",\n  \"_loop\",\n  \"_loopAdditionalSlides\",\n  \"_loopedSlides\",\n  \"_loopedSlidesLimit\",\n  \"_loopFillGroupWithBlank\",\n  \"loopPreventsSlide\",\n  \"_rewind\",\n  \"_allowSlidePrev\",\n  \"_allowSlideNext\",\n  \"_swipeHandler\",\n  \"_noSwiping\",\n  \"noSwipingClass\",\n  \"noSwipingSelector\",\n  \"passiveListeners\",\n  \"containerModifierClass\",\n  \"slideClass\",\n  \"slideBlankClass\",\n  \"slideActiveClass\",\n  \"slideDuplicateActiveClass\",\n  \"slideVisibleClass\",\n  \"slideDuplicateClass\",\n  \"slideNextClass\",\n  \"slideDuplicateNextClass\",\n  \"slidePrevClass\",\n  \"slideDuplicatePrevClass\",\n  \"wrapperClass\",\n  \"runCallbacksOnInit\",\n  \"observer\",\n  \"observeParents\",\n  \"observeSlideChildren\",\n  \"a11y\",\n  \"_autoplay\",\n  \"_controller\",\n  \"coverflowEffect\",\n  \"cubeEffect\",\n  \"fadeEffect\",\n  \"flipEffect\",\n  \"creativeEffect\",\n  \"cardsEffect\",\n  \"hashNavigation\",\n  \"history\",\n  \"keyboard\",\n  \"lazy\",\n  \"mousewheel\",\n  \"_navigation\",\n  \"_pagination\",\n  \"parallax\",\n  \"_scrollbar\",\n  \"_thumbs\",\n  \"virtual\",\n  \"zoom\"\n];\n\n// node_modules/swiper/components-shared/get-params.js\nfunction getParams(obj, splitEvents) {\n  if (obj === void 0) {\n    obj = {};\n  }\n  if (splitEvents === void 0) {\n    splitEvents = true;\n  }\n  const params = {\n    on: {}\n  };\n  const events = {};\n  const passedParams = {};\n  extend(params, core_default.defaults);\n  extend(params, core_default.extendedDefaults);\n  params._emitClasses = true;\n  params.init = false;\n  const rest = {};\n  const allowedParams = paramsList.map((key) => key.replace(/_/, \"\"));\n  const plainObj = Object.assign({}, obj);\n  Object.keys(plainObj).forEach((key) => {\n    if (typeof obj[key] === \"undefined\")\n      return;\n    if (allowedParams.indexOf(key) >= 0) {\n      if (isObject(obj[key])) {\n        params[key] = {};\n        passedParams[key] = {};\n        extend(params[key], obj[key]);\n        extend(passedParams[key], obj[key]);\n      } else {\n        params[key] = obj[key];\n        passedParams[key] = obj[key];\n      }\n    } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === \"function\") {\n      if (splitEvents) {\n        events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      } else {\n        params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n      }\n    } else {\n      rest[key] = obj[key];\n    }\n  });\n  [\"navigation\", \"pagination\", \"scrollbar\"].forEach((key) => {\n    if (params[key] === true)\n      params[key] = {};\n    if (params[key] === false)\n      delete params[key];\n  });\n  return {\n    params,\n    passedParams,\n    rest,\n    events\n  };\n}\n\n// node_modules/swiper/components-shared/mount-swiper.js\nfunction mountSwiper(_ref, swiperParams) {\n  let {\n    el,\n    nextEl,\n    prevEl,\n    paginationEl,\n    scrollbarEl,\n    swiper\n  } = _ref;\n  if (needsNavigation(swiperParams) && nextEl && prevEl) {\n    swiper.params.navigation.nextEl = nextEl;\n    swiper.originalParams.navigation.nextEl = nextEl;\n    swiper.params.navigation.prevEl = prevEl;\n    swiper.originalParams.navigation.prevEl = prevEl;\n  }\n  if (needsPagination(swiperParams) && paginationEl) {\n    swiper.params.pagination.el = paginationEl;\n    swiper.originalParams.pagination.el = paginationEl;\n  }\n  if (needsScrollbar(swiperParams) && scrollbarEl) {\n    swiper.params.scrollbar.el = scrollbarEl;\n    swiper.originalParams.scrollbar.el = scrollbarEl;\n  }\n  swiper.init(el);\n}\n\n// node_modules/swiper/vue/loop.js\nfunction calcLoopedSlides(slides, swiperParams) {\n  let slidesPerViewParams = swiperParams.slidesPerView;\n  if (swiperParams.breakpoints) {\n    const breakpoint = core_default.prototype.getBreakpoint(swiperParams.breakpoints);\n    const breakpointOnlyParams = breakpoint in swiperParams.breakpoints ? swiperParams.breakpoints[breakpoint] : void 0;\n    if (breakpointOnlyParams && breakpointOnlyParams.slidesPerView) {\n      slidesPerViewParams = breakpointOnlyParams.slidesPerView;\n    }\n  }\n  let loopedSlides = Math.ceil(parseFloat(swiperParams.loopedSlides || slidesPerViewParams, 10));\n  loopedSlides += swiperParams.loopAdditionalSlides;\n  if (loopedSlides > slides.length && swiperParams.loopedSlidesLimit) {\n    loopedSlides = slides.length;\n  }\n  return loopedSlides;\n}\nfunction renderLoop(swiperRef, slides, swiperParams) {\n  const modifiedSlides = slides.map((child, index) => {\n    if (!child.props)\n      child.props = {};\n    child.props.swiperRef = swiperRef;\n    child.props[\"data-swiper-slide-index\"] = index;\n    return child;\n  });\n  function duplicateSlide(child, index, position) {\n    if (!child.props)\n      child.props = {};\n    return h(child.type, {\n      ...child.props,\n      key: `${child.key}-duplicate-${index}-${position}`,\n      class: `${child.props.className || \"\"} ${swiperParams.slideDuplicateClass} ${child.props.class || \"\"}`\n    }, child.children);\n  }\n  if (swiperParams.loopFillGroupWithBlank) {\n    const blankSlidesNum = swiperParams.slidesPerGroup - modifiedSlides.length % swiperParams.slidesPerGroup;\n    if (blankSlidesNum !== swiperParams.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankSlide = h(\"div\", {\n          class: `${swiperParams.slideClass} ${swiperParams.slideBlankClass}`\n        });\n        modifiedSlides.push(blankSlide);\n      }\n    }\n  }\n  if (swiperParams.slidesPerView === \"auto\" && !swiperParams.loopedSlides) {\n    swiperParams.loopedSlides = modifiedSlides.length;\n  }\n  const loopedSlides = calcLoopedSlides(modifiedSlides, swiperParams);\n  const prependSlides = [];\n  const appendSlides = [];\n  for (let i = 0; i < loopedSlides; i += 1) {\n    const index = i - Math.floor(i / modifiedSlides.length) * modifiedSlides.length;\n    appendSlides.push(duplicateSlide(modifiedSlides[index], i, \"append\"));\n    prependSlides.unshift(duplicateSlide(modifiedSlides[modifiedSlides.length - index - 1], i, \"prepend\"));\n  }\n  if (swiperRef.value) {\n    swiperRef.value.loopedSlides = loopedSlides;\n  }\n  return [...prependSlides, ...modifiedSlides, ...appendSlides];\n}\n\n// node_modules/swiper/components-shared/get-changed-params.js\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n  const keys = [];\n  if (!oldParams)\n    return keys;\n  const addKey = (key) => {\n    if (keys.indexOf(key) < 0)\n      keys.push(key);\n  };\n  if (children && oldChildren) {\n    const oldChildrenKeys = oldChildren.map(getKey);\n    const childrenKeys = children.map(getKey);\n    if (oldChildrenKeys.join(\"\") !== childrenKeys.join(\"\"))\n      addKey(\"children\");\n    if (oldChildren.length !== children.length)\n      addKey(\"children\");\n  }\n  const watchParams = paramsList.filter((key) => key[0] === \"_\").map((key) => key.replace(/_/, \"\"));\n  watchParams.forEach((key) => {\n    if (key in swiperParams && key in oldParams) {\n      if (isObject(swiperParams[key]) && isObject(oldParams[key])) {\n        const newKeys = Object.keys(swiperParams[key]);\n        const oldKeys = Object.keys(oldParams[key]);\n        if (newKeys.length !== oldKeys.length) {\n          addKey(key);\n        } else {\n          newKeys.forEach((newKey) => {\n            if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n              addKey(key);\n            }\n          });\n          oldKeys.forEach((oldKey) => {\n            if (swiperParams[key][oldKey] !== oldParams[key][oldKey])\n              addKey(key);\n          });\n        }\n      } else if (swiperParams[key] !== oldParams[key]) {\n        addKey(key);\n      }\n    }\n  });\n  return keys;\n}\n\n// node_modules/swiper/vue/get-children.js\nfunction getChildren(originalSlots, slidesRef, oldSlidesRef) {\n  if (originalSlots === void 0) {\n    originalSlots = {};\n  }\n  const slides = [];\n  const slots = {\n    \"container-start\": [],\n    \"container-end\": [],\n    \"wrapper-start\": [],\n    \"wrapper-end\": []\n  };\n  const getSlidesFromElements = (els, slotName) => {\n    if (!Array.isArray(els)) {\n      return;\n    }\n    els.forEach((vnode) => {\n      const isFragment = typeof vnode.type === \"symbol\";\n      if (slotName === \"default\")\n        slotName = \"container-end\";\n      if (isFragment && vnode.children) {\n        getSlidesFromElements(vnode.children, \"default\");\n      } else if (vnode.type && (vnode.type.name === \"SwiperSlide\" || vnode.type.name === \"AsyncComponentWrapper\")) {\n        slides.push(vnode);\n      } else if (slots[slotName]) {\n        slots[slotName].push(vnode);\n      }\n    });\n  };\n  Object.keys(originalSlots).forEach((slotName) => {\n    if (typeof originalSlots[slotName] !== \"function\")\n      return;\n    const els = originalSlots[slotName]();\n    getSlidesFromElements(els, slotName);\n  });\n  oldSlidesRef.value = slidesRef.value;\n  slidesRef.value = slides;\n  return {\n    slides,\n    slots\n  };\n}\n\n// node_modules/swiper/components-shared/update-swiper.js\nfunction updateSwiper(_ref) {\n  let {\n    swiper,\n    slides,\n    passedParams,\n    changedParams,\n    nextEl,\n    prevEl,\n    scrollbarEl,\n    paginationEl\n  } = _ref;\n  const updateParams = changedParams.filter((key) => key !== \"children\" && key !== \"direction\");\n  const {\n    params: currentParams,\n    pagination,\n    navigation,\n    scrollbar,\n    virtual,\n    thumbs\n  } = swiper;\n  let needThumbsInit;\n  let needControllerInit;\n  let needPaginationInit;\n  let needScrollbarInit;\n  let needNavigationInit;\n  if (changedParams.includes(\"thumbs\") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n    needThumbsInit = true;\n  }\n  if (changedParams.includes(\"controller\") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n    needControllerInit = true;\n  }\n  if (changedParams.includes(\"pagination\") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n    needPaginationInit = true;\n  }\n  if (changedParams.includes(\"scrollbar\") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n    needScrollbarInit = true;\n  }\n  if (changedParams.includes(\"navigation\") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n    needNavigationInit = true;\n  }\n  const destroyModule = (mod) => {\n    if (!swiper[mod])\n      return;\n    swiper[mod].destroy();\n    if (mod === \"navigation\") {\n      currentParams[mod].prevEl = void 0;\n      currentParams[mod].nextEl = void 0;\n      swiper[mod].prevEl = void 0;\n      swiper[mod].nextEl = void 0;\n    } else {\n      currentParams[mod].el = void 0;\n      swiper[mod].el = void 0;\n    }\n  };\n  updateParams.forEach((key) => {\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n      extend(currentParams[key], passedParams[key]);\n    } else {\n      const newValue = passedParams[key];\n      if ((newValue === true || newValue === false) && (key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\")) {\n        if (newValue === false) {\n          destroyModule(key);\n        }\n      } else {\n        currentParams[key] = passedParams[key];\n      }\n    }\n  });\n  if (updateParams.includes(\"controller\") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n  if (changedParams.includes(\"children\") && slides && virtual && currentParams.virtual.enabled) {\n    virtual.slides = slides;\n    virtual.update(true);\n  } else if (changedParams.includes(\"children\") && swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n  if (needThumbsInit) {\n    const initialized = thumbs.init();\n    if (initialized)\n      thumbs.update(true);\n  }\n  if (needControllerInit) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n  if (needPaginationInit) {\n    if (paginationEl)\n      currentParams.pagination.el = paginationEl;\n    pagination.init();\n    pagination.render();\n    pagination.update();\n  }\n  if (needScrollbarInit) {\n    if (scrollbarEl)\n      currentParams.scrollbar.el = scrollbarEl;\n    scrollbar.init();\n    scrollbar.updateSize();\n    scrollbar.setTranslate();\n  }\n  if (needNavigationInit) {\n    if (nextEl)\n      currentParams.navigation.nextEl = nextEl;\n    if (prevEl)\n      currentParams.navigation.prevEl = prevEl;\n    navigation.init();\n    navigation.update();\n  }\n  if (changedParams.includes(\"allowSlideNext\")) {\n    swiper.allowSlideNext = passedParams.allowSlideNext;\n  }\n  if (changedParams.includes(\"allowSlidePrev\")) {\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\n  }\n  if (changedParams.includes(\"direction\")) {\n    swiper.changeDirection(passedParams.direction, false);\n  }\n  swiper.update();\n}\n\n// node_modules/swiper/vue/virtual.js\nfunction renderVirtual(swiperRef, slides, virtualData) {\n  if (!virtualData)\n    return null;\n  const style = swiperRef.value.isHorizontal() ? {\n    [swiperRef.value.rtlTranslate ? \"right\" : \"left\"]: `${virtualData.offset}px`\n  } : {\n    top: `${virtualData.offset}px`\n  };\n  return slides.filter((slide, index) => index >= virtualData.from && index <= virtualData.to).map((slide) => {\n    if (!slide.props)\n      slide.props = {};\n    if (!slide.props.style)\n      slide.props.style = {};\n    slide.props.swiperRef = swiperRef;\n    slide.props.style = style;\n    return h(slide.type, {\n      ...slide.props\n    }, slide.children);\n  });\n}\n\n// node_modules/swiper/components-shared/update-on-virtual-data.js\nvar updateOnVirtualData = (swiper) => {\n  if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled)\n    return;\n  swiper.updateSlides();\n  swiper.updateProgress();\n  swiper.updateSlidesClasses();\n  if (swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n  if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n    swiper.parallax.setTranslate();\n  }\n};\n\n// node_modules/swiper/vue/swiper.js\nvar Swiper = {\n  name: \"Swiper\",\n  props: {\n    tag: {\n      type: String,\n      default: \"div\"\n    },\n    wrapperTag: {\n      type: String,\n      default: \"div\"\n    },\n    modules: {\n      type: Array,\n      default: void 0\n    },\n    init: {\n      type: Boolean,\n      default: void 0\n    },\n    direction: {\n      type: String,\n      default: void 0\n    },\n    touchEventsTarget: {\n      type: String,\n      default: void 0\n    },\n    initialSlide: {\n      type: Number,\n      default: void 0\n    },\n    speed: {\n      type: Number,\n      default: void 0\n    },\n    cssMode: {\n      type: Boolean,\n      default: void 0\n    },\n    updateOnWindowResize: {\n      type: Boolean,\n      default: void 0\n    },\n    resizeObserver: {\n      type: Boolean,\n      default: void 0\n    },\n    nested: {\n      type: Boolean,\n      default: void 0\n    },\n    focusableElements: {\n      type: String,\n      default: void 0\n    },\n    width: {\n      type: Number,\n      default: void 0\n    },\n    height: {\n      type: Number,\n      default: void 0\n    },\n    preventInteractionOnTransition: {\n      type: Boolean,\n      default: void 0\n    },\n    userAgent: {\n      type: String,\n      default: void 0\n    },\n    url: {\n      type: String,\n      default: void 0\n    },\n    edgeSwipeDetection: {\n      type: [Boolean, String],\n      default: void 0\n    },\n    edgeSwipeThreshold: {\n      type: Number,\n      default: void 0\n    },\n    autoHeight: {\n      type: Boolean,\n      default: void 0\n    },\n    setWrapperSize: {\n      type: Boolean,\n      default: void 0\n    },\n    virtualTranslate: {\n      type: Boolean,\n      default: void 0\n    },\n    effect: {\n      type: String,\n      default: void 0\n    },\n    breakpoints: {\n      type: Object,\n      default: void 0\n    },\n    spaceBetween: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerView: {\n      type: [Number, String],\n      default: void 0\n    },\n    maxBackfaceHiddenSlides: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerGroup: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerGroupSkip: {\n      type: Number,\n      default: void 0\n    },\n    slidesPerGroupAuto: {\n      type: Boolean,\n      default: void 0\n    },\n    centeredSlides: {\n      type: Boolean,\n      default: void 0\n    },\n    centeredSlidesBounds: {\n      type: Boolean,\n      default: void 0\n    },\n    slidesOffsetBefore: {\n      type: Number,\n      default: void 0\n    },\n    slidesOffsetAfter: {\n      type: Number,\n      default: void 0\n    },\n    normalizeSlideIndex: {\n      type: Boolean,\n      default: void 0\n    },\n    centerInsufficientSlides: {\n      type: Boolean,\n      default: void 0\n    },\n    watchOverflow: {\n      type: Boolean,\n      default: void 0\n    },\n    roundLengths: {\n      type: Boolean,\n      default: void 0\n    },\n    touchRatio: {\n      type: Number,\n      default: void 0\n    },\n    touchAngle: {\n      type: Number,\n      default: void 0\n    },\n    simulateTouch: {\n      type: Boolean,\n      default: void 0\n    },\n    shortSwipes: {\n      type: Boolean,\n      default: void 0\n    },\n    longSwipes: {\n      type: Boolean,\n      default: void 0\n    },\n    longSwipesRatio: {\n      type: Number,\n      default: void 0\n    },\n    longSwipesMs: {\n      type: Number,\n      default: void 0\n    },\n    followFinger: {\n      type: Boolean,\n      default: void 0\n    },\n    allowTouchMove: {\n      type: Boolean,\n      default: void 0\n    },\n    threshold: {\n      type: Number,\n      default: void 0\n    },\n    touchMoveStopPropagation: {\n      type: Boolean,\n      default: void 0\n    },\n    touchStartPreventDefault: {\n      type: Boolean,\n      default: void 0\n    },\n    touchStartForcePreventDefault: {\n      type: Boolean,\n      default: void 0\n    },\n    touchReleaseOnEdges: {\n      type: Boolean,\n      default: void 0\n    },\n    uniqueNavElements: {\n      type: Boolean,\n      default: void 0\n    },\n    resistance: {\n      type: Boolean,\n      default: void 0\n    },\n    resistanceRatio: {\n      type: Number,\n      default: void 0\n    },\n    watchSlidesProgress: {\n      type: Boolean,\n      default: void 0\n    },\n    grabCursor: {\n      type: Boolean,\n      default: void 0\n    },\n    preventClicks: {\n      type: Boolean,\n      default: void 0\n    },\n    preventClicksPropagation: {\n      type: Boolean,\n      default: void 0\n    },\n    slideToClickedSlide: {\n      type: Boolean,\n      default: void 0\n    },\n    preloadImages: {\n      type: Boolean,\n      default: void 0\n    },\n    updateOnImagesReady: {\n      type: Boolean,\n      default: void 0\n    },\n    loop: {\n      type: Boolean,\n      default: void 0\n    },\n    loopAdditionalSlides: {\n      type: Number,\n      default: void 0\n    },\n    loopedSlides: {\n      type: Number,\n      default: void 0\n    },\n    loopedSlidesLimit: {\n      type: Boolean,\n      default: true\n    },\n    loopFillGroupWithBlank: {\n      type: Boolean,\n      default: void 0\n    },\n    loopPreventsSlide: {\n      type: Boolean,\n      default: void 0\n    },\n    rewind: {\n      type: Boolean,\n      default: void 0\n    },\n    allowSlidePrev: {\n      type: Boolean,\n      default: void 0\n    },\n    allowSlideNext: {\n      type: Boolean,\n      default: void 0\n    },\n    swipeHandler: {\n      type: Boolean,\n      default: void 0\n    },\n    noSwiping: {\n      type: Boolean,\n      default: void 0\n    },\n    noSwipingClass: {\n      type: String,\n      default: void 0\n    },\n    noSwipingSelector: {\n      type: String,\n      default: void 0\n    },\n    passiveListeners: {\n      type: Boolean,\n      default: void 0\n    },\n    containerModifierClass: {\n      type: String,\n      default: void 0\n    },\n    slideClass: {\n      type: String,\n      default: void 0\n    },\n    slideBlankClass: {\n      type: String,\n      default: void 0\n    },\n    slideActiveClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicateActiveClass: {\n      type: String,\n      default: void 0\n    },\n    slideVisibleClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicateClass: {\n      type: String,\n      default: void 0\n    },\n    slideNextClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicateNextClass: {\n      type: String,\n      default: void 0\n    },\n    slidePrevClass: {\n      type: String,\n      default: void 0\n    },\n    slideDuplicatePrevClass: {\n      type: String,\n      default: void 0\n    },\n    wrapperClass: {\n      type: String,\n      default: void 0\n    },\n    runCallbacksOnInit: {\n      type: Boolean,\n      default: void 0\n    },\n    observer: {\n      type: Boolean,\n      default: void 0\n    },\n    observeParents: {\n      type: Boolean,\n      default: void 0\n    },\n    observeSlideChildren: {\n      type: Boolean,\n      default: void 0\n    },\n    a11y: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    autoplay: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    controller: {\n      type: Object,\n      default: void 0\n    },\n    coverflowEffect: {\n      type: Object,\n      default: void 0\n    },\n    cubeEffect: {\n      type: Object,\n      default: void 0\n    },\n    fadeEffect: {\n      type: Object,\n      default: void 0\n    },\n    flipEffect: {\n      type: Object,\n      default: void 0\n    },\n    creativeEffect: {\n      type: Object,\n      default: void 0\n    },\n    cardsEffect: {\n      type: Object,\n      default: void 0\n    },\n    hashNavigation: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    history: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    keyboard: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    lazy: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    mousewheel: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    navigation: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    pagination: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    parallax: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    scrollbar: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    thumbs: {\n      type: Object,\n      default: void 0\n    },\n    virtual: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    zoom: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    grid: {\n      type: [Object],\n      default: void 0\n    },\n    freeMode: {\n      type: [Boolean, Object],\n      default: void 0\n    },\n    enabled: {\n      type: Boolean,\n      default: void 0\n    }\n  },\n  emits: [\"_beforeBreakpoint\", \"_containerClasses\", \"_slideClass\", \"_slideClasses\", \"_swiper\", \"_freeModeNoMomentumRelease\", \"activeIndexChange\", \"afterInit\", \"autoplay\", \"autoplayStart\", \"autoplayStop\", \"autoplayPause\", \"autoplayResume\", \"beforeDestroy\", \"beforeInit\", \"beforeLoopFix\", \"beforeResize\", \"beforeSlideChangeStart\", \"beforeTransitionStart\", \"breakpoint\", \"changeDirection\", \"click\", \"disable\", \"doubleTap\", \"doubleClick\", \"destroy\", \"enable\", \"fromEdge\", \"hashChange\", \"hashSet\", \"imagesReady\", \"init\", \"keyPress\", \"lazyImageLoad\", \"lazyImageReady\", \"lock\", \"loopFix\", \"momentumBounce\", \"navigationHide\", \"navigationShow\", \"navigationPrev\", \"navigationNext\", \"observerUpdate\", \"orientationchange\", \"paginationHide\", \"paginationRender\", \"paginationShow\", \"paginationUpdate\", \"progress\", \"reachBeginning\", \"reachEnd\", \"realIndexChange\", \"resize\", \"scroll\", \"scrollbarDragEnd\", \"scrollbarDragMove\", \"scrollbarDragStart\", \"setTransition\", \"setTranslate\", \"slideChange\", \"slideChangeTransitionEnd\", \"slideChangeTransitionStart\", \"slideNextTransitionEnd\", \"slideNextTransitionStart\", \"slidePrevTransitionEnd\", \"slidePrevTransitionStart\", \"slideResetTransitionStart\", \"slideResetTransitionEnd\", \"sliderMove\", \"sliderFirstMove\", \"slidesLengthChange\", \"slidesGridLengthChange\", \"snapGridLengthChange\", \"snapIndexChange\", \"swiper\", \"tap\", \"toEdge\", \"touchEnd\", \"touchMove\", \"touchMoveOpposite\", \"touchStart\", \"transitionEnd\", \"transitionStart\", \"unlock\", \"update\", \"virtualUpdate\", \"zoomChange\"],\n  setup(props, _ref) {\n    let {\n      slots: originalSlots,\n      emit\n    } = _ref;\n    const {\n      tag: Tag,\n      wrapperTag: WrapperTag\n    } = props;\n    const containerClasses = ref(\"swiper\");\n    const virtualData = ref(null);\n    const breakpointChanged = ref(false);\n    const initializedRef = ref(false);\n    const swiperElRef = ref(null);\n    const swiperRef = ref(null);\n    const oldPassedParamsRef = ref(null);\n    const slidesRef = {\n      value: []\n    };\n    const oldSlidesRef = {\n      value: []\n    };\n    const nextElRef = ref(null);\n    const prevElRef = ref(null);\n    const paginationElRef = ref(null);\n    const scrollbarElRef = ref(null);\n    const {\n      params: swiperParams,\n      passedParams\n    } = getParams(props, false);\n    getChildren(originalSlots, slidesRef, oldSlidesRef);\n    oldPassedParamsRef.value = passedParams;\n    oldSlidesRef.value = slidesRef.value;\n    const onBeforeBreakpoint = () => {\n      getChildren(originalSlots, slidesRef, oldSlidesRef);\n      breakpointChanged.value = true;\n    };\n    swiperParams.onAny = function(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      emit(event, ...args);\n    };\n    Object.assign(swiperParams.on, {\n      _beforeBreakpoint: onBeforeBreakpoint,\n      _containerClasses(swiper, classes) {\n        containerClasses.value = classes;\n      }\n    });\n    swiperRef.value = new core_default(swiperParams);\n    swiperRef.value.loopCreate = () => {\n    };\n    swiperRef.value.loopDestroy = () => {\n    };\n    if (swiperParams.loop) {\n      swiperRef.value.loopedSlides = calcLoopedSlides(slidesRef.value, swiperParams);\n    }\n    if (swiperRef.value.virtual && swiperRef.value.params.virtual.enabled) {\n      swiperRef.value.virtual.slides = slidesRef.value;\n      const extendWith = {\n        cache: false,\n        slides: slidesRef.value,\n        renderExternal: (data) => {\n          virtualData.value = data;\n        },\n        renderExternalUpdate: false\n      };\n      extend(swiperRef.value.params.virtual, extendWith);\n      extend(swiperRef.value.originalParams.virtual, extendWith);\n    }\n    onUpdated(() => {\n      if (!initializedRef.value && swiperRef.value) {\n        swiperRef.value.emitSlidesClasses();\n        initializedRef.value = true;\n      }\n      const {\n        passedParams: newPassedParams\n      } = getParams(props, false);\n      const changedParams = getChangedParams(newPassedParams, oldPassedParamsRef.value, slidesRef.value, oldSlidesRef.value, (c) => c.props && c.props.key);\n      oldPassedParamsRef.value = newPassedParams;\n      if ((changedParams.length || breakpointChanged.value) && swiperRef.value && !swiperRef.value.destroyed) {\n        updateSwiper({\n          swiper: swiperRef.value,\n          slides: slidesRef.value,\n          passedParams: newPassedParams,\n          changedParams,\n          nextEl: nextElRef.value,\n          prevEl: prevElRef.value,\n          scrollbarEl: scrollbarElRef.value,\n          paginationEl: paginationElRef.value\n        });\n      }\n      breakpointChanged.value = false;\n    });\n    provide(\"swiper\", swiperRef);\n    watch(virtualData, () => {\n      nextTick(() => {\n        updateOnVirtualData(swiperRef.value);\n      });\n    });\n    onMounted(() => {\n      if (!swiperElRef.value)\n        return;\n      mountSwiper({\n        el: swiperElRef.value,\n        nextEl: nextElRef.value,\n        prevEl: prevElRef.value,\n        paginationEl: paginationElRef.value,\n        scrollbarEl: scrollbarElRef.value,\n        swiper: swiperRef.value\n      }, swiperParams);\n      emit(\"swiper\", swiperRef.value);\n    });\n    onBeforeUnmount(() => {\n      if (swiperRef.value && !swiperRef.value.destroyed) {\n        swiperRef.value.destroy(true, false);\n      }\n    });\n    function renderSlides(slides) {\n      if (swiperParams.virtual) {\n        return renderVirtual(swiperRef, slides, virtualData.value);\n      }\n      if (!swiperParams.loop || swiperRef.value && swiperRef.value.destroyed) {\n        slides.forEach((slide) => {\n          if (!slide.props)\n            slide.props = {};\n          slide.props.swiperRef = swiperRef;\n        });\n        return slides;\n      }\n      return renderLoop(swiperRef, slides, swiperParams);\n    }\n    return () => {\n      const {\n        slides,\n        slots\n      } = getChildren(originalSlots, slidesRef, oldSlidesRef);\n      return h(Tag, {\n        ref: swiperElRef,\n        class: uniqueClasses(containerClasses.value)\n      }, [slots[\"container-start\"], h(WrapperTag, {\n        class: \"swiper-wrapper\"\n      }, [slots[\"wrapper-start\"], renderSlides(slides), slots[\"wrapper-end\"]]), needsNavigation(props) && [h(\"div\", {\n        ref: prevElRef,\n        class: \"swiper-button-prev\"\n      }), h(\"div\", {\n        ref: nextElRef,\n        class: \"swiper-button-next\"\n      })], needsScrollbar(props) && h(\"div\", {\n        ref: scrollbarElRef,\n        class: \"swiper-scrollbar\"\n      }), needsPagination(props) && h(\"div\", {\n        ref: paginationElRef,\n        class: \"swiper-pagination\"\n      }), slots[\"container-end\"]]);\n    };\n  }\n};\n\n// node_modules/swiper/vue/swiper-slide.js\nvar SwiperSlide = {\n  name: \"SwiperSlide\",\n  props: {\n    tag: {\n      type: String,\n      default: \"div\"\n    },\n    swiperRef: {\n      type: Object,\n      required: false\n    },\n    zoom: {\n      type: Boolean,\n      default: void 0\n    },\n    virtualIndex: {\n      type: [String, Number],\n      default: void 0\n    }\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    let eventAttached = false;\n    const {\n      swiperRef\n    } = props;\n    const slideElRef = ref(null);\n    const slideClasses = ref(\"swiper-slide\");\n    function updateClasses(swiper, el, classNames) {\n      if (el === slideElRef.value) {\n        slideClasses.value = classNames;\n      }\n    }\n    onMounted(() => {\n      if (!swiperRef.value)\n        return;\n      swiperRef.value.on(\"_slideClass\", updateClasses);\n      eventAttached = true;\n    });\n    onBeforeUpdate(() => {\n      if (eventAttached || !swiperRef || !swiperRef.value)\n        return;\n      swiperRef.value.on(\"_slideClass\", updateClasses);\n      eventAttached = true;\n    });\n    onUpdated(() => {\n      if (!slideElRef.value || !swiperRef || !swiperRef.value)\n        return;\n      if (swiperRef.value.destroyed) {\n        if (slideClasses.value !== \"swiper-slide\") {\n          slideClasses.value = \"swiper-slide\";\n        }\n      }\n    });\n    onBeforeUnmount(() => {\n      if (!swiperRef || !swiperRef.value)\n        return;\n      swiperRef.value.off(\"_slideClass\", updateClasses);\n    });\n    const slideData = computed(() => ({\n      isActive: slideClasses.value.indexOf(\"swiper-slide-active\") >= 0 || slideClasses.value.indexOf(\"swiper-slide-duplicate-active\") >= 0,\n      isVisible: slideClasses.value.indexOf(\"swiper-slide-visible\") >= 0,\n      isDuplicate: slideClasses.value.indexOf(\"swiper-slide-duplicate\") >= 0,\n      isPrev: slideClasses.value.indexOf(\"swiper-slide-prev\") >= 0 || slideClasses.value.indexOf(\"swiper-slide-duplicate-prev\") >= 0,\n      isNext: slideClasses.value.indexOf(\"swiper-slide-next\") >= 0 || slideClasses.value.indexOf(\"swiper-slide-duplicate-next\") >= 0\n    }));\n    provide(\"swiperSlide\", slideData);\n    return () => {\n      return h(props.tag, {\n        class: uniqueClasses(`${slideClasses.value}`),\n        ref: slideElRef,\n        \"data-swiper-slide-index\": props.virtualIndex\n      }, props.zoom ? h(\"div\", {\n        class: \"swiper-zoom-container\",\n        \"data-swiper-zoom\": typeof props.zoom === \"number\" ? props.zoom : void 0\n      }, slots.default && slots.default(slideData.value)) : slots.default && slots.default(slideData.value));\n    };\n  }\n};\n\n// node_modules/swiper/vue/context.js\nvar useSwiperSlide = () => {\n  return inject(\"swiperSlide\");\n};\nvar useSwiper = () => {\n  return inject(\"swiper\");\n};\nexport {\n  Swiper,\n  SwiperSlide,\n  useSwiper,\n  useSwiperSlide\n};\n//# sourceMappingURL=swiper_vue.js.map\n","start":1663399072806,"end":1663399072807,"order":"normal"}]}
