{"resolvedId":"E:/Project/www/wwwroot/vite/project-shangpinhui/node_modules/.vite/deps/nanoid.js?v=a7e311b8","transforms":[{"name":"vite:optimized-deps","result":"import \"./chunk-TWLJ45QX.js\";\n\n// node_modules/nanoid/url-alphabet/index.js\nvar urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\n\n// node_modules/nanoid/index.browser.js\nvar random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));\nvar customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return (size = defaultSize) => {\n    let id = \"\";\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || \"\";\n        if (id.length === size)\n          return id;\n      }\n    }\n  };\n};\nvar customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);\nvar nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n  byte &= 63;\n  if (byte < 36) {\n    id += byte.toString(36);\n  } else if (byte < 62) {\n    id += (byte - 26).toString(36).toUpperCase();\n  } else if (byte > 62) {\n    id += \"-\";\n  } else {\n    id += \"_\";\n  }\n  return id;\n}, \"\");\nexport {\n  customAlphabet,\n  customRandom,\n  nanoid,\n  random,\n  urlAlphabet\n};\n//# sourceMappingURL=nanoid.js.map\n","start":1663399017473,"end":1663399017474},{"name":"vite:import-analysis","result":"import \"/node_modules/.vite/deps/chunk-TWLJ45QX.js?v=a7e311b8\";\n\n// node_modules/nanoid/url-alphabet/index.js\nvar urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\n\n// node_modules/nanoid/index.browser.js\nvar random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));\nvar customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return (size = defaultSize) => {\n    let id = \"\";\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || \"\";\n        if (id.length === size)\n          return id;\n      }\n    }\n  };\n};\nvar customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);\nvar nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n  byte &= 63;\n  if (byte < 36) {\n    id += byte.toString(36);\n  } else if (byte < 62) {\n    id += (byte - 26).toString(36).toUpperCase();\n  } else if (byte > 62) {\n    id += \"-\";\n  } else {\n    id += \"_\";\n  }\n  return id;\n}, \"\");\nexport {\n  customAlphabet,\n  customRandom,\n  nanoid,\n  random,\n  urlAlphabet\n};\n//# sourceMappingURL=nanoid.js.map\n","start":1663399017474,"end":1663399017475,"order":"normal"}]}
