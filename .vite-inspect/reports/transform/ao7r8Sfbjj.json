{"resolvedId":"E:/Project/www/wwwroot/vite/project-shangpinhui/src/api/request.ts","transforms":[{"name":"__load__","result":"// 对axios进行二次封装\r\nimport axios, { type AxiosRequestConfig } from 'axios'\r\n// 引入进度条\r\nimport nprogress from './nprogress'\r\n// 引入detailStore\r\nimport pinia from '@/stores/store'\r\nimport { useDetailStore } from '@/stores/detail'\r\nimport { useUserStore } from '@/stores/user'\r\n\r\n// axios.defaults.baseURL = '/api'\r\n\r\n// 1.利用axios对象的方法create，去创建一个axios实例\r\nconst requests = axios.create({\r\n  // 配置对象\r\n  baseURL: '/api',\r\n  // 基础路径，发送请求的时候，路径当中会出现api\r\n  timeout: 5000,\r\n})\r\n\r\n// 请求拦截器：在发送请求之前，请求拦截器可以检测到，可以在发送请求出去之前做一些事情\r\nrequests.interceptors.request.use((config: AxiosRequestConfig) => {\r\n  const detailStore = useDetailStore(pinia)\r\n  const userStore = useUserStore(pinia)\r\n\r\n  // config：配置对象，对象里面有一个属性很重要，header请求头\r\n  if (detailStore.uuid_token) {\r\n    // 请求头添加一个字段(userTempId)，这个字段已经跟后端商量好了\r\n    // ts中！意思为 not null 的断言操作符\r\n    config.headers!.userTempId = detailStore.uuid_token\r\n  }\r\n\r\n  //* 需要携带token给服务器 验证登录\r\n  if (userStore.token) {\r\n    config.headers!.token = userStore.token\r\n  }\r\n\r\n  // 进度条开始动\r\n  nprogress.start()\r\n\r\n  return config\r\n})\r\n\r\n// 响应拦截器\r\nrequests.interceptors.response.use(\r\n  (res) => {\r\n    // 成功的回调函数：服务器响应数据回来以后，相应拦截器可以检测到，可以做一些事情\r\n\r\n    // 进度条结束\r\n    nprogress.done()\r\n    return res.data\r\n  },\r\n  (error) => {\r\n    // 响应失败的回调函数\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 对外暴露\r\nexport default requests\r\n","start":1663399017432,"end":1663399017432},{"name":"vite:esbuild","result":"import axios, {} from \"axios\";\nimport nprogress from \"./nprogress\";\nimport pinia from \"@/stores/store\";\nimport { useDetailStore } from \"@/stores/detail\";\nimport { useUserStore } from \"@/stores/user\";\nconst requests = axios.create({\n  baseURL: \"/api\",\n  timeout: 5e3\n});\nrequests.interceptors.request.use((config) => {\n  const detailStore = useDetailStore(pinia);\n  const userStore = useUserStore(pinia);\n  if (detailStore.uuid_token) {\n    config.headers.userTempId = detailStore.uuid_token;\n  }\n  if (userStore.token) {\n    config.headers.token = userStore.token;\n  }\n  nprogress.start();\n  return config;\n});\nrequests.interceptors.response.use(\n  (res) => {\n    nprogress.done();\n    return res.data;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\nexport default requests;\n","start":1663399017432,"end":1663399017439,"order":"normal"},{"name":"vite:import-analysis","result":"import __vite__cjsImport0_axios from \"/node_modules/.vite/deps/axios.js?v=a7e311b8\"; const axios = __vite__cjsImport0_axios.__esModule ? __vite__cjsImport0_axios.default : __vite__cjsImport0_axios;\nimport nprogress from \"/src/api/nprogress.ts\";\nimport pinia from \"/src/stores/store.ts\";\nimport { useDetailStore } from \"/src/stores/detail.ts\";\nimport { useUserStore } from \"/src/stores/user.ts\";\nconst requests = axios.create({\n  baseURL: \"/api\",\n  timeout: 5e3\n});\nrequests.interceptors.request.use((config) => {\n  const detailStore = useDetailStore(pinia);\n  const userStore = useUserStore(pinia);\n  if (detailStore.uuid_token) {\n    config.headers.userTempId = detailStore.uuid_token;\n  }\n  if (userStore.token) {\n    config.headers.token = userStore.token;\n  }\n  nprogress.start();\n  return config;\n});\nrequests.interceptors.response.use(\n  (res) => {\n    nprogress.done();\n    return res.data;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\nexport default requests;\n","start":1663399017439,"end":1663399017449,"order":"normal"}]}
