{"resolvedId":"E:/Project/www/wwwroot/vite/project-shangpinhui/node_modules/.vite/deps/chunk-2T3Q367C.js?v=a7e311b8","transforms":[{"name":"vite:optimized-deps","result":"// node_modules/ssr-window/ssr-window.esm.js\nfunction isObject(obj) {\n  return obj !== null && typeof obj === \"object\" && \"constructor\" in obj && obj.constructor === Object;\n}\nfunction extend(target = {}, src = {}) {\n  Object.keys(src).forEach((key) => {\n    if (typeof target[key] === \"undefined\")\n      target[key] = src[key];\n    else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      extend(target[key], src[key]);\n    }\n  });\n}\nvar ssrDocument = {\n  body: {},\n  addEventListener() {\n  },\n  removeEventListener() {\n  },\n  activeElement: {\n    blur() {\n    },\n    nodeName: \"\"\n  },\n  querySelector() {\n    return null;\n  },\n  querySelectorAll() {\n    return [];\n  },\n  getElementById() {\n    return null;\n  },\n  createEvent() {\n    return {\n      initEvent() {\n      }\n    };\n  },\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n      setAttribute() {\n      },\n      getElementsByTagName() {\n        return [];\n      }\n    };\n  },\n  createElementNS() {\n    return {};\n  },\n  importNode() {\n    return null;\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  }\n};\nfunction getDocument() {\n  const doc = typeof document !== \"undefined\" ? document : {};\n  extend(doc, ssrDocument);\n  return doc;\n}\nvar ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: \"\"\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  },\n  history: {\n    replaceState() {\n    },\n    pushState() {\n    },\n    go() {\n    },\n    back() {\n    }\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener() {\n  },\n  removeEventListener() {\n  },\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return \"\";\n      }\n    };\n  },\n  Image() {\n  },\n  Date() {\n  },\n  screen: {},\n  setTimeout() {\n  },\n  clearTimeout() {\n  },\n  matchMedia() {\n    return {};\n  },\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === \"undefined\") {\n      callback();\n      return null;\n    }\n    return setTimeout(callback, 0);\n  },\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === \"undefined\") {\n      return;\n    }\n    clearTimeout(id);\n  }\n};\nfunction getWindow() {\n  const win = typeof window !== \"undefined\" ? window : {};\n  extend(win, ssrWindow);\n  return win;\n}\n\n// node_modules/dom7/dom7.esm.js\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, \"__proto__\", {\n    get() {\n      return proto;\n    },\n    set(value) {\n      proto.__proto__ = value;\n    }\n  });\n}\nvar Dom7 = class extends Array {\n  constructor(items) {\n    if (typeof items === \"number\") {\n      super(items);\n    } else {\n      super(...items || []);\n      makeReactive(this);\n    }\n  }\n};\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach((el) => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1)\n      uniqueArray.push(arr[i]);\n  }\n  return uniqueArray;\n}\nfunction qsa(selector, context) {\n  if (typeof selector !== \"string\") {\n    return [selector];\n  }\n  const a = [];\n  const res = context.querySelectorAll(selector);\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n  return a;\n}\nfunction $(selector, context) {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  let arr = [];\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n  if (!selector) {\n    return new Dom7(arr);\n  }\n  if (typeof selector === \"string\") {\n    const html2 = selector.trim();\n    if (html2.indexOf(\"<\") >= 0 && html2.indexOf(\">\") >= 0) {\n      let toCreate = \"div\";\n      if (html2.indexOf(\"<li\") === 0)\n        toCreate = \"ul\";\n      if (html2.indexOf(\"<tr\") === 0)\n        toCreate = \"tbody\";\n      if (html2.indexOf(\"<td\") === 0 || html2.indexOf(\"<th\") === 0)\n        toCreate = \"tr\";\n      if (html2.indexOf(\"<tbody\") === 0)\n        toCreate = \"table\";\n      if (html2.indexOf(\"<option\") === 0)\n        toCreate = \"select\";\n      const tempParent = document2.createElement(toCreate);\n      tempParent.innerHTML = html2;\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document2);\n    }\n  } else if (selector.nodeType || selector === window2 || selector === document2) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7)\n      return selector;\n    arr = selector;\n  }\n  return new Dom7(arrayUnique(arr));\n}\n$.fn = Dom7.prototype;\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    classNames.forEach((className) => {\n      el.classList.toggle(className);\n    });\n  });\n}\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  return arrayFilter(this, (el) => {\n    return classNames.filter((className) => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === \"string\") {\n    if (this[0])\n      return this[0].getAttribute(attrs);\n    return void 0;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      this[i].setAttribute(attrs, value);\n    } else {\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n  return this;\n}\nfunction removeAttr(attr2) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr2);\n  }\n  return this;\n}\nfunction transform(transform2) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform2;\n  }\n  return this;\n}\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== \"string\" ? `${duration}ms` : duration;\n  }\n  return this;\n}\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === \"function\") {\n    [eventType, listener, capture] = args;\n    targetSelector = void 0;\n  }\n  if (!capture)\n    capture = false;\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target)\n      return;\n    const eventData = e.target.dom7EventData || [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    if ($(target).is(targetSelector))\n      listener.apply(target, eventData);\n    else {\n      const parents2 = $(target).parents();\n      for (let k = 0; k < parents2.length; k += 1) {\n        if ($(parents2[k]).is(targetSelector))\n          listener.apply(parents2[k], eventData);\n      }\n    }\n  }\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    listener.apply(this, eventData);\n  }\n  const events2 = eventType.split(\" \");\n  let j;\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (!targetSelector) {\n      for (j = 0; j < events2.length; j += 1) {\n        const event2 = events2[j];\n        if (!el.dom7Listeners)\n          el.dom7Listeners = {};\n        if (!el.dom7Listeners[event2])\n          el.dom7Listeners[event2] = [];\n        el.dom7Listeners[event2].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event2, handleEvent, capture);\n      }\n    } else {\n      for (j = 0; j < events2.length; j += 1) {\n        const event2 = events2[j];\n        if (!el.dom7LiveListeners)\n          el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event2])\n          el.dom7LiveListeners[event2] = [];\n        el.dom7LiveListeners[event2].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event2, handleLiveEvent, capture);\n      }\n    }\n  }\n  return this;\n}\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === \"function\") {\n    [eventType, listener, capture] = args;\n    targetSelector = void 0;\n  }\n  if (!capture)\n    capture = false;\n  const events2 = eventType.split(\" \");\n  for (let i = 0; i < events2.length; i += 1) {\n    const event2 = events2[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event2];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event2];\n      }\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event2, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event2, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event2, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n  return this;\n}\nfunction trigger(...args) {\n  const window2 = getWindow();\n  const events2 = args[0].split(\" \");\n  const eventData = args[1];\n  for (let i = 0; i < events2.length; i += 1) {\n    const event2 = events2[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      if (window2.CustomEvent) {\n        const evt = new window2.CustomEvent(event2, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n  return this;\n}\nfunction transitionEnd(callback) {\n  const dom = this;\n  function fireCallBack(e) {\n    if (e.target !== this)\n      return;\n    callback.call(this, e);\n    dom.off(\"transitionend\", fireCallBack);\n  }\n  if (callback) {\n    dom.on(\"transitionend\", fireCallBack);\n  }\n  return this;\n}\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles2 = this.styles();\n      return this[0].offsetWidth + parseFloat(styles2.getPropertyValue(\"margin-right\")) + parseFloat(styles2.getPropertyValue(\"margin-left\"));\n    }\n    return this[0].offsetWidth;\n  }\n  return null;\n}\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles2 = this.styles();\n      return this[0].offsetHeight + parseFloat(styles2.getPropertyValue(\"margin-top\")) + parseFloat(styles2.getPropertyValue(\"margin-bottom\"));\n    }\n    return this[0].offsetHeight;\n  }\n  return null;\n}\nfunction offset() {\n  if (this.length > 0) {\n    const window2 = getWindow();\n    const document2 = getDocument();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document2.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window2 ? window2.scrollY : el.scrollTop;\n    const scrollLeft = el === window2 ? window2.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n  return null;\n}\nfunction styles() {\n  const window2 = getWindow();\n  if (this[0])\n    return window2.getComputedStyle(this[0], null);\n  return {};\n}\nfunction css(props, value) {\n  const window2 = getWindow();\n  let i;\n  if (arguments.length === 1) {\n    if (typeof props === \"string\") {\n      if (this[0])\n        return window2.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n      return this;\n    }\n  }\n  if (arguments.length === 2 && typeof props === \"string\") {\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n    return this;\n  }\n  return this;\n}\nfunction each(callback) {\n  if (!callback)\n    return this;\n  this.forEach((el, index2) => {\n    callback.apply(el, [el, index2]);\n  });\n  return this;\n}\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\nfunction html(html2) {\n  if (typeof html2 === \"undefined\") {\n    return this[0] ? this[0].innerHTML : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html2;\n  }\n  return this;\n}\nfunction text(text2) {\n  if (typeof text2 === \"undefined\") {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text2;\n  }\n  return this;\n}\nfunction is(selector) {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === \"undefined\")\n    return false;\n  if (typeof selector === \"string\") {\n    if (el.matches)\n      return el.matches(selector);\n    if (el.webkitMatchesSelector)\n      return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector)\n      return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el)\n        return true;\n    }\n    return false;\n  }\n  if (selector === document2) {\n    return el === document2;\n  }\n  if (selector === window2) {\n    return el === window2;\n  }\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el)\n        return true;\n    }\n    return false;\n  }\n  return false;\n}\nfunction index() {\n  let child = this[0];\n  let i;\n  if (child) {\n    i = 0;\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1)\n        i += 1;\n    }\n    return i;\n  }\n  return void 0;\n}\nfunction eq(index2) {\n  if (typeof index2 === \"undefined\")\n    return this;\n  const length = this.length;\n  if (index2 > length - 1) {\n    return $([]);\n  }\n  if (index2 < 0) {\n    const returnIndex = length + index2;\n    if (returnIndex < 0)\n      return $([]);\n    return $([this[returnIndex]]);\n  }\n  return $([this[index2]]);\n}\nfunction append(...els) {\n  let newChild;\n  const document2 = getDocument();\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === \"string\") {\n        const tempDiv = document2.createElement(\"div\");\n        tempDiv.innerHTML = newChild;\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n  return this;\n}\nfunction prepend(newChild) {\n  const document2 = getDocument();\n  let i;\n  let j;\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === \"string\") {\n      const tempDiv = document2.createElement(\"div\");\n      tempDiv.innerHTML = newChild;\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n  return this;\n}\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n      return $([]);\n    }\n    if (this[0].nextElementSibling)\n      return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el)\n    return $([]);\n  while (el.nextElementSibling) {\n    const next2 = el.nextElementSibling;\n    if (selector) {\n      if ($(next2).is(selector))\n        nextEls.push(next2);\n    } else\n      nextEls.push(next2);\n    el = next2;\n  }\n  return $(nextEls);\n}\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n      return $([]);\n    }\n    if (el.previousElementSibling)\n      return $([el.previousElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el)\n    return $([]);\n  while (el.previousElementSibling) {\n    const prev2 = el.previousElementSibling;\n    if (selector) {\n      if ($(prev2).is(selector))\n        prevEls.push(prev2);\n    } else\n      prevEls.push(prev2);\n    el = prev2;\n  }\n  return $(prevEls);\n}\nfunction parent(selector) {\n  const parents2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector))\n          parents2.push(this[i].parentNode);\n      } else {\n        parents2.push(this[i].parentNode);\n      }\n    }\n  }\n  return $(parents2);\n}\nfunction parents(selector) {\n  const parents2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    let parent2 = this[i].parentNode;\n    while (parent2) {\n      if (selector) {\n        if ($(parent2).is(selector))\n          parents2.push(parent2);\n      } else {\n        parents2.push(parent2);\n      }\n      parent2 = parent2.parentNode;\n    }\n  }\n  return $(parents2);\n}\nfunction closest(selector) {\n  let closest2 = this;\n  if (typeof selector === \"undefined\") {\n    return $([]);\n  }\n  if (!closest2.is(selector)) {\n    closest2 = closest2.parents(selector).eq(0);\n  }\n  return closest2;\n}\nfunction find(selector) {\n  const foundElements = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n  return $(foundElements);\n}\nfunction children(selector) {\n  const children2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children2.push(childNodes[j]);\n      }\n    }\n  }\n  return $(children2);\n}\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode)\n      this[i].parentNode.removeChild(this[i]);\n  }\n  return this;\n}\nvar noTrigger = \"resize scroll\".split(\" \");\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === \"undefined\") {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i])\n            this[i][name]();\n          else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n      return this;\n    }\n    return this.on(name, ...args);\n  }\n  return eventHandler;\n}\nvar click = shortcut(\"click\");\nvar blur = shortcut(\"blur\");\nvar focus = shortcut(\"focus\");\nvar focusin = shortcut(\"focusin\");\nvar focusout = shortcut(\"focusout\");\nvar keyup = shortcut(\"keyup\");\nvar keydown = shortcut(\"keydown\");\nvar keypress = shortcut(\"keypress\");\nvar submit = shortcut(\"submit\");\nvar change = shortcut(\"change\");\nvar mousedown = shortcut(\"mousedown\");\nvar mousemove = shortcut(\"mousemove\");\nvar mouseup = shortcut(\"mouseup\");\nvar mouseenter = shortcut(\"mouseenter\");\nvar mouseleave = shortcut(\"mouseleave\");\nvar mouseout = shortcut(\"mouseout\");\nvar mouseover = shortcut(\"mouseover\");\nvar touchstart = shortcut(\"touchstart\");\nvar touchend = shortcut(\"touchend\");\nvar touchmove = shortcut(\"touchmove\");\nvar resize = shortcut(\"resize\");\nvar scroll = shortcut(\"scroll\");\n\n// node_modules/swiper/shared/dom.js\nvar Methods = {\n  addClass,\n  removeClass,\n  hasClass,\n  toggleClass,\n  attr,\n  removeAttr,\n  transform,\n  transition,\n  on,\n  off,\n  trigger,\n  transitionEnd,\n  outerWidth,\n  outerHeight,\n  styles,\n  offset,\n  css,\n  each,\n  html,\n  text,\n  is,\n  index,\n  eq,\n  append,\n  prepend,\n  next,\n  nextAll,\n  prev,\n  prevAll,\n  parent,\n  parents,\n  closest,\n  find,\n  children,\n  filter,\n  remove\n};\nObject.keys(Methods).forEach((methodName) => {\n  Object.defineProperty($.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nvar dom_default = $;\n\n// node_modules/swiper/shared/utils.js\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach((key) => {\n    try {\n      object[key] = null;\n    } catch (e) {\n    }\n    try {\n      delete object[key];\n    } catch (e) {\n    }\n  });\n}\nfunction nextTick(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return setTimeout(callback, delay);\n}\nfunction now() {\n  return Date.now();\n}\nfunction getComputedStyle2(el) {\n  const window2 = getWindow();\n  let style;\n  if (window2.getComputedStyle) {\n    style = window2.getComputedStyle(el, null);\n  }\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n  if (!style) {\n    style = el.style;\n  }\n  return style;\n}\nfunction getTranslate(el, axis) {\n  if (axis === void 0) {\n    axis = \"x\";\n  }\n  const window2 = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle2(el, null);\n  if (window2.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n    if (curTransform.split(\",\").length > 6) {\n      curTransform = curTransform.split(\", \").map((a) => a.replace(\",\", \".\")).join(\", \");\n    }\n    transformMatrix = new window2.WebKitCSSMatrix(curTransform === \"none\" ? \"\" : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\");\n    matrix = transformMatrix.toString().split(\",\");\n  }\n  if (axis === \"x\") {\n    if (window2.WebKitCSSMatrix)\n      curTransform = transformMatrix.m41;\n    else if (matrix.length === 16)\n      curTransform = parseFloat(matrix[12]);\n    else\n      curTransform = parseFloat(matrix[4]);\n  }\n  if (axis === \"y\") {\n    if (window2.WebKitCSSMatrix)\n      curTransform = transformMatrix.m42;\n    else if (matrix.length === 16)\n      curTransform = parseFloat(matrix[13]);\n    else\n      curTransform = parseFloat(matrix[5]);\n  }\n  return curTransform || 0;\n}\nfunction isObject2(o) {\n  return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction isNode(node) {\n  if (typeof window !== \"undefined\" && typeof window.HTMLElement !== \"undefined\") {\n    return node instanceof HTMLElement;\n  }\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend2() {\n  const to = Object(arguments.length <= 0 ? void 0 : arguments[0]);\n  const noExtend = [\"__proto__\", \"constructor\", \"prototype\"];\n  for (let i = 1; i < arguments.length; i += 1) {\n    const nextSource = i < 0 || arguments.length <= i ? void 0 : arguments[i];\n    if (nextSource !== void 0 && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== void 0 && desc.enumerable) {\n          if (isObject2(to[nextKey]) && isObject2(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend2(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject2(to[nextKey]) && isObject2(nextSource[nextKey])) {\n            to[nextKey] = {};\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend2(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n  return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll(_ref) {\n  let {\n    swiper,\n    targetPosition,\n    side\n  } = _ref;\n  const window2 = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = \"none\";\n  window2.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? \"next\" : \"prev\";\n  const isOutOfBound = (current, target) => {\n    return dir === \"next\" && current >= target || dir === \"prev\" && current <= target;\n  };\n  const animate = () => {\n    time = new Date().getTime();\n    if (startTime === null) {\n      startTime = time;\n    }\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = \"hidden\";\n      swiper.wrapperEl.style.scrollSnapType = \"\";\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = \"\";\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window2.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n    swiper.cssModeFrameID = window2.requestAnimationFrame(animate);\n  };\n  animate();\n}\n\n// node_modules/swiper/shared/get-support.js\nvar support;\nfunction calcSupport() {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  return {\n    smoothScroll: document2.documentElement && \"scrollBehavior\" in document2.documentElement.style,\n    touch: !!(\"ontouchstart\" in window2 || window2.DocumentTouch && document2 instanceof window2.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n      try {\n        const opts = Object.defineProperty({}, \"passive\", {\n          get() {\n            supportsPassive = true;\n          }\n        });\n        window2.addEventListener(\"testPassiveListener\", null, opts);\n      } catch (e) {\n      }\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return \"ongesturestart\" in window2;\n    }()\n  };\n}\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n  return support;\n}\n\n// node_modules/swiper/shared/get-device.js\nvar deviceCached;\nfunction calcDevice(_temp) {\n  let {\n    userAgent\n  } = _temp === void 0 ? {} : _temp;\n  const support2 = getSupport();\n  const window2 = getWindow();\n  const platform = window2.navigator.platform;\n  const ua = userAgent || window2.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window2.screen.width;\n  const screenHeight = window2.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === \"Win32\";\n  let macos = platform === \"MacIntel\";\n  const iPadScreens = [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"];\n  if (!ipad && macos && support2.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad)\n      ipad = [0, 1, \"13_0_0\"];\n    macos = false;\n  }\n  if (android && !windows) {\n    device.os = \"android\";\n    device.android = true;\n  }\n  if (ipad || iphone || ipod) {\n    device.os = \"ios\";\n    device.ios = true;\n  }\n  return device;\n}\nfunction getDevice(overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n  return deviceCached;\n}\n\n// node_modules/swiper/shared/get-browser.js\nvar browser;\nfunction calcBrowser() {\n  const window2 = getWindow();\n  function isSafari() {\n    const ua = window2.navigator.userAgent.toLowerCase();\n    return ua.indexOf(\"safari\") >= 0 && ua.indexOf(\"chrome\") < 0 && ua.indexOf(\"android\") < 0;\n  }\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent)\n  };\n}\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n  return browser;\n}\n\n// node_modules/swiper/core/modules/resize/resize.js\nfunction Resize(_ref) {\n  let {\n    swiper,\n    on: on2,\n    emit\n  } = _ref;\n  const window2 = getWindow();\n  let observer = null;\n  let animationFrame = null;\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    emit(\"beforeResize\");\n    emit(\"resize\");\n  };\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    observer = new ResizeObserver((entries) => {\n      animationFrame = window2.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach((_ref2) => {\n          let {\n            contentBoxSize,\n            contentRect,\n            target\n          } = _ref2;\n          if (target && target !== swiper.el)\n            return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n  const removeObserver = () => {\n    if (animationFrame) {\n      window2.cancelAnimationFrame(animationFrame);\n    }\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    emit(\"orientationchange\");\n  };\n  on2(\"init\", () => {\n    if (swiper.params.resizeObserver && typeof window2.ResizeObserver !== \"undefined\") {\n      createObserver();\n      return;\n    }\n    window2.addEventListener(\"resize\", resizeHandler);\n    window2.addEventListener(\"orientationchange\", orientationChangeHandler);\n  });\n  on2(\"destroy\", () => {\n    removeObserver();\n    window2.removeEventListener(\"resize\", resizeHandler);\n    window2.removeEventListener(\"orientationchange\", orientationChangeHandler);\n  });\n}\n\n// node_modules/swiper/core/modules/observer/observer.js\nfunction Observer(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const observers = [];\n  const window2 = getWindow();\n  const attach = function(target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const ObserverFunc = window2.MutationObserver || window2.WebkitMutationObserver;\n    const observer = new ObserverFunc((mutations) => {\n      if (mutations.length === 1) {\n        emit(\"observerUpdate\", mutations[0]);\n        return;\n      }\n      const observerUpdate = function observerUpdate2() {\n        emit(\"observerUpdate\", mutations[0]);\n      };\n      if (window2.requestAnimationFrame) {\n        window2.requestAnimationFrame(observerUpdate);\n      } else {\n        window2.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === \"undefined\" ? true : options.attributes,\n      childList: typeof options.childList === \"undefined\" ? true : options.childList,\n      characterData: typeof options.characterData === \"undefined\" ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n  const init = () => {\n    if (!swiper.params.observer)\n      return;\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    }\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    });\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n  const destroy = () => {\n    observers.forEach((observer) => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on2(\"init\", init);\n  on2(\"destroy\", destroy);\n}\n\n// node_modules/swiper/core/events-emitter.js\nvar events_emitter_default = {\n  on(events2, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    const method = priority ? \"unshift\" : \"push\";\n    events2.split(\" \").forEach((event2) => {\n      if (!self.eventsListeners[event2])\n        self.eventsListeners[event2] = [];\n      self.eventsListeners[event2][method](handler);\n    });\n    return self;\n  },\n  once(events2, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    function onceHandler() {\n      self.off(events2, onceHandler);\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.__emitterProxy = handler;\n    return self.on(events2, onceHandler, priority);\n  },\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    const method = priority ? \"unshift\" : \"push\";\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n    return self;\n  },\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsAnyListeners)\n      return self;\n    const index2 = self.eventsAnyListeners.indexOf(handler);\n    if (index2 >= 0) {\n      self.eventsAnyListeners.splice(index2, 1);\n    }\n    return self;\n  },\n  off(events2, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsListeners)\n      return self;\n    events2.split(\" \").forEach((event2) => {\n      if (typeof handler === \"undefined\") {\n        self.eventsListeners[event2] = [];\n      } else if (self.eventsListeners[event2]) {\n        self.eventsListeners[event2].forEach((eventHandler, index2) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event2].splice(index2, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n  emit() {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsListeners)\n      return self;\n    let events2;\n    let data;\n    let context;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\n      events2 = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events2 = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n    data.unshift(context);\n    const eventsArray = Array.isArray(events2) ? events2 : events2.split(\" \");\n    eventsArray.forEach((event2) => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach((eventHandler) => {\n          eventHandler.apply(context, [event2, ...data]);\n        });\n      }\n      if (self.eventsListeners && self.eventsListeners[event2]) {\n        self.eventsListeners[event2].forEach((eventHandler) => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n};\n\n// node_modules/swiper/core/update/updateSize.js\nfunction updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n  if (typeof swiper.params.width !== \"undefined\" && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n  if (typeof swiper.params.height !== \"undefined\" && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  }\n  width = width - parseInt($el.css(\"padding-left\") || 0, 10) - parseInt($el.css(\"padding-right\") || 0, 10);\n  height = height - parseInt($el.css(\"padding-top\") || 0, 10) - parseInt($el.css(\"padding-bottom\") || 0, 10);\n  if (Number.isNaN(width))\n    width = 0;\n  if (Number.isNaN(height))\n    height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}\n\n// node_modules/swiper/core/update/updateSlides.js\nfunction updateSlides() {\n  const swiper = this;\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    }\n    return {\n      \"width\": \"height\",\n      \"margin-top\": \"margin-left\",\n      \"margin-bottom \": \"margin-right\",\n      \"margin-left\": \"margin-top\",\n      \"margin-right\": \"margin-bottom\",\n      \"padding-left\": \"padding-top\",\n      \"padding-right\": \"padding-bottom\",\n      \"marginRight\": \"marginBottom\"\n    }[property];\n  }\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === \"function\") {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === \"function\") {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index2 = 0;\n  if (typeof swiperSize === \"undefined\") {\n    return;\n  }\n  if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiperSize;\n  }\n  swiper.virtualSize = -spaceBetween;\n  if (rtl)\n    slides.css({\n      marginLeft: \"\",\n      marginBottom: \"\",\n      marginTop: \"\"\n    });\n  else\n    slides.css({\n      marginRight: \"\",\n      marginBottom: \"\",\n      marginTop: \"\"\n    });\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-before\", \"\");\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-after\", \"\");\n  }\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  }\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === \"auto\" && params.breakpoints && Object.keys(params.breakpoints).filter((key) => {\n    return typeof params.breakpoints[key].slidesPerView !== \"undefined\";\n  }).length > 0;\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n    if (slide.css(\"display\") === \"none\")\n      continue;\n    if (params.slidesPerView === \"auto\") {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel(\"width\")] = ``;\n      }\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n      if (currentTransform) {\n        slide[0].style.transform = \"none\";\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = \"none\";\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        const width = getDirectionPropertyValue(slideStyles, \"width\");\n        const paddingLeft = getDirectionPropertyValue(slideStyles, \"padding-left\");\n        const paddingRight = getDirectionPropertyValue(slideStyles, \"padding-right\");\n        const marginLeft = getDirectionPropertyValue(slideStyles, \"margin-left\");\n        const marginRight = getDirectionPropertyValue(slideStyles, \"margin-right\");\n        const boxSizing = slideStyles.getPropertyValue(\"box-sizing\");\n        if (boxSizing && boxSizing === \"border-box\") {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths)\n        slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths)\n        slideSize = Math.floor(slideSize);\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel(\"width\")] = `${slideSize}px`;\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0)\n        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0)\n        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1e3)\n        slidePosition = 0;\n      if (params.roundLengths)\n        slidePosition = Math.floor(slidePosition);\n      if (index2 % params.slidesPerGroup === 0)\n        snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths)\n        slidePosition = Math.floor(slidePosition);\n      if ((index2 - Math.min(swiper.params.slidesPerGroupSkip, index2)) % swiper.params.slidesPerGroup === 0)\n        snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index2 += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  if (rtl && wrongRTL && (params.effect === \"slide\" || params.effect === \"coverflow\")) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel(\"width\")]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  }\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths)\n        slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (snapGrid.length === 0)\n    snapGrid = [0];\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? \"marginLeft\" : getDirectionLabel(\"marginRight\");\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode)\n        return true;\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map((snap) => {\n      if (snap < 0)\n        return -offsetBefore;\n      if (snap > maxSnap)\n        return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-before\", `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-after\", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map((v) => v + addToSlidesGrid);\n  }\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit(\"slidesLengthChange\");\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow)\n      swiper.checkOverflow();\n    swiper.emit(\"snapGridLengthChange\");\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit(\"slidesGridLengthChange\");\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (!isVirtual && !params.cssMode && (params.effect === \"slide\" || params.effect === \"fade\")) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded)\n        swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}\n\n// node_modules/swiper/core/update/updateAutoHeight.js\nfunction updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n  if (typeof speed === \"number\") {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  const getSlideByIndex = (index2) => {\n    if (isVirtual) {\n      return swiper.slides.filter((el) => parseInt(el.getAttribute(\"data-swiper-slide-index\"), 10) === index2)[0];\n    }\n    return swiper.slides.eq(index2)[0];\n  };\n  if (swiper.params.slidesPerView !== \"auto\" && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || dom_default([])).each((slide) => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index2 = swiper.activeIndex + i;\n        if (index2 > swiper.slides.length && !isVirtual)\n          break;\n        activeSlides.push(getSlideByIndex(index2));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  }\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== \"undefined\") {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n  if (newHeight || newHeight === 0)\n    swiper.$wrapperEl.css(\"height\", `${newHeight}px`);\n}\n\n// node_modules/swiper/core/update/updateSlidesOffset.js\nfunction updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}\n\n// node_modules/swiper/core/update/updateSlidesProgress.js\nfunction updateSlidesProgress(translate) {\n  if (translate === void 0) {\n    translate = this && this.translate || 0;\n  }\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0)\n    return;\n  if (typeof slides[0].swiperSlideOffset === \"undefined\")\n    swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl)\n    offsetCenter = translate;\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n  swiper.visibleSlides = dom_default(swiper.visibleSlides);\n}\n\n// node_modules/swiper/core/update/updateProgress.js\nfunction updateProgress(translate) {\n  const swiper = this;\n  if (typeof translate === \"undefined\") {\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight)\n    swiper.updateSlidesProgress(translate);\n  if (isBeginning && !wasBeginning) {\n    swiper.emit(\"reachBeginning toEdge\");\n  }\n  if (isEnd && !wasEnd) {\n    swiper.emit(\"reachEnd toEdge\");\n  }\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit(\"fromEdge\");\n  }\n  swiper.emit(\"progress\", progress);\n}\n\n// node_modules/swiper/core/update/updateSlidesClasses.js\nfunction updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  }\n  activeSlide.addClass(params.slideActiveClass);\n  if (params.loop) {\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  }\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  }\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n  if (params.loop) {\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n  swiper.emitSlidesClasses();\n}\n\n// node_modules/swiper/core/update/updateActiveIndex.js\nfunction updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n  if (typeof activeIndex === \"undefined\") {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== \"undefined\") {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    }\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === \"undefined\")\n        activeIndex = 0;\n    }\n  }\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n  if (snapIndex >= snapGrid.length)\n    snapIndex = snapGrid.length - 1;\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit(\"snapIndexChange\");\n    }\n    return;\n  }\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr(\"data-swiper-slide-index\") || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit(\"activeIndexChange\");\n  swiper.emit(\"snapIndexChange\");\n  if (previousRealIndex !== realIndex) {\n    swiper.emit(\"realIndexChange\");\n  }\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit(\"slideChange\");\n  }\n}\n\n// node_modules/swiper/core/update/updateClickedSlide.js\nfunction updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = dom_default(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt(dom_default(slide).attr(\"data-swiper-slide-index\"), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = void 0;\n    swiper.clickedIndex = void 0;\n    return;\n  }\n  if (params.slideToClickedSlide && swiper.clickedIndex !== void 0 && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\n\n// node_modules/swiper/core/update/index.js\nvar update_default = {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};\n\n// node_modules/swiper/core/translate/getTranslate.js\nfunction getSwiperTranslate(axis) {\n  if (axis === void 0) {\n    axis = this.isHorizontal() ? \"x\" : \"y\";\n  }\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    $wrapperEl\n  } = swiper;\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n  if (params.cssMode) {\n    return translate;\n  }\n  let currentTranslate = getTranslate($wrapperEl[0], axis);\n  if (rtl)\n    currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}\n\n// node_modules/swiper/core/translate/setTranslate.js\nfunction setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y;\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n  swiper.emit(\"setTranslate\", swiper.translate, byController);\n}\n\n// node_modules/swiper/core/translate/minTranslate.js\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\n\n// node_modules/swiper/core/translate/maxTranslate.js\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\n\n// node_modules/swiper/core/translate/translateTo.js\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (translateBounds === void 0) {\n    translateBounds = true;\n  }\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n  const minTranslate2 = swiper.minTranslate();\n  const maxTranslate2 = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate2)\n    newTranslate = minTranslate2;\n  else if (translateBounds && translate < maxTranslate2)\n    newTranslate = maxTranslate2;\n  else\n    newTranslate = translate;\n  swiper.updateProgress(newTranslate);\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? \"left\" : \"top\"\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? \"left\" : \"top\"]: -newTranslate,\n        behavior: \"smooth\"\n      });\n    }\n    return true;\n  }\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit(\"beforeTransitionStart\", speed, internal);\n      swiper.emit(\"transitionEnd\");\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit(\"beforeTransitionStart\", speed, internal);\n      swiper.emit(\"transitionStart\");\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd3(e) {\n          if (!swiper || swiper.destroyed)\n            return;\n          if (e.target !== this)\n            return;\n          swiper.$wrapperEl[0].removeEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit(\"transitionEnd\");\n          }\n        };\n      }\n      swiper.$wrapperEl[0].addEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n  return true;\n}\n\n// node_modules/swiper/core/translate/index.js\nvar translate_default = {\n  getTranslate: getSwiperTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};\n\n// node_modules/swiper/core/transition/setTransition.js\nfunction setTransition(duration, byController) {\n  const swiper = this;\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n  swiper.emit(\"setTransition\", duration, byController);\n}\n\n// node_modules/swiper/core/transition/transitionEmit.js\nfunction transitionEmit(_ref) {\n  let {\n    swiper,\n    runCallbacks,\n    direction,\n    step\n  } = _ref;\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex)\n      dir = \"next\";\n    else if (activeIndex < previousIndex)\n      dir = \"prev\";\n    else\n      dir = \"reset\";\n  }\n  swiper.emit(`transition${step}`);\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === \"reset\") {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n    swiper.emit(`slideChangeTransition${step}`);\n    if (dir === \"next\") {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}\n\n// node_modules/swiper/core/transition/transitionStart.js\nfunction transitionStart(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode)\n    return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: \"Start\"\n  });\n}\n\n// node_modules/swiper/core/transition/transitionEnd.js\nfunction transitionEnd2(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode)\n    return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: \"End\"\n  });\n}\n\n// node_modules/swiper/core/transition/index.js\nvar transition_default = {\n  setTransition,\n  transitionStart,\n  transitionEnd: transitionEnd2\n};\n\n// node_modules/swiper/core/slide/slideTo.js\nfunction slideTo(index2, speed, runCallbacks, internal, initial) {\n  if (index2 === void 0) {\n    index2 = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index2 !== \"number\" && typeof index2 !== \"string\") {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index2}] given.`);\n  }\n  if (typeof index2 === \"string\") {\n    const indexAsNumber = parseInt(index2, 10);\n    const isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index2}] given.`);\n    }\n    index2 = indexAsNumber;\n  }\n  const swiper = this;\n  let slideIndex = index2;\n  if (slideIndex < 0)\n    slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length)\n    snapIndex = snapGrid.length - 1;\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit(\"beforeSlideChangeStart\");\n  }\n  const translate = -snapGrid[snapIndex];\n  swiper.updateProgress(translate);\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n      if (typeof slidesGrid[i + 1] !== \"undefined\") {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  }\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex)\n        return false;\n    }\n  }\n  let direction;\n  if (slideIndex > activeIndex)\n    direction = \"next\";\n  else if (slideIndex < activeIndex)\n    direction = \"prev\";\n  else\n    direction = \"reset\";\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex);\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n    swiper.updateSlidesClasses();\n    if (params.effect !== \"slide\") {\n      swiper.setTranslate(translate);\n    }\n    if (direction !== \"reset\") {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n    return false;\n  }\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = \"none\";\n        swiper._immediateVirtual = true;\n      }\n      wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = \"\";\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? \"left\" : \"top\"\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? \"left\" : \"top\"]: t,\n        behavior: \"smooth\"\n      });\n    }\n    return true;\n  }\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit(\"beforeTransitionStart\", speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd3(e) {\n        if (!swiper || swiper.destroyed)\n          return;\n        if (e.target !== this)\n          return;\n        swiper.$wrapperEl[0].removeEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n    swiper.$wrapperEl[0].addEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", swiper.onSlideToWrapperTransitionEnd);\n  }\n  return true;\n}\n\n// node_modules/swiper/core/slide/slideToLoop.js\nfunction slideToLoop(index2, speed, runCallbacks, internal) {\n  if (index2 === void 0) {\n    index2 = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index2 === \"string\") {\n    const indexAsNumber = parseInt(index2, 10);\n    const isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index2}] given.`);\n    }\n    index2 = indexAsNumber;\n  }\n  const swiper = this;\n  let newIndex = index2;\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideNext.js\nfunction slideNext(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled)\n    return swiper;\n  let perGroup = params.slidesPerGroup;\n  if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic(\"current\", true), 1);\n  }\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide)\n      return false;\n    swiper.loopFix();\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slidePrev.js\nfunction slidePrev(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return swiper;\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide)\n      return false;\n    swiper.loopFix();\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n  function normalize(val) {\n    if (val < 0)\n      return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map((val) => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n  if (typeof prevSnap === \"undefined\" && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        prevSnapIndex = snapIndex;\n      }\n    });\n    if (typeof prevSnapIndex !== \"undefined\") {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n  let prevIndex = 0;\n  if (typeof prevSnap !== \"undefined\") {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0)\n      prevIndex = swiper.activeIndex - 1;\n    if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic(\"previous\", true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideReset.js\nfunction slideReset(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideToClosest.js\nfunction slideToClosest(speed, runCallbacks, internal, threshold) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (threshold === void 0) {\n    threshold = 0.5;\n  }\n  const swiper = this;\n  let index2 = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index2);\n  const snapIndex = skip + Math.floor((index2 - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index2 += swiper.params.slidesPerGroup;\n    }\n  } else {\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index2 -= swiper.params.slidesPerGroup;\n    }\n  }\n  index2 = Math.max(index2, 0);\n  index2 = Math.min(index2, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index2, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideToClickedSlide.js\nfunction slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n  if (params.loop) {\n    if (swiper.animating)\n      return;\n    realIndex = parseInt(dom_default(swiper.clickedSlide).attr(\"data-swiper-slide-index\"), 10);\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\n\n// node_modules/swiper/core/slide/index.js\nvar slide_default = {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};\n\n// node_modules/swiper/core/loop/loopCreate.js\nfunction loopCreate() {\n  const swiper = this;\n  const document2 = getDocument();\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const $selector = $wrapperEl.children().length > 0 ? dom_default($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = dom_default(document2.createElement(\"div\")).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n  if (params.slidesPerView === \"auto\" && !params.loopedSlides)\n    params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n  if (swiper.loopedSlides > slides.length && swiper.params.loopedSlidesLimit) {\n    swiper.loopedSlides = slides.length;\n  }\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index2) => {\n    dom_default(el).attr(\"data-swiper-slide-index\", index2);\n  });\n  for (let i = 0; i < swiper.loopedSlides; i += 1) {\n    const index2 = i - Math.floor(i / slides.length) * slides.length;\n    appendSlides.push(slides.eq(index2)[0]);\n    prependSlides.unshift(slides.eq(slides.length - index2 - 1)[0]);\n  }\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append(dom_default(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend(dom_default(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}\n\n// node_modules/swiper/core/loop/loopFix.js\nfunction loopFix() {\n  const swiper = this;\n  swiper.emit(\"beforeLoopFix\");\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate();\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit(\"loopFix\");\n}\n\n// node_modules/swiper/core/loop/loopDestroy.js\nfunction loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr(\"data-swiper-slide-index\");\n}\n\n// node_modules/swiper/core/loop/index.js\nvar loop_default = {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};\n\n// node_modules/swiper/core/grab-cursor/setGrabCursor.js\nfunction setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode)\n    return;\n  const el = swiper.params.touchEventsTarget === \"container\" ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = \"move\";\n  el.style.cursor = moving ? \"grabbing\" : \"grab\";\n}\n\n// node_modules/swiper/core/grab-cursor/unsetGrabCursor.js\nfunction unsetGrabCursor() {\n  const swiper = this;\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n  swiper[swiper.params.touchEventsTarget === \"container\" ? \"el\" : \"wrapperEl\"].style.cursor = \"\";\n}\n\n// node_modules/swiper/core/grab-cursor/index.js\nvar grab_cursor_default = {\n  setGrabCursor,\n  unsetGrabCursor\n};\n\n// node_modules/swiper/core/events/onTouchStart.js\nfunction closestElement(selector, base) {\n  if (base === void 0) {\n    base = this;\n  }\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow())\n      return null;\n    if (el.assignedSlot)\n      el = el.assignedSlot;\n    const found = el.closest(selector);\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n    return found || __closestFrom(el.getRootNode().host);\n  }\n  return __closestFrom(base);\n}\nfunction onTouchStart(event2) {\n  const swiper = this;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n  let e = event2;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  let $targetEl = dom_default(e.target);\n  if (params.touchEventsTarget === \"wrapper\") {\n    if (!$targetEl.closest(swiper.wrapperEl).length)\n      return;\n  }\n  data.isTouchEvent = e.type === \"touchstart\";\n  if (!data.isTouchEvent && \"which\" in e && e.which === 3)\n    return;\n  if (!data.isTouchEvent && \"button\" in e && e.button > 0)\n    return;\n  if (data.isTouched && data.isMoved)\n    return;\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== \"\";\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event2.path && event2.path[0]) {\n    $targetEl = dom_default(event2.path[0]);\n  }\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot);\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, $targetEl[0]) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0])\n      return;\n  }\n  touches.currentX = e.type === \"touchstart\" ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === \"touchstart\" ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY;\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window2.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === \"prevent\") {\n      event2.preventDefault();\n    } else {\n      return;\n    }\n  }\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: void 0,\n    startMoving: void 0\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = void 0;\n  if (params.threshold > 0)\n    data.allowThresholdMove = false;\n  if (e.type !== \"touchstart\") {\n    let preventDefault = true;\n    if ($targetEl.is(data.focusableElements)) {\n      preventDefault = false;\n      if ($targetEl[0].nodeName === \"SELECT\") {\n        data.isTouched = false;\n      }\n    }\n    if (document2.activeElement && dom_default(document2.activeElement).is(data.focusableElements) && document2.activeElement !== $targetEl[0]) {\n      document2.activeElement.blur();\n    }\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n  if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n  swiper.emit(\"touchStart\", e);\n}\n\n// node_modules/swiper/core/events/onTouchMove.js\nfunction onTouchMove(event2) {\n  const document2 = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  let e = event2;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit(\"touchMoveOpposite\", e);\n    }\n    return;\n  }\n  if (data.isTouchEvent && e.type !== \"touchmove\")\n    return;\n  const targetTouch = e.type === \"touchmove\" && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === \"touchmove\" ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === \"touchmove\" ? targetTouch.pageY : e.pageY;\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n  if (!swiper.allowTouchMove) {\n    if (!dom_default(e.target).is(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n    return;\n  }\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n  if (data.isTouchEvent && document2.activeElement) {\n    if (e.target === document2.activeElement && dom_default(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n  if (data.allowTouchCallbacks) {\n    swiper.emit(\"touchMove\", e);\n  }\n  if (e.targetTouches && e.targetTouches.length > 1)\n    return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold)\n    return;\n  if (typeof data.isScrolling === \"undefined\") {\n    let touchAngle;\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n  if (data.isScrolling) {\n    swiper.emit(\"touchMoveOpposite\", e);\n  }\n  if (typeof data.startMoving === \"undefined\") {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n  if (!data.startMoving) {\n    return;\n  }\n  swiper.allowClick = false;\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\");\n    }\n    data.allowMomentumBounce = false;\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n    swiper.emit(\"sliderFirstMove\", e);\n  }\n  swiper.emit(\"sliderMove\", e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl)\n    diff = -diff;\n  swiper.swipeDirection = diff > 0 ? \"prev\" : \"next\";\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance)\n      data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance)\n      data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  }\n  if (!swiper.allowSlideNext && swiper.swipeDirection === \"next\" && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === \"prev\" && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n  if (!params.followFinger || params.cssMode)\n    return;\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  }\n  swiper.updateProgress(data.currentTranslate);\n  swiper.setTranslate(data.currentTranslate);\n}\n\n// node_modules/swiper/core/events/onTouchEnd.js\nfunction onTouchEnd(event2) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  let e = event2;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  if (data.allowTouchCallbacks) {\n    swiper.emit(\"touchEnd\", e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  }\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime;\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit(\"tap click\", e);\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit(\"doubleTap doubleClick\", e);\n    }\n  }\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed)\n      swiper.allowClick = true;\n  });\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n  if (params.cssMode) {\n    return;\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  }\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment2 = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (typeof slidesGrid[i + increment2] !== \"undefined\") {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment2]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment2] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  }\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n  if (timeDiff > params.longSwipesMs) {\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === \"next\") {\n      if (ratio >= params.longSwipesRatio)\n        swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);\n      else\n        swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === \"prev\") {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === \"next\") {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n      if (swiper.swipeDirection === \"prev\") {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\n\n// node_modules/swiper/core/events/onResize.js\nfunction onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0)\n    return;\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  }\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper;\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n  if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\n\n// node_modules/swiper/core/events/onClick.js\nfunction onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled)\n    return;\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks)\n      e.preventDefault();\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\n\n// node_modules/swiper/core/events/onScroll.js\nfunction onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  swiper.previousTranslate = swiper.translate;\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  }\n  if (swiper.translate === 0)\n    swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n  swiper.emit(\"setTranslate\", swiper.translate, false);\n}\n\n// node_modules/swiper/core/events/index.js\nvar dummyEventAttached = false;\nfunction dummyEventListener() {\n}\nvar events = (swiper, method) => {\n  const document2 = getDocument();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support: support2\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n  const swiperMethod = method;\n  if (!support2.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document2[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document2[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === \"touchstart\" && support2.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support2.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  }\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod](\"click\", swiper.onClick, true);\n  }\n  if (params.cssMode) {\n    wrapperEl[domMethod](\"scroll\", swiper.onScroll);\n  }\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, true);\n  } else {\n    swiper[swiperMethod](\"observerUpdate\", onResize, true);\n  }\n};\nfunction attachEvents() {\n  const swiper = this;\n  const document2 = getDocument();\n  const {\n    params,\n    support: support2\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n  swiper.onClick = onClick.bind(swiper);\n  if (support2.touch && !dummyEventAttached) {\n    document2.addEventListener(\"touchstart\", dummyEventListener);\n    dummyEventAttached = true;\n  }\n  events(swiper, \"on\");\n}\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, \"off\");\n}\nvar events_default = {\n  attachEvents,\n  detachEvents\n};\n\n// node_modules/swiper/core/breakpoints/setBreakpoint.js\nvar isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0)\n    return;\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint)\n    return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : void 0;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === \"column\" || !breakpointParams.grid.fill && params.grid.fill === \"column\") {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n    swiper.emitContainerClasses();\n  }\n  [\"navigation\", \"pagination\", \"scrollbar\"].forEach((prop) => {\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n  extend2(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit(\"_beforeBreakpoint\", breakpointParams);\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n  swiper.emit(\"breakpoint\", breakpointParams);\n}\n\n// node_modules/swiper/core/breakpoints/getBreakpoint.js\nfunction getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = \"window\";\n  }\n  if (!breakpoints || base === \"container\" && !containerEl)\n    return void 0;\n  let breakpoint = false;\n  const window2 = getWindow();\n  const currentHeight = base === \"window\" ? window2.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map((point) => {\n    if (typeof point === \"string\" && point.indexOf(\"@\") === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n    if (base === \"window\") {\n      if (window2.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n  return breakpoint || \"max\";\n}\n\n// node_modules/swiper/core/breakpoints/index.js\nvar breakpoints_default = {\n  setBreakpoint,\n  getBreakpoint\n};\n\n// node_modules/swiper/core/classes/addClasses.js\nfunction prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach((item) => {\n    if (typeof item === \"object\") {\n      Object.keys(item).forEach((classNames) => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === \"string\") {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\nfunction addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support: support2\n  } = swiper;\n  const suffixes = prepareClasses([\"initialized\", params.direction, {\n    \"pointer-events\": !support2.touch\n  }, {\n    \"free-mode\": swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    \"autoheight\": params.autoHeight\n  }, {\n    \"rtl\": rtl\n  }, {\n    \"grid\": params.grid && params.grid.rows > 1\n  }, {\n    \"grid-column\": params.grid && params.grid.rows > 1 && params.grid.fill === \"column\"\n  }, {\n    \"android\": device.android\n  }, {\n    \"ios\": device.ios\n  }, {\n    \"css-mode\": params.cssMode\n  }, {\n    \"centered\": params.cssMode && params.centeredSlides\n  }, {\n    \"watch-progress\": params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(\" \"));\n  swiper.emitContainerClasses();\n}\n\n// node_modules/swiper/core/classes/removeClasses.js\nfunction removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(\" \"));\n  swiper.emitContainerClasses();\n}\n\n// node_modules/swiper/core/classes/index.js\nvar classes_default = {\n  addClasses,\n  removeClasses\n};\n\n// node_modules/swiper/core/images/loadImage.js\nfunction loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window2 = getWindow();\n  let image;\n  function onReady() {\n    if (callback)\n      callback();\n  }\n  const isPicture = dom_default(imageEl).parent(\"picture\")[0];\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window2.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n      if (sizes) {\n        image.sizes = sizes;\n      }\n      if (srcset) {\n        image.srcset = srcset;\n      }\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    onReady();\n  }\n}\n\n// node_modules/swiper/core/images/preloadImages.js\nfunction preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find(\"img\");\n  function onReady() {\n    if (typeof swiper === \"undefined\" || swiper === null || !swiper || swiper.destroyed)\n      return;\n    if (swiper.imagesLoaded !== void 0)\n      swiper.imagesLoaded += 1;\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady)\n        swiper.update();\n      swiper.emit(\"imagesReady\");\n    }\n  }\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute(\"src\"), imageEl.srcset || imageEl.getAttribute(\"srcset\"), imageEl.sizes || imageEl.getAttribute(\"sizes\"), true, onReady);\n  }\n}\n\n// node_modules/swiper/core/images/index.js\nvar images_default = {\n  loadImage,\n  preloadImages\n};\n\n// node_modules/swiper/core/check-overflow/index.js\nfunction checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? \"lock\" : \"unlock\");\n  }\n}\nvar check_overflow_default = {\n  checkOverflow\n};\n\n// node_modules/swiper/core/defaults.js\nvar defaults_default = {\n  init: true,\n  direction: \"horizontal\",\n  touchEventsTarget: \"wrapper\",\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: \"input, select, option, textarea, button, video, label\",\n  width: null,\n  height: null,\n  preventInteractionOnTransition: false,\n  userAgent: null,\n  url: null,\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  autoHeight: false,\n  setWrapperSize: false,\n  virtualTranslate: false,\n  effect: \"slide\",\n  breakpoints: void 0,\n  breakpointsBase: \"window\",\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  slidesOffsetAfter: 0,\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  watchOverflow: true,\n  roundLengths: false,\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  uniqueNavElements: true,\n  resistance: true,\n  resistanceRatio: 0.85,\n  watchSlidesProgress: false,\n  grabCursor: false,\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  preloadImages: true,\n  updateOnImagesReady: true,\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopedSlidesLimit: true,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  rewind: false,\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  noSwiping: true,\n  noSwipingClass: \"swiper-no-swiping\",\n  noSwipingSelector: null,\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  containerModifierClass: \"swiper-\",\n  slideClass: \"swiper-slide\",\n  slideBlankClass: \"swiper-slide-invisible-blank\",\n  slideActiveClass: \"swiper-slide-active\",\n  slideDuplicateActiveClass: \"swiper-slide-duplicate-active\",\n  slideVisibleClass: \"swiper-slide-visible\",\n  slideDuplicateClass: \"swiper-slide-duplicate\",\n  slideNextClass: \"swiper-slide-next\",\n  slideDuplicateNextClass: \"swiper-slide-duplicate-next\",\n  slidePrevClass: \"swiper-slide-prev\",\n  slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\",\n  wrapperClass: \"swiper-wrapper\",\n  runCallbacksOnInit: true,\n  _emitClasses: false\n};\n\n// node_modules/swiper/core/moduleExtendParams.js\nfunction moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n    if (typeof moduleParams !== \"object\" || moduleParams === null) {\n      extend2(allModulesParams, obj);\n      return;\n    }\n    if ([\"navigation\", \"pagination\", \"scrollbar\"].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n    if (!(moduleParamName in params && \"enabled\" in moduleParams)) {\n      extend2(allModulesParams, obj);\n      return;\n    }\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n    if (typeof params[moduleParamName] === \"object\" && !(\"enabled\" in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n    if (!params[moduleParamName])\n      params[moduleParamName] = {\n        enabled: false\n      };\n    extend2(allModulesParams, obj);\n  };\n}\n\n// node_modules/swiper/core/core.js\nvar prototypes = {\n  eventsEmitter: events_emitter_default,\n  update: update_default,\n  translate: translate_default,\n  transition: transition_default,\n  slide: slide_default,\n  loop: loop_default,\n  grabCursor: grab_cursor_default,\n  events: events_default,\n  breakpoints: breakpoints_default,\n  checkOverflow: check_overflow_default,\n  classes: classes_default,\n  images: images_default\n};\nvar extendedDefaults = {};\nvar Swiper = class {\n  constructor() {\n    let el;\n    let params;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === \"Object\") {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n    if (!params)\n      params = {};\n    params = extend2({}, params);\n    if (el && !params.el)\n      params.el = el;\n    if (params.el && dom_default(params.el).length > 1) {\n      const swipers = [];\n      dom_default(params.el).each((containerEl) => {\n        const newParams = extend2({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    }\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n    const allModulesParams = {};\n    swiper.modules.forEach((mod) => {\n      mod({\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    });\n    const swiperParams = extend2({}, defaults_default, allModulesParams);\n    swiper.params = extend2({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend2({}, swiper.params);\n    swiper.passedParams = extend2({}, params);\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach((eventName) => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    }\n    swiper.$ = dom_default;\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      classNames: [],\n      slides: dom_default(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      isHorizontal() {\n        return swiper.params.direction === \"horizontal\";\n      },\n      isVertical() {\n        return swiper.params.direction === \"vertical\";\n      },\n      activeIndex: 0,\n      realIndex: 0,\n      isBeginning: true,\n      isEnd: false,\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      touchEvents: function touchEvents() {\n        const touch = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"];\n        const desktop = [\"pointerdown\", \"pointermove\", \"pointerup\"];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: void 0,\n        isMoved: void 0,\n        allowTouchCallbacks: void 0,\n        touchStartTime: void 0,\n        isScrolling: void 0,\n        currentTranslate: void 0,\n        startTranslate: void 0,\n        allowThresholdMove: void 0,\n        focusableElements: swiper.params.focusableElements,\n        lastClickTime: now(),\n        clickTimeout: void 0,\n        velocities: [],\n        allowMomentumBounce: void 0,\n        isTouchEvent: void 0,\n        startMoving: void 0\n      },\n      allowClick: true,\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit(\"_swiper\");\n    if (swiper.params.init) {\n      swiper.init();\n    }\n    return swiper;\n  }\n  enable() {\n    const swiper = this;\n    if (swiper.enabled)\n      return;\n    swiper.enabled = true;\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n    swiper.emit(\"enable\");\n  }\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled)\n      return;\n    swiper.enabled = false;\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n    swiper.emit(\"disable\");\n  }\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === \"undefined\" ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el)\n      return;\n    const cls = swiper.el.className.split(\" \").filter((className) => {\n      return className.indexOf(\"swiper\") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit(\"_containerClasses\", cls.join(\" \"));\n  }\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed)\n      return \"\";\n    return slideEl.className.split(\" \").filter((className) => {\n      return className.indexOf(\"swiper-slide\") === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(\" \");\n  }\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el)\n      return;\n    const updates = [];\n    swiper.slides.each((slideEl) => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit(\"_slideClass\", slideEl, classNames);\n    });\n    swiper.emit(\"_slideClasses\", updates);\n  }\n  slidesPerViewDynamic(view, exact) {\n    if (view === void 0) {\n      view = \"current\";\n    }\n    if (exact === void 0) {\n      exact = false;\n    }\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize)\n            breakLoop = true;\n        }\n      }\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize)\n            breakLoop = true;\n        }\n      }\n    } else {\n      if (view === \"current\") {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n    return spv;\n  }\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed)\n      return;\n    const {\n      snapGrid,\n      params\n    } = swiper;\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    function setTranslate2() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    let translated;\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate2();\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === \"auto\" || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (!translated) {\n        setTranslate2();\n      }\n    }\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n    swiper.emit(\"update\");\n  }\n  changeDirection(newDirection, needUpdate) {\n    if (needUpdate === void 0) {\n      needUpdate = true;\n    }\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n    if (!newDirection) {\n      newDirection = currentDirection === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    }\n    if (newDirection === currentDirection || newDirection !== \"horizontal\" && newDirection !== \"vertical\") {\n      return swiper;\n    }\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each((slideEl) => {\n      if (newDirection === \"vertical\") {\n        slideEl.style.width = \"\";\n      } else {\n        slideEl.style.height = \"\";\n      }\n    });\n    swiper.emit(\"changeDirection\");\n    if (needUpdate)\n      swiper.update();\n    return swiper;\n  }\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === \"rtl\" || !swiper.rtl && direction === \"ltr\")\n      return;\n    swiper.rtl = direction === \"rtl\";\n    swiper.rtlTranslate = swiper.params.direction === \"horizontal\" && swiper.rtl;\n    if (swiper.rtl) {\n      swiper.$el.addClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = \"rtl\";\n    } else {\n      swiper.$el.removeClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = \"ltr\";\n    }\n    swiper.update();\n  }\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted)\n      return true;\n    const $el = dom_default(el || swiper.params.el);\n    el = $el[0];\n    if (!el) {\n      return false;\n    }\n    el.swiper = swiper;\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || \"\").trim().split(\" \").join(\".\")}`;\n    };\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = dom_default(el.shadowRoot.querySelector(getWrapperSelector()));\n        res.children = (options) => $el.children(options);\n        return res;\n      }\n      if (!$el.children) {\n        return dom_default($el).children(getWrapperSelector());\n      }\n      return $el.children(getWrapperSelector());\n    };\n    let $wrapperEl = getWrapper();\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document2 = getDocument();\n      const wrapper = document2.createElement(\"div\");\n      $wrapperEl = dom_default(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each((slideEl) => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      rtl: el.dir.toLowerCase() === \"rtl\" || $el.css(\"direction\") === \"rtl\",\n      rtlTranslate: swiper.params.direction === \"horizontal\" && (el.dir.toLowerCase() === \"rtl\" || $el.css(\"direction\") === \"rtl\"),\n      wrongRTL: $wrapperEl.css(\"display\") === \"-webkit-box\"\n    });\n    return true;\n  }\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized)\n      return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false)\n      return swiper;\n    swiper.emit(\"beforeInit\");\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.addClasses();\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    }\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    }\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    }\n    swiper.attachEvents();\n    swiper.initialized = true;\n    swiper.emit(\"init\");\n    swiper.emit(\"afterInit\");\n    return swiper;\n  }\n  destroy(deleteInstance, cleanStyles) {\n    if (deleteInstance === void 0) {\n      deleteInstance = true;\n    }\n    if (cleanStyles === void 0) {\n      cleanStyles = true;\n    }\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n    if (typeof swiper.params === \"undefined\" || swiper.destroyed) {\n      return null;\n    }\n    swiper.emit(\"beforeDestroy\");\n    swiper.initialized = false;\n    swiper.detachEvents();\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr(\"style\");\n      $wrapperEl.removeAttr(\"style\");\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\");\n      }\n    }\n    swiper.emit(\"destroy\");\n    Object.keys(swiper.eventsListeners).forEach((eventName) => {\n      swiper.off(eventName);\n    });\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n    swiper.destroyed = true;\n    return null;\n  }\n  static extendDefaults(newDefaults) {\n    extend2(extendedDefaults, newDefaults);\n  }\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n  static get defaults() {\n    return defaults_default;\n  }\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__)\n      Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n    if (typeof mod === \"function\" && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach((m) => Swiper.installModule(m));\n      return Swiper;\n    }\n    Swiper.installModule(module);\n    return Swiper;\n  }\n};\nObject.keys(prototypes).forEach((prototypeGroup) => {\n  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nvar core_default = Swiper;\n\n// node_modules/swiper/modules/virtual/virtual.js\nfunction Virtual(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  let cssModeTimeout;\n  swiper.virtual = {\n    cache: {},\n    from: void 0,\n    to: void 0,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n  function renderSlide(slide, index2) {\n    const params = swiper.params.virtual;\n    if (params.cache && swiper.virtual.cache[index2]) {\n      return swiper.virtual.cache[index2];\n    }\n    const $slideEl = params.renderSlide ? dom_default(params.renderSlide.call(swiper, slide, index2)) : dom_default(`<div class=\"${swiper.params.slideClass}\" data-swiper-slide-index=\"${index2}\">${slide}</div>`);\n    if (!$slideEl.attr(\"data-swiper-slide-index\"))\n      $slideEl.attr(\"data-swiper-slide-index\", index2);\n    if (params.cache)\n      swiper.virtual.cache[index2] = $slideEl;\n    return $slideEl;\n  }\n  function update(force) {\n    const {\n      slidesPerView,\n      slidesPerGroup,\n      centeredSlides\n    } = swiper.params;\n    const {\n      addSlidesBefore,\n      addSlidesAfter\n    } = swiper.params.virtual;\n    const {\n      from: previousFrom,\n      to: previousTo,\n      slides,\n      slidesGrid: previousSlidesGrid,\n      offset: previousOffset\n    } = swiper.virtual;\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n    const activeIndex = swiper.activeIndex || 0;\n    let offsetProp;\n    if (swiper.rtlTranslate)\n      offsetProp = \"right\";\n    else\n      offsetProp = swiper.isHorizontal() ? \"left\" : \"top\";\n    let slidesAfter;\n    let slidesBefore;\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = slidesPerGroup + addSlidesBefore;\n    }\n    const from = Math.max((activeIndex || 0) - slidesBefore, 0);\n    const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n    const offset2 = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    Object.assign(swiper.virtual, {\n      from,\n      to,\n      offset: offset2,\n      slidesGrid: swiper.slidesGrid\n    });\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n      if (swiper.lazy && swiper.params.lazy.enabled) {\n        swiper.lazy.load();\n      }\n      emit(\"virtualUpdate\");\n    }\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset2 !== previousOffset) {\n        swiper.slides.css(offsetProp, `${offset2}px`);\n      }\n      swiper.updateProgress();\n      emit(\"virtualUpdate\");\n      return;\n    }\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset: offset2,\n        from,\n        to,\n        slides: function getSlides() {\n          const slidesToRender = [];\n          for (let i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n          return slidesToRender;\n        }()\n      });\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      } else {\n        emit(\"virtualUpdate\");\n      }\n      return;\n    }\n    const prependIndexes = [];\n    const appendIndexes = [];\n    if (force) {\n      swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();\n    } else {\n      for (let i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${i}\"]`).remove();\n        }\n      }\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      if (i >= from && i <= to) {\n        if (typeof previousTo === \"undefined\" || force) {\n          appendIndexes.push(i);\n        } else {\n          if (i > previousTo)\n            appendIndexes.push(i);\n          if (i < previousFrom)\n            prependIndexes.push(i);\n        }\n      }\n    }\n    appendIndexes.forEach((index2) => {\n      swiper.$wrapperEl.append(renderSlide(slides[index2], index2));\n    });\n    prependIndexes.sort((a, b) => b - a).forEach((index2) => {\n      swiper.$wrapperEl.prepend(renderSlide(slides[index2], index2));\n    });\n    swiper.$wrapperEl.children(\".swiper-slide\").css(offsetProp, `${offset2}px`);\n    onRendered();\n  }\n  function appendSlide2(slides) {\n    if (typeof slides === \"object\" && \"length\" in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i])\n          swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n    update(true);\n  }\n  function prependSlide2(slides) {\n    const activeIndex = swiper.activeIndex;\n    let newActiveIndex = activeIndex + 1;\n    let numberOfNewSlides = 1;\n    if (Array.isArray(slides)) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i])\n          swiper.virtual.slides.unshift(slides[i]);\n      }\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n    if (swiper.params.virtual.cache) {\n      const cache = swiper.virtual.cache;\n      const newCache = {};\n      Object.keys(cache).forEach((cachedIndex) => {\n        const $cachedEl = cache[cachedIndex];\n        const cachedElIndex = $cachedEl.attr(\"data-swiper-slide-index\");\n        if (cachedElIndex) {\n          $cachedEl.attr(\"data-swiper-slide-index\", parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n  function removeSlide2(slidesIndexes) {\n    if (typeof slidesIndexes === \"undefined\" || slidesIndexes === null)\n      return;\n    let activeIndex = swiper.activeIndex;\n    if (Array.isArray(slidesIndexes)) {\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n        if (slidesIndexes[i] < activeIndex)\n          activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n      if (slidesIndexes < activeIndex)\n        activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n  function removeAllSlides2() {\n    swiper.virtual.slides = [];\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n  on2(\"beforeInit\", () => {\n    if (!swiper.params.virtual.enabled)\n      return;\n    swiper.virtual.slides = swiper.params.virtual.slides;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on2(\"setTranslate\", () => {\n    if (!swiper.params.virtual.enabled)\n      return;\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(() => {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on2(\"init update resize\", () => {\n    if (!swiper.params.virtual.enabled)\n      return;\n    if (swiper.params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, \"--swiper-virtual-size\", `${swiper.virtualSize}px`);\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide: appendSlide2,\n    prependSlide: prependSlide2,\n    removeSlide: removeSlide2,\n    removeAllSlides: removeAllSlides2,\n    update\n  });\n}\n\n// node_modules/swiper/modules/keyboard/keyboard.js\nfunction Keyboard(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  swiper.keyboard = {\n    enabled: false\n  };\n  extendParams({\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n      pageUpDown: true\n    }\n  });\n  function handle(event2) {\n    if (!swiper.enabled)\n      return;\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let e = event2;\n    if (e.originalEvent)\n      e = e.originalEvent;\n    const kc = e.keyCode || e.charCode;\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\n    const isPageUp = pageUpDown && kc === 33;\n    const isPageDown = pageUpDown && kc === 34;\n    const isArrowLeft = kc === 37;\n    const isArrowRight = kc === 39;\n    const isArrowUp = kc === 38;\n    const isArrowDown = kc === 40;\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n      return false;\n    }\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return void 0;\n    }\n    if (document2.activeElement && document2.activeElement.nodeName && (document2.activeElement.nodeName.toLowerCase() === \"input\" || document2.activeElement.nodeName.toLowerCase() === \"textarea\")) {\n      return void 0;\n    }\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n      let inView = false;\n      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n        return void 0;\n      }\n      const $el = swiper.$el;\n      const swiperWidth = $el[0].clientWidth;\n      const swiperHeight = $el[0].clientHeight;\n      const windowWidth = window2.innerWidth;\n      const windowHeight = window2.innerHeight;\n      const swiperOffset = swiper.$el.offset();\n      if (rtl)\n        swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n          if (point[0] === 0 && point[1] === 0)\n            continue;\n          inView = true;\n        }\n      }\n      if (!inView)\n        return void 0;\n    }\n    if (swiper.isHorizontal()) {\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n      }\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl)\n        swiper.slideNext();\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl)\n        swiper.slidePrev();\n    } else {\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n      }\n      if (isPageDown || isArrowDown)\n        swiper.slideNext();\n      if (isPageUp || isArrowUp)\n        swiper.slidePrev();\n    }\n    emit(\"keyPress\", kc);\n    return void 0;\n  }\n  function enable() {\n    if (swiper.keyboard.enabled)\n      return;\n    dom_default(document2).on(\"keydown\", handle);\n    swiper.keyboard.enabled = true;\n  }\n  function disable() {\n    if (!swiper.keyboard.enabled)\n      return;\n    dom_default(document2).off(\"keydown\", handle);\n    swiper.keyboard.enabled = false;\n  }\n  on2(\"init\", () => {\n    if (swiper.params.keyboard.enabled) {\n      enable();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (swiper.keyboard.enabled) {\n      disable();\n    }\n  });\n  Object.assign(swiper.keyboard, {\n    enable,\n    disable\n  });\n}\n\n// node_modules/swiper/modules/mousewheel/mousewheel.js\nfunction Mousewheel(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const window2 = getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: \"container\",\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n  function normalize(e) {\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0;\n    let pX = 0;\n    let pY = 0;\n    if (\"detail\" in e) {\n      sY = e.detail;\n    }\n    if (\"wheelDelta\" in e) {\n      sY = -e.wheelDelta / 120;\n    }\n    if (\"wheelDeltaY\" in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n    if (\"wheelDeltaX\" in e) {\n      sX = -e.wheelDeltaX / 120;\n    }\n    if (\"axis\" in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n    if (\"deltaY\" in e) {\n      pY = e.deltaY;\n    }\n    if (\"deltaX\" in e) {\n      pX = e.deltaX;\n    }\n    if (e.shiftKey && !pX) {\n      pX = pY;\n      pY = 0;\n    }\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    }\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n  function handleMouseEnter() {\n    if (!swiper.enabled)\n      return;\n    swiper.mouseEntered = true;\n  }\n  function handleMouseLeave() {\n    if (!swiper.enabled)\n      return;\n    swiper.mouseEntered = false;\n  }\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      return false;\n    }\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      return false;\n    }\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      return true;\n    }\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit(\"scroll\", newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit(\"scroll\", newEvent.raw);\n    }\n    lastScrollTime = new window2.Date().getTime();\n    return false;\n  }\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      return true;\n    }\n    return false;\n  }\n  function handle(event2) {\n    let e = event2;\n    let disableParentSwiper = true;\n    if (!swiper.enabled)\n      return;\n    const params = swiper.params.mousewheel;\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n      target = dom_default(swiper.params.mousewheel.eventsTarget);\n    }\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges)\n      return true;\n    if (e.originalEvent)\n      e = e.originalEvent;\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY))\n          delta = -data.pixelX * rtlFactor;\n        else\n          return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX))\n        delta = -data.pixelY;\n      else\n        return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n    if (delta === 0)\n      return true;\n    if (params.invert)\n      delta = -delta;\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate())\n      positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate())\n      positions = swiper.maxTranslate();\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested)\n      e.stopPropagation();\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event2\n      };\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift();\n      }\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : void 0;\n      recentWheelEvents.push(newEvent);\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      }\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = void 0;\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate())\n          position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate())\n          position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n        if (swiper.params.freeMode.sticky) {\n          clearTimeout(timeout);\n          timeout = void 0;\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift();\n          }\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : void 0;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, void 0, snapToThreshold);\n            }, 0);\n          }\n          if (!timeout) {\n            timeout = nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, void 0, snapToThreshold);\n            }, 500);\n          }\n        }\n        if (!ignoreWheelEvents)\n          emit(\"scroll\", e);\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction)\n          swiper.autoplay.stop();\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate())\n          return true;\n      }\n    }\n    if (e.preventDefault)\n      e.preventDefault();\n    else\n      e.returnValue = false;\n    return false;\n  }\n  function events2(method) {\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n      target = dom_default(swiper.params.mousewheel.eventsTarget);\n    }\n    target[method](\"mouseenter\", handleMouseEnter);\n    target[method](\"mouseleave\", handleMouseLeave);\n    target[method](\"wheel\", handle);\n  }\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener(\"wheel\", handle);\n      return true;\n    }\n    if (swiper.mousewheel.enabled)\n      return false;\n    events2(\"on\");\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n    if (!swiper.mousewheel.enabled)\n      return false;\n    events2(\"off\");\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n  on2(\"init\", () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n    if (swiper.params.mousewheel.enabled)\n      enable();\n  });\n  on2(\"destroy\", () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n    if (swiper.mousewheel.enabled)\n      disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}\n\n// node_modules/swiper/shared/create-element-if-not-defined.js\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  const document2 = getDocument();\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach((key) => {\n      if (!params[key] && params.auto === true) {\n        let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n        if (!element) {\n          element = document2.createElement(\"div\");\n          element.className = checkProps[key];\n          swiper.$el.append(element);\n        }\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n  return params;\n}\n\n// node_modules/swiper/modules/navigation/navigation.js\nfunction Navigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: \"swiper-button-disabled\",\n      hiddenClass: \"swiper-button-hidden\",\n      lockClass: \"swiper-button-lock\",\n      navigationDisabledClass: \"swiper-navigation-disabled\"\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    $nextEl: null,\n    prevEl: null,\n    $prevEl: null\n  };\n  function getEl(el) {\n    let $el;\n    if (el) {\n      $el = dom_default(el);\n      if (swiper.params.uniqueNavElements && typeof el === \"string\" && $el.length > 1 && swiper.$el.find(el).length === 1) {\n        $el = swiper.$el.find(el);\n      }\n    }\n    return $el;\n  }\n  function toggleEl($el, disabled) {\n    const params = swiper.params.navigation;\n    if ($el && $el.length > 0) {\n      $el[disabled ? \"addClass\" : \"removeClass\"](params.disabledClass);\n      if ($el[0] && $el[0].tagName === \"BUTTON\")\n        $el[0].disabled = disabled;\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        $el[swiper.isLocked ? \"addClass\" : \"removeClass\"](params.lockClass);\n      }\n    }\n  }\n  function update() {\n    if (swiper.params.loop)\n      return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    toggleEl($prevEl, swiper.isBeginning && !swiper.params.rewind);\n    toggleEl($nextEl, swiper.isEnd && !swiper.params.rewind);\n  }\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind)\n      return;\n    swiper.slidePrev();\n    emit(\"navigationPrev\");\n  }\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind)\n      return;\n    swiper.slideNext();\n    emit(\"navigationNext\");\n  }\n  function init() {\n    const params = swiper.params.navigation;\n    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: \"swiper-button-next\",\n      prevEl: \"swiper-button-prev\"\n    });\n    if (!(params.nextEl || params.prevEl))\n      return;\n    const $nextEl = getEl(params.nextEl);\n    const $prevEl = getEl(params.prevEl);\n    if ($nextEl && $nextEl.length > 0) {\n      $nextEl.on(\"click\", onNextClick);\n    }\n    if ($prevEl && $prevEl.length > 0) {\n      $prevEl.on(\"click\", onPrevClick);\n    }\n    Object.assign(swiper.navigation, {\n      $nextEl,\n      nextEl: $nextEl && $nextEl[0],\n      $prevEl,\n      prevEl: $prevEl && $prevEl[0]\n    });\n    if (!swiper.enabled) {\n      if ($nextEl)\n        $nextEl.addClass(params.lockClass);\n      if ($prevEl)\n        $prevEl.addClass(params.lockClass);\n    }\n  }\n  function destroy() {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    if ($nextEl && $nextEl.length) {\n      $nextEl.off(\"click\", onNextClick);\n      $nextEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n    if ($prevEl && $prevEl.length) {\n      $prevEl.off(\"click\", onPrevClick);\n      $prevEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n  }\n  on2(\"init\", () => {\n    if (swiper.params.navigation.enabled === false) {\n      disable();\n    } else {\n      init();\n      update();\n    }\n  });\n  on2(\"toEdge fromEdge lock unlock\", () => {\n    update();\n  });\n  on2(\"destroy\", () => {\n    destroy();\n  });\n  on2(\"enable disable\", () => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    if ($nextEl) {\n      $nextEl[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.navigation.lockClass);\n    }\n    if ($prevEl) {\n      $prevEl[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.navigation.lockClass);\n    }\n  });\n  on2(\"click\", (_s, e) => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    const targetEl = e.target;\n    if (swiper.params.navigation.hideOnClick && !dom_default(targetEl).is($prevEl) && !dom_default(targetEl).is($nextEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl)))\n        return;\n      let isHidden;\n      if ($nextEl) {\n        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n      } else if ($prevEl) {\n        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n      }\n      if (isHidden === true) {\n        emit(\"navigationShow\");\n      } else {\n        emit(\"navigationHide\");\n      }\n      if ($nextEl) {\n        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n      if ($prevEl) {\n        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n    }\n  });\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.navigation.navigationDisabledClass);\n    init();\n    update();\n  };\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.navigation.navigationDisabledClass);\n    destroy();\n  };\n  Object.assign(swiper.navigation, {\n    enable,\n    disable,\n    update,\n    init,\n    destroy\n  });\n}\n\n// node_modules/swiper/shared/classes-to-selector.js\nfunction classesToSelector(classes) {\n  if (classes === void 0) {\n    classes = \"\";\n  }\n  return `.${classes.trim().replace(/([\\.:!\\/])/g, \"\\\\$1\").replace(/ /g, \".\")}`;\n}\n\n// node_modules/swiper/modules/pagination/pagination.js\nfunction Pagination(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const pfx = \"swiper-pagination\";\n  extendParams({\n    pagination: {\n      el: null,\n      bulletElement: \"span\",\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: \"bullets\",\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: (number) => number,\n      formatFractionTotal: (number) => number,\n      bulletClass: `${pfx}-bullet`,\n      bulletActiveClass: `${pfx}-bullet-active`,\n      modifierClass: `${pfx}-`,\n      currentClass: `${pfx}-current`,\n      totalClass: `${pfx}-total`,\n      hiddenClass: `${pfx}-hidden`,\n      progressbarFillClass: `${pfx}-progressbar-fill`,\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n      clickableClass: `${pfx}-clickable`,\n      lockClass: `${pfx}-lock`,\n      horizontalClass: `${pfx}-horizontal`,\n      verticalClass: `${pfx}-vertical`,\n      paginationDisabledClass: `${pfx}-disabled`\n    }\n  });\n  swiper.pagination = {\n    el: null,\n    $el: null,\n    bullets: []\n  };\n  let bulletSize;\n  let dynamicBulletIndex = 0;\n  function isPaginationDisabled() {\n    return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;\n  }\n  function setSideBullets($bulletEl, position) {\n    const {\n      bulletActiveClass\n    } = swiper.params.pagination;\n    $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);\n  }\n  function update() {\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled())\n      return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let current;\n    const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n    if (swiper.params.loop) {\n      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n        current -= slidesLength - swiper.loopedSlides * 2;\n      }\n      if (current > total - 1)\n        current -= total;\n      if (current < 0 && swiper.params.paginationType !== \"bullets\")\n        current = total + current;\n    } else if (typeof swiper.snapIndex !== \"undefined\") {\n      current = swiper.snapIndex;\n    } else {\n      current = swiper.activeIndex || 0;\n    }\n    if (params.type === \"bullets\" && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n      if (params.dynamicBullets) {\n        bulletSize = bullets.eq(0)[swiper.isHorizontal() ? \"outerWidth\" : \"outerHeight\"](true);\n        $el.css(swiper.isHorizontal() ? \"width\" : \"height\", `${bulletSize * (params.dynamicMainBullets + 4)}px`);\n        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== void 0) {\n          dynamicBulletIndex += current - (swiper.previousIndex - swiper.loopedSlides || 0);\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (dynamicBulletIndex < 0) {\n            dynamicBulletIndex = 0;\n          }\n        }\n        firstIndex = Math.max(current - dynamicBulletIndex, 0);\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n      bullets.removeClass([\"\", \"-next\", \"-next-next\", \"-prev\", \"-prev-prev\", \"-main\"].map((suffix) => `${params.bulletActiveClass}${suffix}`).join(\" \"));\n      if ($el.length > 1) {\n        bullets.each((bullet) => {\n          const $bullet = dom_default(bullet);\n          const bulletIndex = $bullet.index();\n          if (bulletIndex === current) {\n            $bullet.addClass(params.bulletActiveClass);\n          }\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              $bullet.addClass(`${params.bulletActiveClass}-main`);\n            }\n            if (bulletIndex === firstIndex) {\n              setSideBullets($bullet, \"prev\");\n            }\n            if (bulletIndex === lastIndex) {\n              setSideBullets($bullet, \"next\");\n            }\n          }\n        });\n      } else {\n        const $bullet = bullets.eq(current);\n        const bulletIndex = $bullet.index();\n        $bullet.addClass(params.bulletActiveClass);\n        if (params.dynamicBullets) {\n          const $firstDisplayedBullet = bullets.eq(firstIndex);\n          const $lastDisplayedBullet = bullets.eq(lastIndex);\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n          }\n          if (swiper.params.loop) {\n            if (bulletIndex >= bullets.length) {\n              for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n              }\n              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n            } else {\n              setSideBullets($firstDisplayedBullet, \"prev\");\n              setSideBullets($lastDisplayedBullet, \"next\");\n            }\n          } else {\n            setSideBullets($firstDisplayedBullet, \"prev\");\n            setSideBullets($lastDisplayedBullet, \"next\");\n          }\n        }\n      }\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n        const offsetProp = rtl ? \"right\" : \"left\";\n        bullets.css(swiper.isHorizontal() ? offsetProp : \"top\", `${bulletsOffset}px`);\n      }\n    }\n    if (params.type === \"fraction\") {\n      $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));\n      $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));\n    }\n    if (params.type === \"progressbar\") {\n      let progressbarDirection;\n      if (params.progressbarOpposite) {\n        progressbarDirection = swiper.isHorizontal() ? \"vertical\" : \"horizontal\";\n      } else {\n        progressbarDirection = swiper.isHorizontal() ? \"horizontal\" : \"vertical\";\n      }\n      const scale = (current + 1) / total;\n      let scaleX = 1;\n      let scaleY = 1;\n      if (progressbarDirection === \"horizontal\") {\n        scaleX = scale;\n      } else {\n        scaleY = scale;\n      }\n      $el.find(classesToSelector(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n    }\n    if (params.type === \"custom\" && params.renderCustom) {\n      $el.html(params.renderCustom(swiper, current + 1, total));\n      emit(\"paginationRender\", $el[0]);\n    } else {\n      emit(\"paginationUpdate\", $el[0]);\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      $el[swiper.isLocked ? \"addClass\" : \"removeClass\"](params.lockClass);\n    }\n  }\n  function render() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled())\n      return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let paginationHTML = \"\";\n    if (params.type === \"bullets\") {\n      let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {\n        numberOfBullets = slidesLength;\n      }\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n      $el.html(paginationHTML);\n      swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));\n    }\n    if (params.type === \"fraction\") {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span> / <span class=\"${params.totalClass}\"></span>`;\n      }\n      $el.html(paginationHTML);\n    }\n    if (params.type === \"progressbar\") {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n      $el.html(paginationHTML);\n    }\n    if (params.type !== \"custom\") {\n      emit(\"paginationRender\", swiper.pagination.$el[0]);\n    }\n  }\n  function init() {\n    swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n      el: \"swiper-pagination\"\n    });\n    const params = swiper.params.pagination;\n    if (!params.el)\n      return;\n    let $el = dom_default(params.el);\n    if ($el.length === 0)\n      return;\n    if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && $el.length > 1) {\n      $el = swiper.$el.find(params.el);\n      if ($el.length > 1) {\n        $el = $el.filter((el) => {\n          if (dom_default(el).parents(\".swiper\")[0] !== swiper.el)\n            return false;\n          return true;\n        });\n      }\n    }\n    if (params.type === \"bullets\" && params.clickable) {\n      $el.addClass(params.clickableClass);\n    }\n    $el.addClass(params.modifierClass + params.type);\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    if (params.type === \"bullets\" && params.dynamicBullets) {\n      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n      dynamicBulletIndex = 0;\n      if (params.dynamicMainBullets < 1) {\n        params.dynamicMainBullets = 1;\n      }\n    }\n    if (params.type === \"progressbar\" && params.progressbarOpposite) {\n      $el.addClass(params.progressbarOppositeClass);\n    }\n    if (params.clickable) {\n      $el.on(\"click\", classesToSelector(params.bulletClass), function onClick2(e) {\n        e.preventDefault();\n        let index2 = dom_default(this).index() * swiper.params.slidesPerGroup;\n        if (swiper.params.loop)\n          index2 += swiper.loopedSlides;\n        swiper.slideTo(index2);\n      });\n    }\n    Object.assign(swiper.pagination, {\n      $el,\n      el: $el[0]\n    });\n    if (!swiper.enabled) {\n      $el.addClass(params.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled())\n      return;\n    const $el = swiper.pagination.$el;\n    $el.removeClass(params.hiddenClass);\n    $el.removeClass(params.modifierClass + params.type);\n    $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass)\n      swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n    if (params.clickable) {\n      $el.off(\"click\", classesToSelector(params.bulletClass));\n    }\n  }\n  on2(\"init\", () => {\n    if (swiper.params.pagination.enabled === false) {\n      disable();\n    } else {\n      init();\n      render();\n      update();\n    }\n  });\n  on2(\"activeIndexChange\", () => {\n    if (swiper.params.loop) {\n      update();\n    } else if (typeof swiper.snapIndex === \"undefined\") {\n      update();\n    }\n  });\n  on2(\"snapIndexChange\", () => {\n    if (!swiper.params.loop) {\n      update();\n    }\n  });\n  on2(\"slidesLengthChange\", () => {\n    if (swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on2(\"snapGridLengthChange\", () => {\n    if (!swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on2(\"destroy\", () => {\n    destroy();\n  });\n  on2(\"enable disable\", () => {\n    const {\n      $el\n    } = swiper.pagination;\n    if ($el) {\n      $el[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.pagination.lockClass);\n    }\n  });\n  on2(\"lock unlock\", () => {\n    update();\n  });\n  on2(\"click\", (_s, e) => {\n    const targetEl = e.target;\n    const {\n      $el\n    } = swiper.pagination;\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el && $el.length > 0 && !dom_default(targetEl).hasClass(swiper.params.pagination.bulletClass)) {\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl))\n        return;\n      const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);\n      if (isHidden === true) {\n        emit(\"paginationShow\");\n      } else {\n        emit(\"paginationHide\");\n      }\n      $el.toggleClass(swiper.params.pagination.hiddenClass);\n    }\n  });\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n    }\n    init();\n    render();\n    update();\n  };\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.pagination, {\n    enable,\n    disable,\n    render,\n    update,\n    init,\n    destroy\n  });\n}\n\n// node_modules/swiper/modules/scrollbar/scrollbar.js\nfunction Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const document2 = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: \"auto\",\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: \"swiper-scrollbar-lock\",\n      dragClass: \"swiper-scrollbar-drag\",\n      scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null,\n    $el: null,\n    $dragEl: null\n  };\n  function setTranslate2() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl,\n      progress\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n      $dragEl[0].style.width = `${newSize}px`;\n    } else {\n      $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n      $dragEl[0].style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(timeout);\n      $el[0].style.opacity = 1;\n      timeout = setTimeout(() => {\n        $el[0].style.opacity = 0;\n        $el.transition(400);\n      }, 1e3);\n    }\n  }\n  function setTransition2(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    swiper.scrollbar.$dragEl.transition(duration);\n  }\n  function updateSize2() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    $dragEl[0].style.width = \"\";\n    $dragEl[0].style.height = \"\";\n    trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n    if (swiper.params.scrollbar.dragSize === \"auto\") {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n    if (swiper.isHorizontal()) {\n      $dragEl[0].style.width = `${dragSize}px`;\n    } else {\n      $dragEl[0].style.height = `${dragSize}px`;\n    }\n    if (divider >= 1) {\n      $el[0].style.display = \"none\";\n    } else {\n      $el[0].style.display = \"\";\n    }\n    if (swiper.params.scrollbar.hide) {\n      $el[0].style.opacity = 0;\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.$el[swiper.isLocked ? \"addClass\" : \"removeClass\"](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function getPointerPosition(e) {\n    if (swiper.isHorizontal()) {\n      return e.type === \"touchstart\" || e.type === \"touchmove\" ? e.targetTouches[0].clientX : e.clientX;\n    }\n    return e.type === \"touchstart\" || e.type === \"touchmove\" ? e.targetTouches[0].clientY : e.clientY;\n  }\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? \"left\" : \"top\"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? \"left\" : \"top\"] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    $wrapperEl.transition(100);\n    $dragEl.transition(100);\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    $el.transition(0);\n    if (params.hide) {\n      $el.css(\"opacity\", 1);\n    }\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css(\"scroll-snap-type\", \"none\");\n    }\n    emit(\"scrollbarDragStart\", e);\n  }\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    if (!isTouched)\n      return;\n    if (e.preventDefault)\n      e.preventDefault();\n    else\n      e.returnValue = false;\n    setDragPosition(e);\n    $wrapperEl.transition(0);\n    $el.transition(0);\n    $dragEl.transition(0);\n    emit(\"scrollbarDragMove\", e);\n  }\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    if (!isTouched)\n      return;\n    isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css(\"scroll-snap-type\", \"\");\n      $wrapperEl.transition(\"\");\n    }\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        $el.css(\"opacity\", 0);\n        $el.transition(400);\n      }, 1e3);\n    }\n    emit(\"scrollbarDragEnd\", e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n  function events2(method) {\n    const {\n      scrollbar,\n      touchEventsTouch,\n      touchEventsDesktop,\n      params,\n      support: support2\n    } = swiper;\n    const $el = scrollbar.$el;\n    if (!$el)\n      return;\n    const target = $el[0];\n    const activeListener = support2.passiveListener && params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = support2.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target)\n      return;\n    const eventMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n    if (!support2.touch) {\n      target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);\n      document2[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);\n      document2[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);\n    } else {\n      target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);\n      target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);\n      target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);\n    }\n  }\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    events2(\"on\");\n  }\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    events2(\"off\");\n  }\n  function init() {\n    const {\n      scrollbar,\n      $el: $swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: \"swiper-scrollbar\"\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el)\n      return;\n    let $el = dom_default(params.el);\n    if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n      $el = $swiperEl.find(params.el);\n    }\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n    if ($dragEl.length === 0) {\n      $dragEl = dom_default(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n      $el.append($dragEl);\n    }\n    Object.assign(scrollbar, {\n      $el,\n      el: $el[0],\n      $dragEl,\n      dragEl: $dragEl[0]\n    });\n    if (params.draggable) {\n      enableDraggable();\n    }\n    if ($el) {\n      $el[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const $el = swiper.scrollbar.$el;\n    if ($el) {\n      $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n    disableDraggable();\n  }\n  on2(\"init\", () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      disable();\n    } else {\n      init();\n      updateSize2();\n      setTranslate2();\n    }\n  });\n  on2(\"update resize observerUpdate lock unlock\", () => {\n    updateSize2();\n  });\n  on2(\"setTranslate\", () => {\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    setTransition2(duration);\n  });\n  on2(\"enable disable\", () => {\n    const {\n      $el\n    } = swiper.scrollbar;\n    if ($el) {\n      $el[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on2(\"destroy\", () => {\n    destroy();\n  });\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    init();\n    updateSize2();\n    setTranslate2();\n  };\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize: updateSize2,\n    setTranslate: setTranslate2,\n    init,\n    destroy\n  });\n}\n\n// node_modules/swiper/modules/parallax/parallax.js\nfunction Parallax(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    parallax: {\n      enabled: false\n    }\n  });\n  const setTransform = (el, progress) => {\n    const {\n      rtl\n    } = swiper;\n    const $el = dom_default(el);\n    const rtlFactor = rtl ? -1 : 1;\n    const p = $el.attr(\"data-swiper-parallax\") || \"0\";\n    let x = $el.attr(\"data-swiper-parallax-x\");\n    let y = $el.attr(\"data-swiper-parallax-y\");\n    const scale = $el.attr(\"data-swiper-parallax-scale\");\n    const opacity = $el.attr(\"data-swiper-parallax-opacity\");\n    if (x || y) {\n      x = x || \"0\";\n      y = y || \"0\";\n    } else if (swiper.isHorizontal()) {\n      x = p;\n      y = \"0\";\n    } else {\n      y = p;\n      x = \"0\";\n    }\n    if (x.indexOf(\"%\") >= 0) {\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n    } else {\n      x = `${x * progress * rtlFactor}px`;\n    }\n    if (y.indexOf(\"%\") >= 0) {\n      y = `${parseInt(y, 10) * progress}%`;\n    } else {\n      y = `${y * progress}px`;\n    }\n    if (typeof opacity !== \"undefined\" && opacity !== null) {\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n      $el[0].style.opacity = currentOpacity;\n    }\n    if (typeof scale === \"undefined\" || scale === null) {\n      $el.transform(`translate3d(${x}, ${y}, 0px)`);\n    } else {\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n      $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);\n    }\n  };\n  const setTranslate2 = () => {\n    const {\n      $el,\n      slides,\n      progress,\n      snapGrid\n    } = swiper;\n    $el.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((el) => {\n      setTransform(el, progress);\n    });\n    slides.each((slideEl, slideIndex) => {\n      let slideProgress = slideEl.progress;\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== \"auto\") {\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n      }\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n      dom_default(slideEl).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((el) => {\n        setTransform(el, slideProgress);\n      });\n    });\n  };\n  const setTransition2 = function(duration) {\n    if (duration === void 0) {\n      duration = swiper.params.speed;\n    }\n    const {\n      $el\n    } = swiper;\n    $el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((parallaxEl) => {\n      const $parallaxEl = dom_default(parallaxEl);\n      let parallaxDuration = parseInt($parallaxEl.attr(\"data-swiper-parallax-duration\"), 10) || duration;\n      if (duration === 0)\n        parallaxDuration = 0;\n      $parallaxEl.transition(parallaxDuration);\n    });\n  };\n  on2(\"beforeInit\", () => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n  });\n  on2(\"init\", () => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTranslate\", () => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_swiper, duration) => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    setTransition2(duration);\n  });\n}\n\n// node_modules/swiper/modules/zoom/zoom.js\nfunction Zoom(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const window2 = getWindow();\n  extendParams({\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: \"swiper-zoom-container\",\n      zoomedSlideClass: \"swiper-slide-zoomed\"\n    }\n  });\n  swiper.zoom = {\n    enabled: false\n  };\n  let currentScale = 1;\n  let isScaling = false;\n  let gesturesEnabled;\n  let fakeGestureTouched;\n  let fakeGestureMoved;\n  const gesture = {\n    $slideEl: void 0,\n    slideWidth: void 0,\n    slideHeight: void 0,\n    $imageEl: void 0,\n    $imageWrapEl: void 0,\n    maxRatio: 3\n  };\n  const image = {\n    isTouched: void 0,\n    isMoved: void 0,\n    currentX: void 0,\n    currentY: void 0,\n    minX: void 0,\n    minY: void 0,\n    maxX: void 0,\n    maxY: void 0,\n    width: void 0,\n    height: void 0,\n    startX: void 0,\n    startY: void 0,\n    touchesStart: {},\n    touchesCurrent: {}\n  };\n  const velocity = {\n    x: void 0,\n    y: void 0,\n    prevPositionX: void 0,\n    prevPositionY: void 0,\n    prevTime: void 0\n  };\n  let scale = 1;\n  Object.defineProperty(swiper.zoom, \"scale\", {\n    get() {\n      return scale;\n    },\n    set(value) {\n      if (scale !== value) {\n        const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : void 0;\n        const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : void 0;\n        emit(\"zoomChange\", value, imageEl, slideEl);\n      }\n      scale = value;\n    }\n  });\n  function getDistanceBetweenTouches(e) {\n    if (e.targetTouches.length < 2)\n      return 1;\n    const x1 = e.targetTouches[0].pageX;\n    const y1 = e.targetTouches[0].pageY;\n    const x2 = e.targetTouches[1].pageX;\n    const y2 = e.targetTouches[1].pageY;\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n    return distance;\n  }\n  function onGestureStart(e) {\n    const support2 = swiper.support;\n    const params = swiper.params.zoom;\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n    if (!support2.gestures) {\n      if (e.type !== \"touchstart\" || e.type === \"touchstart\" && e.targetTouches.length < 2) {\n        return;\n      }\n      fakeGestureTouched = true;\n      gesture.scaleStart = getDistanceBetweenTouches(e);\n    }\n    if (!gesture.$slideEl || !gesture.$slideEl.length) {\n      gesture.$slideEl = dom_default(e.target).closest(`.${swiper.params.slideClass}`);\n      if (gesture.$slideEl.length === 0)\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find(\"picture, img, svg, canvas, .swiper-zoom-target\").eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      gesture.maxRatio = gesture.$imageWrapEl.attr(\"data-swiper-zoom\") || params.maxRatio;\n      if (gesture.$imageWrapEl.length === 0) {\n        gesture.$imageEl = void 0;\n        return;\n      }\n    }\n    if (gesture.$imageEl) {\n      gesture.$imageEl.transition(0);\n    }\n    isScaling = true;\n  }\n  function onGestureChange(e) {\n    const support2 = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    if (!support2.gestures) {\n      if (e.type !== \"touchmove\" || e.type === \"touchmove\" && e.targetTouches.length < 2) {\n        return;\n      }\n      fakeGestureMoved = true;\n      gesture.scaleMove = getDistanceBetweenTouches(e);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n      if (e.type === \"gesturechange\")\n        onGestureStart(e);\n      return;\n    }\n    if (support2.gestures) {\n      zoom.scale = e.scale * currentScale;\n    } else {\n      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n    }\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n    }\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n    }\n    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n  function onGestureEnd(e) {\n    const device = swiper.device;\n    const support2 = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    if (!support2.gestures) {\n      if (!fakeGestureTouched || !fakeGestureMoved) {\n        return;\n      }\n      if (e.type !== \"touchend\" || e.type === \"touchend\" && e.changedTouches.length < 2 && !device.android) {\n        return;\n      }\n      fakeGestureTouched = false;\n      fakeGestureMoved = false;\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    currentScale = zoom.scale;\n    isScaling = false;\n    if (zoom.scale === 1)\n      gesture.$slideEl = void 0;\n  }\n  function onTouchStart2(e) {\n    const device = swiper.device;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    if (image.isTouched)\n      return;\n    if (device.android && e.cancelable)\n      e.preventDefault();\n    image.isTouched = true;\n    image.touchesStart.x = e.type === \"touchstart\" ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesStart.y = e.type === \"touchstart\" ? e.targetTouches[0].pageY : e.pageY;\n  }\n  function onTouchMove2(e) {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    swiper.allowClick = false;\n    if (!image.isTouched || !gesture.$slideEl)\n      return;\n    if (!image.isMoved) {\n      image.width = gesture.$imageEl[0].offsetWidth;\n      image.height = gesture.$imageEl[0].offsetHeight;\n      image.startX = getTranslate(gesture.$imageWrapEl[0], \"x\") || 0;\n      image.startY = getTranslate(gesture.$imageWrapEl[0], \"y\") || 0;\n      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n      gesture.$imageWrapEl.transition(0);\n    }\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight)\n      return;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.touchesCurrent.x = e.type === \"touchmove\" ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesCurrent.y = e.type === \"touchmove\" ? e.targetTouches[0].pageY : e.pageY;\n    if (!image.isMoved && !isScaling) {\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n        image.isTouched = false;\n        return;\n      }\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n        image.isTouched = false;\n        return;\n      }\n    }\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n    e.stopPropagation();\n    image.isMoved = true;\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n    if (image.currentX < image.minX) {\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n    }\n    if (image.currentX > image.maxX) {\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n    }\n    if (image.currentY < image.minY) {\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n    }\n    if (image.currentY > image.maxY) {\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n    }\n    if (!velocity.prevPositionX)\n      velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY)\n      velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime)\n      velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2)\n      velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2)\n      velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n  function onTouchEnd2() {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY;\n    if (velocity.x !== 0)\n      momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0)\n      momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n    image.currentX = newPositionX;\n    image.currentY = newPositionY;\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n  function onTransitionEnd() {\n    const zoom = swiper.zoom;\n    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transform(\"translate3d(0,0,0) scale(1)\");\n      }\n      if (gesture.$imageWrapEl) {\n        gesture.$imageWrapEl.transform(\"translate3d(0,0,0)\");\n      }\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.$slideEl = void 0;\n      gesture.$imageEl = void 0;\n      gesture.$imageWrapEl = void 0;\n    }\n  }\n  function zoomIn(e) {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    if (!gesture.$slideEl) {\n      if (e && e.target) {\n        gesture.$slideEl = dom_default(e.target).closest(`.${swiper.params.slideClass}`);\n      }\n      if (!gesture.$slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n        } else {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        }\n      }\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find(\"picture, img, svg, canvas, .swiper-zoom-target\").eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0)\n      return;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = \"hidden\";\n      swiper.wrapperEl.style.touchAction = \"none\";\n    }\n    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n    if (typeof image.touchesStart.x === \"undefined\" && e) {\n      touchX = e.type === \"touchend\" ? e.changedTouches[0].pageX : e.pageX;\n      touchY = e.type === \"touchend\" ? e.changedTouches[0].pageY : e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n    zoom.scale = gesture.$imageWrapEl.attr(\"data-swiper-zoom\") || params.maxRatio;\n    currentScale = gesture.$imageWrapEl.attr(\"data-swiper-zoom\") || params.maxRatio;\n    if (e) {\n      slideWidth = gesture.$slideEl[0].offsetWidth;\n      slideHeight = gesture.$slideEl[0].offsetHeight;\n      offsetX = gesture.$slideEl.offset().left + window2.scrollX;\n      offsetY = gesture.$slideEl.offset().top + window2.scrollY;\n      diffX = offsetX + slideWidth / 2 - touchX;\n      diffY = offsetY + slideHeight / 2 - touchY;\n      imageWidth = gesture.$imageEl[0].offsetWidth;\n      imageHeight = gesture.$imageEl[0].offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n  function zoomOut() {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find(\"picture, img, svg, canvas, .swiper-zoom-target\").eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0)\n      return;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = \"\";\n      swiper.wrapperEl.style.touchAction = \"\";\n    }\n    zoom.scale = 1;\n    currentScale = 1;\n    gesture.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\");\n    gesture.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\");\n    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n    gesture.$slideEl = void 0;\n  }\n  function zoomToggle(e) {\n    const zoom = swiper.zoom;\n    if (zoom.scale && zoom.scale !== 1) {\n      zoomOut();\n    } else {\n      zoomIn(e);\n    }\n  }\n  function getListeners() {\n    const support2 = swiper.support;\n    const passiveListener = swiper.touchEvents.start === \"touchstart\" && support2.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    const activeListenerWithCapture = support2.passiveListener ? {\n      passive: false,\n      capture: true\n    } : true;\n    return {\n      passiveListener,\n      activeListenerWithCapture\n    };\n  }\n  function getSlideSelector() {\n    return `.${swiper.params.slideClass}`;\n  }\n  function toggleGestures(method) {\n    const {\n      passiveListener\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    swiper.$wrapperEl[method](\"gesturestart\", slideSelector, onGestureStart, passiveListener);\n    swiper.$wrapperEl[method](\"gesturechange\", slideSelector, onGestureChange, passiveListener);\n    swiper.$wrapperEl[method](\"gestureend\", slideSelector, onGestureEnd, passiveListener);\n  }\n  function enableGestures() {\n    if (gesturesEnabled)\n      return;\n    gesturesEnabled = true;\n    toggleGestures(\"on\");\n  }\n  function disableGestures() {\n    if (!gesturesEnabled)\n      return;\n    gesturesEnabled = false;\n    toggleGestures(\"off\");\n  }\n  function enable() {\n    const zoom = swiper.zoom;\n    if (zoom.enabled)\n      return;\n    zoom.enabled = true;\n    const support2 = swiper.support;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    if (support2.gestures) {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === \"touchstart\") {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    }\n    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove2, activeListenerWithCapture);\n  }\n  function disable() {\n    const zoom = swiper.zoom;\n    if (!zoom.enabled)\n      return;\n    const support2 = swiper.support;\n    zoom.enabled = false;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    if (support2.gestures) {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === \"touchstart\") {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    }\n    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove2, activeListenerWithCapture);\n  }\n  on2(\"init\", () => {\n    if (swiper.params.zoom.enabled) {\n      enable();\n    }\n  });\n  on2(\"destroy\", () => {\n    disable();\n  });\n  on2(\"touchStart\", (_s, e) => {\n    if (!swiper.zoom.enabled)\n      return;\n    onTouchStart2(e);\n  });\n  on2(\"touchEnd\", (_s, e) => {\n    if (!swiper.zoom.enabled)\n      return;\n    onTouchEnd2(e);\n  });\n  on2(\"doubleTap\", (_s, e) => {\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n      zoomToggle(e);\n    }\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n      onTransitionEnd();\n    }\n  });\n  on2(\"slideChange\", () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n      onTransitionEnd();\n    }\n  });\n  Object.assign(swiper.zoom, {\n    enable,\n    disable,\n    in: zoomIn,\n    out: zoomOut,\n    toggle: zoomToggle\n  });\n}\n\n// node_modules/swiper/modules/lazy/lazy.js\nfunction Lazy(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  extendParams({\n    lazy: {\n      checkInView: false,\n      enabled: false,\n      loadPrevNext: false,\n      loadPrevNextAmount: 1,\n      loadOnTransitionStart: false,\n      scrollingElement: \"\",\n      elementClass: \"swiper-lazy\",\n      loadingClass: \"swiper-lazy-loading\",\n      loadedClass: \"swiper-lazy-loaded\",\n      preloaderClass: \"swiper-lazy-preloader\"\n    }\n  });\n  swiper.lazy = {};\n  let scrollHandlerAttached = false;\n  let initialImageLoaded = false;\n  function loadInSlide(index2, loadInDuplicate) {\n    if (loadInDuplicate === void 0) {\n      loadInDuplicate = true;\n    }\n    const params = swiper.params.lazy;\n    if (typeof index2 === \"undefined\")\n      return;\n    if (swiper.slides.length === 0)\n      return;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${index2}\"]`) : swiper.slides.eq(index2);\n    const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);\n    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n      $images.push($slideEl[0]);\n    }\n    if ($images.length === 0)\n      return;\n    $images.each((imageEl) => {\n      const $imageEl = dom_default(imageEl);\n      $imageEl.addClass(params.loadingClass);\n      const background = $imageEl.attr(\"data-background\");\n      const src = $imageEl.attr(\"data-src\");\n      const srcset = $imageEl.attr(\"data-srcset\");\n      const sizes = $imageEl.attr(\"data-sizes\");\n      const $pictureEl = $imageEl.parent(\"picture\");\n      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {\n        if (typeof swiper === \"undefined\" || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed)\n          return;\n        if (background) {\n          $imageEl.css(\"background-image\", `url(\"${background}\")`);\n          $imageEl.removeAttr(\"data-background\");\n        } else {\n          if (srcset) {\n            $imageEl.attr(\"srcset\", srcset);\n            $imageEl.removeAttr(\"data-srcset\");\n          }\n          if (sizes) {\n            $imageEl.attr(\"sizes\", sizes);\n            $imageEl.removeAttr(\"data-sizes\");\n          }\n          if ($pictureEl.length) {\n            $pictureEl.children(\"source\").each((sourceEl) => {\n              const $source = dom_default(sourceEl);\n              if ($source.attr(\"data-srcset\")) {\n                $source.attr(\"srcset\", $source.attr(\"data-srcset\"));\n                $source.removeAttr(\"data-srcset\");\n              }\n            });\n          }\n          if (src) {\n            $imageEl.attr(\"src\", src);\n            $imageEl.removeAttr(\"data-src\");\n          }\n        }\n        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n        $slideEl.find(`.${params.preloaderClass}`).remove();\n        if (swiper.params.loop && loadInDuplicate) {\n          const slideOriginalIndex = $slideEl.attr(\"data-swiper-slide-index\");\n          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n            const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index=\"${slideOriginalIndex}\"]:not(.${swiper.params.slideDuplicateClass})`);\n            loadInSlide(originalSlide.index(), false);\n          } else {\n            const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index=\"${slideOriginalIndex}\"]`);\n            loadInSlide(duplicatedSlide.index(), false);\n          }\n        }\n        emit(\"lazyImageReady\", $slideEl[0], $imageEl[0]);\n        if (swiper.params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n      });\n      emit(\"lazyImageLoad\", $slideEl[0], $imageEl[0]);\n    });\n  }\n  function load() {\n    const {\n      $wrapperEl,\n      params: swiperParams,\n      slides,\n      activeIndex\n    } = swiper;\n    const isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n    const params = swiperParams.lazy;\n    let slidesPerView = swiperParams.slidesPerView;\n    if (slidesPerView === \"auto\") {\n      slidesPerView = 0;\n    }\n    function slideExist(index2) {\n      if (isVirtual) {\n        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index=\"${index2}\"]`).length) {\n          return true;\n        }\n      } else if (slides[index2])\n        return true;\n      return false;\n    }\n    function slideIndex(slideEl) {\n      if (isVirtual) {\n        return dom_default(slideEl).attr(\"data-swiper-slide-index\");\n      }\n      return dom_default(slideEl).index();\n    }\n    if (!initialImageLoaded)\n      initialImageLoaded = true;\n    if (swiper.params.watchSlidesProgress) {\n      $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each((slideEl) => {\n        const index2 = isVirtual ? dom_default(slideEl).attr(\"data-swiper-slide-index\") : dom_default(slideEl).index();\n        loadInSlide(index2);\n      });\n    } else if (slidesPerView > 1) {\n      for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n        if (slideExist(i))\n          loadInSlide(i);\n      }\n    } else {\n      loadInSlide(activeIndex);\n    }\n    if (params.loadPrevNext) {\n      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n        const amount = params.loadPrevNextAmount;\n        const spv = Math.ceil(slidesPerView);\n        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);\n        for (let i = activeIndex + spv; i < maxIndex; i += 1) {\n          if (slideExist(i))\n            loadInSlide(i);\n        }\n        for (let i = minIndex; i < activeIndex; i += 1) {\n          if (slideExist(i))\n            loadInSlide(i);\n        }\n      } else {\n        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);\n        if (nextSlide.length > 0)\n          loadInSlide(slideIndex(nextSlide));\n        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);\n        if (prevSlide.length > 0)\n          loadInSlide(slideIndex(prevSlide));\n      }\n    }\n  }\n  function checkInViewOnLoad() {\n    const window2 = getWindow();\n    if (!swiper || swiper.destroyed)\n      return;\n    const $scrollElement = swiper.params.lazy.scrollingElement ? dom_default(swiper.params.lazy.scrollingElement) : dom_default(window2);\n    const isWindow = $scrollElement[0] === window2;\n    const scrollElementWidth = isWindow ? window2.innerWidth : $scrollElement[0].offsetWidth;\n    const scrollElementHeight = isWindow ? window2.innerHeight : $scrollElement[0].offsetHeight;\n    const swiperOffset = swiper.$el.offset();\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let inView = false;\n    if (rtl)\n      swiperOffset.left -= swiper.$el[0].scrollLeft;\n    const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n    for (let i = 0; i < swiperCoord.length; i += 1) {\n      const point = swiperCoord[i];\n      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {\n        if (point[0] === 0 && point[1] === 0)\n          continue;\n        inView = true;\n      }\n    }\n    const passiveListener = swiper.touchEvents.start === \"touchstart\" && swiper.support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (inView) {\n      load();\n      $scrollElement.off(\"scroll\", checkInViewOnLoad, passiveListener);\n    } else if (!scrollHandlerAttached) {\n      scrollHandlerAttached = true;\n      $scrollElement.on(\"scroll\", checkInViewOnLoad, passiveListener);\n    }\n  }\n  on2(\"beforeInit\", () => {\n    if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n      swiper.params.preloadImages = false;\n    }\n  });\n  on2(\"init\", () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on2(\"scroll\", () => {\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {\n      load();\n    }\n  });\n  on2(\"scrollbarDragMove resize _freeModeNoMomentumRelease\", () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on2(\"transitionStart\", () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    }\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on2(\"slideChange\", () => {\n    const {\n      lazy,\n      cssMode,\n      watchSlidesProgress,\n      touchReleaseOnEdges,\n      resistanceRatio\n    } = swiper.params;\n    if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {\n      load();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (!swiper.$el)\n      return;\n    swiper.$el.find(`.${swiper.params.lazy.loadingClass}`).removeClass(swiper.params.lazy.loadingClass);\n  });\n  Object.assign(swiper.lazy, {\n    load,\n    loadInSlide\n  });\n}\n\n// node_modules/swiper/modules/controller/controller.js\nfunction Controller(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    controller: {\n      control: void 0,\n      inverse: false,\n      by: \"slide\"\n    }\n  });\n  swiper.controller = {\n    control: void 0\n  };\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n        return maxIndex;\n      };\n    }();\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1;\n    let i1;\n    let i3;\n    this.interpolate = function interpolate(x2) {\n      if (!x2)\n        return 0;\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1;\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n    return this;\n  }\n  function getInterpolateFunction(c) {\n    if (!swiper.controller.spline) {\n      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n  }\n  function setTranslate2(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper2 = swiper.constructor;\n    function setControlledTranslate(c) {\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n      if (swiper.params.controller.by === \"slide\") {\n        getInterpolateFunction(c);\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n      if (!controlledTranslate || swiper.params.controller.by === \"container\") {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper2) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper2 && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n  function setTransition2(duration, byController) {\n    const Swiper2 = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n    function setControlledTransition(c) {\n      c.setTransition(duration, swiper);\n      if (duration !== 0) {\n        c.transitionStart();\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n        c.$wrapperEl.transitionEnd(() => {\n          if (!controlled)\n            return;\n          if (c.params.loop && swiper.params.controller.by === \"slide\") {\n            c.loopFix();\n          }\n          c.transitionEnd();\n        });\n      }\n    }\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper2) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper2 && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n  function removeSpline() {\n    if (!swiper.controller.control)\n      return;\n    if (swiper.controller.spline) {\n      swiper.controller.spline = void 0;\n      delete swiper.controller.spline;\n    }\n  }\n  on2(\"beforeInit\", () => {\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on2(\"update\", () => {\n    removeSpline();\n  });\n  on2(\"resize\", () => {\n    removeSpline();\n  });\n  on2(\"observerUpdate\", () => {\n    removeSpline();\n  });\n  on2(\"setTranslate\", (_s, translate, byController) => {\n    if (!swiper.controller.control)\n      return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on2(\"setTransition\", (_s, duration, byController) => {\n    if (!swiper.controller.control)\n      return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate: setTranslate2,\n    setTransition: setTransition2\n  });\n}\n\n// node_modules/swiper/modules/a11y/a11y.js\nfunction A11y(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    a11y: {\n      enabled: true,\n      notificationClass: \"swiper-notification\",\n      prevSlideMessage: \"Previous slide\",\n      nextSlideMessage: \"Next slide\",\n      firstSlideMessage: \"This is the first slide\",\n      lastSlideMessage: \"This is the last slide\",\n      paginationBulletMessage: \"Go to slide {{index}}\",\n      slideLabelMessage: \"{{index}} / {{slidesLength}}\",\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: \"group\",\n      id: null\n    }\n  });\n  let liveRegion = null;\n  function notify(message) {\n    const notification = liveRegion;\n    if (notification.length === 0)\n      return;\n    notification.html(\"\");\n    notification.html(message);\n  }\n  function getRandomNumber(size) {\n    if (size === void 0) {\n      size = 16;\n    }\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\n    return \"x\".repeat(size).replace(/x/g, randomChar);\n  }\n  function makeElFocusable($el) {\n    $el.attr(\"tabIndex\", \"0\");\n  }\n  function makeElNotFocusable($el) {\n    $el.attr(\"tabIndex\", \"-1\");\n  }\n  function addElRole($el, role) {\n    $el.attr(\"role\", role);\n  }\n  function addElRoleDescription($el, description) {\n    $el.attr(\"aria-roledescription\", description);\n  }\n  function addElControls($el, controls) {\n    $el.attr(\"aria-controls\", controls);\n  }\n  function addElLabel($el, label) {\n    $el.attr(\"aria-label\", label);\n  }\n  function addElId($el, id) {\n    $el.attr(\"id\", id);\n  }\n  function addElLive($el, live) {\n    $el.attr(\"aria-live\", live);\n  }\n  function disableEl($el) {\n    $el.attr(\"aria-disabled\", true);\n  }\n  function enableEl($el) {\n    $el.attr(\"aria-disabled\", false);\n  }\n  function onEnterOrSpaceKey(e) {\n    if (e.keyCode !== 13 && e.keyCode !== 32)\n      return;\n    const params = swiper.params.a11y;\n    const $targetEl = dom_default(e.target);\n    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n      if (!(swiper.isEnd && !swiper.params.loop)) {\n        swiper.slideNext();\n      }\n      if (swiper.isEnd) {\n        notify(params.lastSlideMessage);\n      } else {\n        notify(params.nextSlideMessage);\n      }\n    }\n    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n      if (!(swiper.isBeginning && !swiper.params.loop)) {\n        swiper.slidePrev();\n      }\n      if (swiper.isBeginning) {\n        notify(params.firstSlideMessage);\n      } else {\n        notify(params.prevSlideMessage);\n      }\n    }\n    if (swiper.pagination && $targetEl.is(classesToSelector(swiper.params.pagination.bulletClass))) {\n      $targetEl[0].click();\n    }\n  }\n  function updateNavigation() {\n    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation)\n      return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    if ($prevEl && $prevEl.length > 0) {\n      if (swiper.isBeginning) {\n        disableEl($prevEl);\n        makeElNotFocusable($prevEl);\n      } else {\n        enableEl($prevEl);\n        makeElFocusable($prevEl);\n      }\n    }\n    if ($nextEl && $nextEl.length > 0) {\n      if (swiper.isEnd) {\n        disableEl($nextEl);\n        makeElNotFocusable($nextEl);\n      } else {\n        enableEl($nextEl);\n        makeElFocusable($nextEl);\n      }\n    }\n  }\n  function hasPagination() {\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n  }\n  function hasClickablePagination() {\n    return hasPagination() && swiper.params.pagination.clickable;\n  }\n  function updatePagination() {\n    const params = swiper.params.a11y;\n    if (!hasPagination())\n      return;\n    swiper.pagination.bullets.each((bulletEl) => {\n      const $bulletEl = dom_default(bulletEl);\n      if (swiper.params.pagination.clickable) {\n        makeElFocusable($bulletEl);\n        if (!swiper.params.pagination.renderBullet) {\n          addElRole($bulletEl, \"button\");\n          addElLabel($bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, $bulletEl.index() + 1));\n        }\n      }\n      if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {\n        $bulletEl.attr(\"aria-current\", \"true\");\n      } else {\n        $bulletEl.removeAttr(\"aria-current\");\n      }\n    });\n  }\n  const initNavEl = ($el, wrapperId, message) => {\n    makeElFocusable($el);\n    if ($el[0].tagName !== \"BUTTON\") {\n      addElRole($el, \"button\");\n      $el.on(\"keydown\", onEnterOrSpaceKey);\n    }\n    addElLabel($el, message);\n    addElControls($el, wrapperId);\n  };\n  const handleFocus = (e) => {\n    const slideEl = e.target.closest(`.${swiper.params.slideClass}`);\n    if (!slideEl || !swiper.slides.includes(slideEl))\n      return;\n    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n    if (isActive || isVisible)\n      return;\n    if (swiper.isHorizontal()) {\n      swiper.el.scrollLeft = 0;\n    } else {\n      swiper.el.scrollTop = 0;\n    }\n    swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n  };\n  const initSlides = () => {\n    const params = swiper.params.a11y;\n    if (params.itemRoleDescriptionMessage) {\n      addElRoleDescription(dom_default(swiper.slides), params.itemRoleDescriptionMessage);\n    }\n    if (params.slideRole) {\n      addElRole(dom_default(swiper.slides), params.slideRole);\n    }\n    const slidesLength = swiper.params.loop ? swiper.slides.filter((el) => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;\n    if (params.slideLabelMessage) {\n      swiper.slides.each((slideEl, index2) => {\n        const $slideEl = dom_default(slideEl);\n        const slideIndex = swiper.params.loop ? parseInt($slideEl.attr(\"data-swiper-slide-index\"), 10) : index2;\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n        addElLabel($slideEl, ariaLabelMessage);\n      });\n    }\n  };\n  const init = () => {\n    const params = swiper.params.a11y;\n    swiper.$el.append(liveRegion);\n    const $containerEl = swiper.$el;\n    if (params.containerRoleDescriptionMessage) {\n      addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);\n    }\n    if (params.containerMessage) {\n      addElLabel($containerEl, params.containerMessage);\n    }\n    const $wrapperEl = swiper.$wrapperEl;\n    const wrapperId = params.id || $wrapperEl.attr(\"id\") || `swiper-wrapper-${getRandomNumber(16)}`;\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? \"off\" : \"polite\";\n    addElId($wrapperEl, wrapperId);\n    addElLive($wrapperEl, live);\n    initSlides();\n    let $nextEl;\n    let $prevEl;\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n    if ($nextEl && $nextEl.length) {\n      initNavEl($nextEl, wrapperId, params.nextSlideMessage);\n    }\n    if ($prevEl && $prevEl.length) {\n      initNavEl($prevEl, wrapperId, params.prevSlideMessage);\n    }\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.on(\"keydown\", classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    }\n    swiper.$el.on(\"focus\", handleFocus, true);\n  };\n  function destroy() {\n    if (liveRegion && liveRegion.length > 0)\n      liveRegion.remove();\n    let $nextEl;\n    let $prevEl;\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n    if ($nextEl) {\n      $nextEl.off(\"keydown\", onEnterOrSpaceKey);\n    }\n    if ($prevEl) {\n      $prevEl.off(\"keydown\", onEnterOrSpaceKey);\n    }\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.off(\"keydown\", classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    }\n    swiper.$el.off(\"focus\", handleFocus, true);\n  }\n  on2(\"beforeInit\", () => {\n    liveRegion = dom_default(`<span class=\"${swiper.params.a11y.notificationClass}\" aria-live=\"assertive\" aria-atomic=\"true\"></span>`);\n  });\n  on2(\"afterInit\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    init();\n  });\n  on2(\"slidesLengthChange snapGridLengthChange slidesGridLengthChange\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    initSlides();\n  });\n  on2(\"fromEdge toEdge afterInit lock unlock\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    updateNavigation();\n  });\n  on2(\"paginationUpdate\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    updatePagination();\n  });\n  on2(\"destroy\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    destroy();\n  });\n}\n\n// node_modules/swiper/modules/history/history.js\nfunction History(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    history: {\n      enabled: false,\n      root: \"\",\n      replaceState: false,\n      key: \"slides\",\n      keepQuery: false\n    }\n  });\n  let initialized = false;\n  let paths = {};\n  const slugify = (text2) => {\n    return text2.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n  };\n  const getPathValues = (urlOverride) => {\n    const window2 = getWindow();\n    let location;\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window2.location;\n    }\n    const pathArray = location.pathname.slice(1).split(\"/\").filter((part) => part !== \"\");\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n  const setHistory = (key, index2) => {\n    const window2 = getWindow();\n    if (!initialized || !swiper.params.history.enabled)\n      return;\n    let location;\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window2.location;\n    }\n    const slide = swiper.slides.eq(index2);\n    let value = slugify(slide.attr(\"data-history\"));\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === \"/\")\n        root = root.slice(0, root.length - 1);\n      value = `${root}/${key}/${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key}/${value}`;\n    }\n    if (swiper.params.history.keepQuery) {\n      value += location.search;\n    }\n    const currentState = window2.history.state;\n    if (currentState && currentState.value === value) {\n      return;\n    }\n    if (swiper.params.history.replaceState) {\n      window2.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window2.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHistory = slugify(slide.attr(\"data-history\"));\n        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index2 = slide.index();\n          swiper.slideTo(index2, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, paths.value, false);\n  };\n  const init = () => {\n    const window2 = getWindow();\n    if (!swiper.params.history)\n      return;\n    if (!window2.history || !window2.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value)\n      return;\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n    if (!swiper.params.history.replaceState) {\n      window2.addEventListener(\"popstate\", setHistoryPopState);\n    }\n  };\n  const destroy = () => {\n    const window2 = getWindow();\n    if (!swiper.params.history.replaceState) {\n      window2.removeEventListener(\"popstate\", setHistoryPopState);\n    }\n  };\n  on2(\"init\", () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on2(\"transitionEnd _freeModeNoMomentumRelease\", () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on2(\"slideChange\", () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}\n\n// node_modules/swiper/modules/hash-navigation/hash-navigation.js\nfunction HashNavigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    on: on2\n  } = _ref;\n  let initialized = false;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  extendParams({\n    hashNavigation: {\n      enabled: false,\n      replaceState: false,\n      watchState: false\n    }\n  });\n  const onHashChange = () => {\n    emit(\"hashChange\");\n    const newHash = document2.location.hash.replace(\"#\", \"\");\n    const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr(\"data-hash\");\n    if (newHash !== activeSlideHash) {\n      const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash=\"${newHash}\"]`).index();\n      if (typeof newIndex === \"undefined\")\n        return;\n      swiper.slideTo(newIndex);\n    }\n  };\n  const setHash = () => {\n    if (!initialized || !swiper.params.hashNavigation.enabled)\n      return;\n    if (swiper.params.hashNavigation.replaceState && window2.history && window2.history.replaceState) {\n      window2.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr(\"data-hash\")}` || \"\");\n      emit(\"hashSet\");\n    } else {\n      const slide = swiper.slides.eq(swiper.activeIndex);\n      const hash = slide.attr(\"data-hash\") || slide.attr(\"data-history\");\n      document2.location.hash = hash || \"\";\n      emit(\"hashSet\");\n    }\n  };\n  const init = () => {\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled)\n      return;\n    initialized = true;\n    const hash = document2.location.hash.replace(\"#\", \"\");\n    if (hash) {\n      const speed = 0;\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHash = slide.attr(\"data-hash\") || slide.attr(\"data-history\");\n        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index2 = slide.index();\n          swiper.slideTo(index2, speed, swiper.params.runCallbacksOnInit, true);\n        }\n      }\n    }\n    if (swiper.params.hashNavigation.watchState) {\n      dom_default(window2).on(\"hashchange\", onHashChange);\n    }\n  };\n  const destroy = () => {\n    if (swiper.params.hashNavigation.watchState) {\n      dom_default(window2).off(\"hashchange\", onHashChange);\n    }\n  };\n  on2(\"init\", () => {\n    if (swiper.params.hashNavigation.enabled) {\n      init();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (swiper.params.hashNavigation.enabled) {\n      destroy();\n    }\n  });\n  on2(\"transitionEnd _freeModeNoMomentumRelease\", () => {\n    if (initialized) {\n      setHash();\n    }\n  });\n  on2(\"slideChange\", () => {\n    if (initialized && swiper.params.cssMode) {\n      setHash();\n    }\n  });\n}\n\n// node_modules/swiper/modules/autoplay/autoplay.js\nfunction Autoplay(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  let timeout;\n  swiper.autoplay = {\n    running: false,\n    paused: false\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3e3,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n  function run() {\n    if (!swiper.size) {\n      swiper.autoplay.running = false;\n      swiper.autoplay.paused = false;\n      return;\n    }\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n    if ($activeSlideEl.attr(\"data-swiper-autoplay\")) {\n      delay = $activeSlideEl.attr(\"data-swiper-autoplay\") || swiper.params.autoplay.delay;\n    }\n    clearTimeout(timeout);\n    timeout = nextTick(() => {\n      let autoplayResult;\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else if (!swiper.isBeginning) {\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else {\n          stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else if (!swiper.isEnd) {\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else {\n        stop();\n      }\n      if (swiper.params.cssMode && swiper.autoplay.running)\n        run();\n      else if (autoplayResult === false) {\n        run();\n      }\n    }, delay);\n  }\n  function start() {\n    if (typeof timeout !== \"undefined\")\n      return false;\n    if (swiper.autoplay.running)\n      return false;\n    swiper.autoplay.running = true;\n    emit(\"autoplayStart\");\n    run();\n    return true;\n  }\n  function stop() {\n    if (!swiper.autoplay.running)\n      return false;\n    if (typeof timeout === \"undefined\")\n      return false;\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = void 0;\n    }\n    swiper.autoplay.running = false;\n    emit(\"autoplayStop\");\n    return true;\n  }\n  function pause(speed) {\n    if (!swiper.autoplay.running)\n      return;\n    if (swiper.autoplay.paused)\n      return;\n    if (timeout)\n      clearTimeout(timeout);\n    swiper.autoplay.paused = true;\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      run();\n    } else {\n      [\"transitionend\", \"webkitTransitionEnd\"].forEach((event2) => {\n        swiper.$wrapperEl[0].addEventListener(event2, onTransitionEnd);\n      });\n    }\n  }\n  function onVisibilityChange() {\n    const document2 = getDocument();\n    if (document2.visibilityState === \"hidden\" && swiper.autoplay.running) {\n      pause();\n    }\n    if (document2.visibilityState === \"visible\" && swiper.autoplay.paused) {\n      run();\n      swiper.autoplay.paused = false;\n    }\n  }\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.$wrapperEl)\n      return;\n    if (e.target !== swiper.$wrapperEl[0])\n      return;\n    [\"transitionend\", \"webkitTransitionEnd\"].forEach((event2) => {\n      swiper.$wrapperEl[0].removeEventListener(event2, onTransitionEnd);\n    });\n    swiper.autoplay.paused = false;\n    if (!swiper.autoplay.running) {\n      stop();\n    } else {\n      run();\n    }\n  }\n  function onMouseEnter() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n    } else {\n      emit(\"autoplayPause\");\n      pause();\n    }\n    [\"transitionend\", \"webkitTransitionEnd\"].forEach((event2) => {\n      swiper.$wrapperEl[0].removeEventListener(event2, onTransitionEnd);\n    });\n  }\n  function onMouseLeave() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      return;\n    }\n    swiper.autoplay.paused = false;\n    emit(\"autoplayResume\");\n    run();\n  }\n  function attachMouseEvents() {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.$el.on(\"mouseenter\", onMouseEnter);\n      swiper.$el.on(\"mouseleave\", onMouseLeave);\n    }\n  }\n  function detachMouseEvents() {\n    swiper.$el.off(\"mouseenter\", onMouseEnter);\n    swiper.$el.off(\"mouseleave\", onMouseLeave);\n  }\n  on2(\"init\", () => {\n    if (swiper.params.autoplay.enabled) {\n      start();\n      const document2 = getDocument();\n      document2.addEventListener(\"visibilitychange\", onVisibilityChange);\n      attachMouseEvents();\n    }\n  });\n  on2(\"beforeTransitionStart\", (_s, speed, internal) => {\n    if (swiper.autoplay.running) {\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.pause(speed);\n      } else {\n        stop();\n      }\n    }\n  });\n  on2(\"sliderFirstMove\", () => {\n    if (swiper.autoplay.running) {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        pause();\n      }\n    }\n  });\n  on2(\"touchEnd\", () => {\n    if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n      run();\n    }\n  });\n  on2(\"destroy\", () => {\n    detachMouseEvents();\n    if (swiper.autoplay.running) {\n      stop();\n    }\n    const document2 = getDocument();\n    document2.removeEventListener(\"visibilitychange\", onVisibilityChange);\n  });\n  Object.assign(swiper.autoplay, {\n    pause,\n    run,\n    start,\n    stop\n  });\n}\n\n// node_modules/swiper/modules/thumbs/thumbs.js\nfunction Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: \"swiper-slide-thumb-active\",\n      thumbsContainerClass: \"swiper-thumbs\"\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && dom_default(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass))\n      return;\n    if (typeof clickedIndex === \"undefined\" || clickedIndex === null)\n      return;\n    let slideToIndex;\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt(dom_default(thumbsSwiper.clickedSlide).attr(\"data-swiper-slide-index\"), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix();\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === \"undefined\")\n        slideToIndex = nextIndex;\n      else if (typeof nextIndex === \"undefined\")\n        slideToIndex = prevIndex;\n      else if (nextIndex - currentIndex < currentIndex - prevIndex)\n        slideToIndex = nextIndex;\n      else\n        slideToIndex = prevIndex;\n    }\n    swiper.slideTo(slideToIndex);\n  }\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized)\n      return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject2(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on(\"tap\", onThumbClick);\n    return true;\n  }\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === \"auto\" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix();\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        }\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        if (typeof prevThumbsIndex === \"undefined\") {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === \"undefined\") {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n        direction = swiper.activeIndex > swiper.previousIndex ? \"next\" : \"prev\";\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? \"next\" : \"prev\";\n      }\n      if (useOffset) {\n        newThumbsIndex += direction === \"next\" ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {\n        }\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : void 0);\n      }\n    }\n  }\n  on2(\"beforeInit\", () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper)\n      return;\n    init();\n    update(true);\n  });\n  on2(\"slideChange update resize observerUpdate\", () => {\n    update();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on2(\"beforeDestroy\", () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}\n\n// node_modules/swiper/modules/free-mode/free-mode.js\nfunction freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchStart2() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n  function onTouchMove2() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper;\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? \"startX\" : \"startY\"],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? \"currentX\" : \"currentY\"],\n      time: now()\n    });\n  }\n  function onTouchEnd2(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper;\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        }\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1e3 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl)\n        newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides)\n          needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides)\n          needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === \"next\") {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once(\"transitionEnd\", () => {\n          swiper.loopFix();\n        });\n      }\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce)\n            return;\n          emit(\"momentumBounce\");\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed)\n                return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit(\"_freeModeNoMomentumRelease\");\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed)\n              return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit(\"_freeModeNoMomentumRelease\");\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart: onTouchStart2,\n      onTouchMove: onTouchMove2,\n      onTouchEnd: onTouchEnd2\n    }\n  });\n}\n\n// node_modules/swiper/modules/grid/grid.js\nfunction Grid(_ref) {\n  let {\n    swiper,\n    extendParams\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: \"column\"\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const initSlides = (slidesLength) => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== \"auto\" && fill === \"row\") {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === \"row\" && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        \"-webkit-order\": newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === \"column\") {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.css(getDirectionLabel(\"margin-top\"), row !== 0 ? spaceBetween && `${spaceBetween}px` : \"\");\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css({\n      [getDirectionLabel(\"width\")]: `${swiper.virtualSize + spaceBetween}px`\n    });\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths)\n          slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0])\n          newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\n// node_modules/swiper/modules/manipulation/methods/appendSlide.js\nfunction appendSlide(slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params\n  } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  if (typeof slides === \"object\" && \"length\" in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i])\n        $wrapperEl.append(slides[i]);\n    }\n  } else {\n    $wrapperEl.append(slides);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n}\n\n// node_modules/swiper/modules/manipulation/methods/prependSlide.js\nfunction prependSlide(slides) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  let newActiveIndex = activeIndex + 1;\n  if (typeof slides === \"object\" && \"length\" in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i])\n        $wrapperEl.prepend(slides[i]);\n    }\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    $wrapperEl.prepend(slides);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n  swiper.slideTo(newActiveIndex, 0, false);\n}\n\n// node_modules/swiper/modules/manipulation/methods/addSlide.js\nfunction addSlide(index2, slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n  const baseLength = swiper.slides.length;\n  if (index2 <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n  if (index2 >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n  let newActiveIndex = activeIndexBuffer > index2 ? activeIndexBuffer + 1 : activeIndexBuffer;\n  const slidesBuffer = [];\n  for (let i = baseLength - 1; i >= index2; i -= 1) {\n    const currentSlide = swiper.slides.eq(i);\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n  if (typeof slides === \"object\" && \"length\" in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i])\n        $wrapperEl.append(slides[i]);\n    }\n    newActiveIndex = activeIndexBuffer > index2 ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    $wrapperEl.append(slides);\n  }\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\n    $wrapperEl.append(slidesBuffer[i]);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\n// node_modules/swiper/modules/manipulation/methods/removeSlide.js\nfunction removeSlide(slidesIndexes) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n  let newActiveIndex = activeIndexBuffer;\n  let indexToRemove;\n  if (typeof slidesIndexes === \"object\" && \"length\" in slidesIndexes) {\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove])\n        swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex)\n        newActiveIndex -= 1;\n    }\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove])\n      swiper.slides.eq(indexToRemove).remove();\n    if (indexToRemove < newActiveIndex)\n      newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\n// node_modules/swiper/modules/manipulation/methods/removeAllSlides.js\nfunction removeAllSlides() {\n  const swiper = this;\n  const slidesIndexes = [];\n  for (let i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n  swiper.removeSlide(slidesIndexes);\n}\n\n// node_modules/swiper/modules/manipulation/manipulation.js\nfunction Manipulation(_ref) {\n  let {\n    swiper\n  } = _ref;\n  Object.assign(swiper, {\n    appendSlide: appendSlide.bind(swiper),\n    prependSlide: prependSlide.bind(swiper),\n    addSlide: addSlide.bind(swiper),\n    removeSlide: removeSlide.bind(swiper),\n    removeAllSlides: removeAllSlides.bind(swiper)\n  });\n}\n\n// node_modules/swiper/shared/effect-init.js\nfunction effectInit(params) {\n  const {\n    effect,\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    overwriteParams,\n    perspective,\n    recreateShadows,\n    getEffectParams\n  } = params;\n  on2(\"beforeInit\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n    if (perspective && perspective()) {\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    }\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n    Object.assign(swiper.params, overwriteParamsResult);\n    Object.assign(swiper.originalParams, overwriteParamsResult);\n  });\n  on2(\"setTranslate\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    if (swiper.params.effect !== effect)\n      return;\n    setTransition2(duration);\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    if (recreateShadows) {\n      if (!getEffectParams || !getEffectParams().slideShadows)\n        return;\n      swiper.slides.each((slideEl) => {\n        const $slideEl = swiper.$(slideEl);\n        $slideEl.find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").remove();\n      });\n      recreateShadows();\n    }\n  });\n  let requireUpdateOnVirtual;\n  on2(\"virtualUpdate\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    if (!swiper.slides.length) {\n      requireUpdateOnVirtual = true;\n    }\n    requestAnimationFrame(() => {\n      if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n        setTranslate2();\n        requireUpdateOnVirtual = false;\n      }\n    });\n  });\n}\n\n// node_modules/swiper/shared/effect-target.js\nfunction effectTarget(effectParams, $slideEl) {\n  if (effectParams.transformEl) {\n    return $slideEl.find(effectParams.transformEl).css({\n      \"backface-visibility\": \"hidden\",\n      \"-webkit-backface-visibility\": \"hidden\"\n    });\n  }\n  return $slideEl;\n}\n\n// node_modules/swiper/shared/effect-virtual-transition-end.js\nfunction effectVirtualTransitionEnd(_ref) {\n  let {\n    swiper,\n    duration,\n    transformEl,\n    allSlides\n  } = _ref;\n  const {\n    slides,\n    activeIndex,\n    $wrapperEl\n  } = swiper;\n  if (swiper.params.virtualTranslate && duration !== 0) {\n    let eventTriggered = false;\n    let $transitionEndTarget;\n    if (allSlides) {\n      $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;\n    } else {\n      $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);\n    }\n    $transitionEndTarget.transitionEnd(() => {\n      if (eventTriggered)\n        return;\n      if (!swiper || swiper.destroyed)\n        return;\n      eventTriggered = true;\n      swiper.animating = false;\n      const triggerEvents = [\"webkitTransitionEnd\", \"transitionend\"];\n      for (let i = 0; i < triggerEvents.length; i += 1) {\n        $wrapperEl.trigger(triggerEvents[i]);\n      }\n    });\n  }\n}\n\n// node_modules/swiper/modules/effect-fade/effect-fade.js\nfunction EffectFade(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    fadeEffect: {\n      crossFade: false,\n      transformEl: null\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      slides\n    } = swiper;\n    const params = swiper.params.fadeEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = swiper.slides.eq(i);\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      let tx = -offset2;\n      if (!swiper.params.virtualTranslate)\n        tx -= swiper.translate;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n      }\n      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.css({\n        opacity: slideOpacity\n      }).transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.fadeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: \"fade\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-cube/effect-cube.js\nfunction EffectCube(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    }\n  });\n  const createSlideShadows = ($slideEl, progress, isHorizontal) => {\n    let shadowBefore = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n    let shadowAfter = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n    if (shadowBefore.length === 0) {\n      shadowBefore = dom_default(`<div class=\"swiper-slide-shadow-${isHorizontal ? \"left\" : \"top\"}\"></div>`);\n      $slideEl.append(shadowBefore);\n    }\n    if (shadowAfter.length === 0) {\n      shadowAfter = dom_default(`<div class=\"swiper-slide-shadow-${isHorizontal ? \"right\" : \"bottom\"}\"></div>`);\n      $slideEl.append(shadowAfter);\n    }\n    if (shadowBefore.length)\n      shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length)\n      shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    const isHorizontal = swiper.isHorizontal();\n    swiper.slides.each((slideEl) => {\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      createSlideShadows(dom_default(slideEl), progress, isHorizontal);\n    });\n  };\n  const setTranslate2 = () => {\n    const {\n      $el,\n      $wrapperEl,\n      slides,\n      width: swiperWidth,\n      height: swiperHeight,\n      rtlTranslate: rtl,\n      size: swiperSize,\n      browser: browser2\n    } = swiper;\n    const params = swiper.params.cubeEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let wrapperRotate = 0;\n    let $cubeShadowEl;\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl = $wrapperEl.find(\".swiper-cube-shadow\");\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = dom_default('<div class=\"swiper-cube-shadow\"></div>');\n          $wrapperEl.append($cubeShadowEl);\n        }\n        $cubeShadowEl.css({\n          height: `${swiperWidth}px`\n        });\n      } else {\n        $cubeShadowEl = $el.find(\".swiper-cube-shadow\");\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = dom_default('<div class=\"swiper-cube-shadow\"></div>');\n          $el.append($cubeShadowEl);\n        }\n      }\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let slideIndex = i;\n      if (isVirtual) {\n        slideIndex = parseInt($slideEl.attr(\"data-swiper-slide-index\"), 10);\n      }\n      let slideAngle = slideIndex * 90;\n      let round = Math.floor(slideAngle / 360);\n      if (rtl) {\n        slideAngle = -slideAngle;\n        round = Math.floor(-slideAngle / 360);\n      }\n      const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n      if (slideIndex % 4 === 0) {\n        tx = -round * 4 * swiperSize;\n        tz = 0;\n      } else if ((slideIndex - 1) % 4 === 0) {\n        tx = 0;\n        tz = -round * 4 * swiperSize;\n      } else if ((slideIndex - 2) % 4 === 0) {\n        tx = swiperSize + round * 4 * swiperSize;\n        tz = swiperSize;\n      } else if ((slideIndex - 3) % 4 === 0) {\n        tx = -swiperSize;\n        tz = 3 * swiperSize + swiperSize * 4 * round;\n      }\n      if (rtl) {\n        tx = -tx;\n      }\n      if (!isHorizontal) {\n        ty = tx;\n        tx = 0;\n      }\n      const transform2 = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n      if (progress <= 1 && progress > -1) {\n        wrapperRotate = slideIndex * 90 + progress * 90;\n        if (rtl)\n          wrapperRotate = -slideIndex * 90 - progress * 90;\n      }\n      $slideEl.transform(transform2);\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, isHorizontal);\n      }\n    }\n    $wrapperEl.css({\n      \"-webkit-transform-origin\": `50% 50% -${swiperSize / 2}px`,\n      \"transform-origin\": `50% 50% -${swiperSize / 2}px`\n    });\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n      } else {\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n        const scale1 = params.shadowScale;\n        const scale2 = params.shadowScale / multiplier;\n        const offset2 = params.shadowOffset;\n        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset2}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n      }\n    }\n    const zFactor = browser2.isSafari || browser2.isWebView ? -swiperSize / 2 : 0;\n    $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n    $wrapperEl[0].style.setProperty(\"--swiper-cube-translate-z\", `${zFactor}px`);\n  };\n  const setTransition2 = (duration) => {\n    const {\n      $el,\n      slides\n    } = swiper;\n    slides.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n      $el.find(\".swiper-cube-shadow\").transition(duration);\n    }\n  };\n  effectInit({\n    effect: \"cube\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    recreateShadows,\n    getEffectParams: () => swiper.params.cubeEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: false,\n      virtualTranslate: true\n    })\n  });\n}\n\n// node_modules/swiper/shared/create-shadow.js\nfunction createShadow(params, $slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : \"\"}`;\n  const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n  let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n  if (!$shadowEl.length) {\n    $shadowEl = dom_default(`<div class=\"swiper-slide-shadow${side ? `-${side}` : \"\"}\"></div>`);\n    $shadowContainer.append($shadowEl);\n  }\n  return $shadowEl;\n}\n\n// node_modules/swiper/modules/effect-flip/effect-flip.js\nfunction EffectFlip(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true,\n      transformEl: null\n    }\n  });\n  const createSlideShadows = ($slideEl, progress, params) => {\n    let shadowBefore = swiper.isHorizontal() ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n    let shadowAfter = swiper.isHorizontal() ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n    if (shadowBefore.length === 0) {\n      shadowBefore = createShadow(params, $slideEl, swiper.isHorizontal() ? \"left\" : \"top\");\n    }\n    if (shadowAfter.length === 0) {\n      shadowAfter = createShadow(params, $slideEl, swiper.isHorizontal() ? \"right\" : \"bottom\");\n    }\n    if (shadowBefore.length)\n      shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length)\n      shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    const params = swiper.params.flipEffect;\n    swiper.slides.each((slideEl) => {\n      const $slideEl = dom_default(slideEl);\n      let progress = $slideEl[0].progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n      createSlideShadows($slideEl, progress, params);\n    });\n  };\n  const setTranslate2 = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let progress = $slideEl[0].progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      }\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset2 - swiper.translate : -offset2;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, params);\n      }\n      const transform2 = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform2);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.flipEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n  effectInit({\n    effect: \"flip\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-coverflow/effect-coverflow.js\nfunction EffectCoverflow(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform2 = swiper.translate;\n    const center = isHorizontal ? -transform2 + swiperWidth / 2 : -transform2 + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth;\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = $slideEl[0].swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === \"function\" ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch;\n      if (typeof stretch === \"string\" && stretch.indexOf(\"%\") !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n      if (Math.abs(translateX) < 1e-3)\n        translateX = 0;\n      if (Math.abs(translateY) < 1e-3)\n        translateY = 0;\n      if (Math.abs(translateZ) < 1e-3)\n        translateZ = 0;\n      if (Math.abs(rotateY) < 1e-3)\n        rotateY = 0;\n      if (Math.abs(rotateX) < 1e-3)\n        rotateX = 0;\n      if (Math.abs(scale) < 1e-3)\n        scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n      if (params.slideShadows) {\n        let $shadowBeforeEl = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n        let $shadowAfterEl = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = createShadow(params, $slideEl, isHorizontal ? \"left\" : \"top\");\n        }\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = createShadow(params, $slideEl, isHorizontal ? \"right\" : \"bottom\");\n        }\n        if ($shadowBeforeEl.length)\n          $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length)\n          $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.coverflowEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n  };\n  effectInit({\n    effect: \"coverflow\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-creative/effect-creative.js\nfunction EffectCreative(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    creativeEffect: {\n      transformEl: null,\n      limitProgress: 1,\n      shadowPerProgress: false,\n      progressMultiplier: 1,\n      perspective: true,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n  const getTranslateValue = (value) => {\n    if (typeof value === \"string\")\n      return value;\n    return `${value}px`;\n  };\n  const setTranslate2 = () => {\n    const {\n      slides,\n      $wrapperEl,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.creativeEffect;\n    const {\n      progressMultiplier: multiplier\n    } = params;\n    const isCenteredSlides = swiper.params.centeredSlides;\n    if (isCenteredSlides) {\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n      $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);\n      let originalProgress = progress;\n      if (!isCenteredSlides) {\n        originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);\n      }\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      const t = [swiper.params.cssMode ? -offset2 - swiper.translate : -offset2, 0, 0];\n      const r = [0, 0, 0];\n      let custom = false;\n      if (!swiper.isHorizontal()) {\n        t[1] = t[0];\n        t[0] = 0;\n      }\n      let data = {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        scale: 1,\n        opacity: 1\n      };\n      if (progress < 0) {\n        data = params.next;\n        custom = true;\n      } else if (progress > 0) {\n        data = params.prev;\n        custom = true;\n      }\n      t.forEach((value, index2) => {\n        t[index2] = `calc(${value}px + (${getTranslateValue(data.translate[index2])} * ${Math.abs(progress * multiplier)}))`;\n      });\n      r.forEach((value, index2) => {\n        r[index2] = data.rotate[index2] * Math.abs(progress * multiplier);\n      });\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const translateString = t.join(\", \");\n      const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n      const transform2 = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\n      if (custom && data.shadow || !custom) {\n        let $shadowEl = $slideEl.children(\".swiper-slide-shadow\");\n        if ($shadowEl.length === 0 && data.shadow) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n        if ($shadowEl.length) {\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n          $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n        }\n      }\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform2).css({\n        opacity: opacityString\n      });\n      if (data.origin) {\n        $targetEl.css(\"transform-origin\", data.origin);\n      }\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.creativeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow\").transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: \"creative\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    perspective: () => swiper.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-cards/effect-cards.js\nfunction EffectCards(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset2 = $slideEl[0].swiperSlideOffset;\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset2 -= slides[0].swiperSlideOffset;\n      }\n      let tX = swiper.params.cssMode ? -offset2 - swiper.translate : -offset2;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -2 * progress;\n      let tXAdd = 8 - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n      if (progress < 0) {\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform2 = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n      if (params.slideShadows) {\n        let $shadowEl = $slideEl.find(\".swiper-slide-shadow\");\n        if ($shadowEl.length === 0) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n        if ($shadowEl.length)\n          $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform2);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow\").transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n  effectInit({\n    effect: \"cards\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\nexport {\n  core_default,\n  Virtual,\n  Keyboard,\n  Mousewheel,\n  Navigation,\n  Pagination,\n  Scrollbar,\n  Parallax,\n  Zoom,\n  Lazy,\n  Controller,\n  A11y,\n  History,\n  HashNavigation,\n  Autoplay,\n  Thumb,\n  freeMode,\n  Grid,\n  Manipulation,\n  EffectFade,\n  EffectCube,\n  EffectFlip,\n  EffectCoverflow,\n  EffectCreative,\n  EffectCards\n};\n//# sourceMappingURL=chunk-2T3Q367C.js.map\n","start":1663399072762,"end":1663399072802},{"name":"vite:import-analysis","result":"// node_modules/ssr-window/ssr-window.esm.js\nfunction isObject(obj) {\n  return obj !== null && typeof obj === \"object\" && \"constructor\" in obj && obj.constructor === Object;\n}\nfunction extend(target = {}, src = {}) {\n  Object.keys(src).forEach((key) => {\n    if (typeof target[key] === \"undefined\")\n      target[key] = src[key];\n    else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n      extend(target[key], src[key]);\n    }\n  });\n}\nvar ssrDocument = {\n  body: {},\n  addEventListener() {\n  },\n  removeEventListener() {\n  },\n  activeElement: {\n    blur() {\n    },\n    nodeName: \"\"\n  },\n  querySelector() {\n    return null;\n  },\n  querySelectorAll() {\n    return [];\n  },\n  getElementById() {\n    return null;\n  },\n  createEvent() {\n    return {\n      initEvent() {\n      }\n    };\n  },\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n      setAttribute() {\n      },\n      getElementsByTagName() {\n        return [];\n      }\n    };\n  },\n  createElementNS() {\n    return {};\n  },\n  importNode() {\n    return null;\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  }\n};\nfunction getDocument() {\n  const doc = typeof document !== \"undefined\" ? document : {};\n  extend(doc, ssrDocument);\n  return doc;\n}\nvar ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: \"\"\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  },\n  history: {\n    replaceState() {\n    },\n    pushState() {\n    },\n    go() {\n    },\n    back() {\n    }\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener() {\n  },\n  removeEventListener() {\n  },\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return \"\";\n      }\n    };\n  },\n  Image() {\n  },\n  Date() {\n  },\n  screen: {},\n  setTimeout() {\n  },\n  clearTimeout() {\n  },\n  matchMedia() {\n    return {};\n  },\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === \"undefined\") {\n      callback();\n      return null;\n    }\n    return setTimeout(callback, 0);\n  },\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === \"undefined\") {\n      return;\n    }\n    clearTimeout(id);\n  }\n};\nfunction getWindow() {\n  const win = typeof window !== \"undefined\" ? window : {};\n  extend(win, ssrWindow);\n  return win;\n}\n\n// node_modules/dom7/dom7.esm.js\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, \"__proto__\", {\n    get() {\n      return proto;\n    },\n    set(value) {\n      proto.__proto__ = value;\n    }\n  });\n}\nvar Dom7 = class extends Array {\n  constructor(items) {\n    if (typeof items === \"number\") {\n      super(items);\n    } else {\n      super(...items || []);\n      makeReactive(this);\n    }\n  }\n};\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach((el) => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1)\n      uniqueArray.push(arr[i]);\n  }\n  return uniqueArray;\n}\nfunction qsa(selector, context) {\n  if (typeof selector !== \"string\") {\n    return [selector];\n  }\n  const a = [];\n  const res = context.querySelectorAll(selector);\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n  return a;\n}\nfunction $(selector, context) {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  let arr = [];\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n  if (!selector) {\n    return new Dom7(arr);\n  }\n  if (typeof selector === \"string\") {\n    const html2 = selector.trim();\n    if (html2.indexOf(\"<\") >= 0 && html2.indexOf(\">\") >= 0) {\n      let toCreate = \"div\";\n      if (html2.indexOf(\"<li\") === 0)\n        toCreate = \"ul\";\n      if (html2.indexOf(\"<tr\") === 0)\n        toCreate = \"tbody\";\n      if (html2.indexOf(\"<td\") === 0 || html2.indexOf(\"<th\") === 0)\n        toCreate = \"tr\";\n      if (html2.indexOf(\"<tbody\") === 0)\n        toCreate = \"table\";\n      if (html2.indexOf(\"<option\") === 0)\n        toCreate = \"select\";\n      const tempParent = document2.createElement(toCreate);\n      tempParent.innerHTML = html2;\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document2);\n    }\n  } else if (selector.nodeType || selector === window2 || selector === document2) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7)\n      return selector;\n    arr = selector;\n  }\n  return new Dom7(arrayUnique(arr));\n}\n$.fn = Dom7.prototype;\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    classNames.forEach((className) => {\n      el.classList.toggle(className);\n    });\n  });\n}\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map((c) => c.split(\" \")));\n  return arrayFilter(this, (el) => {\n    return classNames.filter((className) => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === \"string\") {\n    if (this[0])\n      return this[0].getAttribute(attrs);\n    return void 0;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      this[i].setAttribute(attrs, value);\n    } else {\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n  return this;\n}\nfunction removeAttr(attr2) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr2);\n  }\n  return this;\n}\nfunction transform(transform2) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform2;\n  }\n  return this;\n}\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== \"string\" ? `${duration}ms` : duration;\n  }\n  return this;\n}\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === \"function\") {\n    [eventType, listener, capture] = args;\n    targetSelector = void 0;\n  }\n  if (!capture)\n    capture = false;\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target)\n      return;\n    const eventData = e.target.dom7EventData || [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    if ($(target).is(targetSelector))\n      listener.apply(target, eventData);\n    else {\n      const parents2 = $(target).parents();\n      for (let k = 0; k < parents2.length; k += 1) {\n        if ($(parents2[k]).is(targetSelector))\n          listener.apply(parents2[k], eventData);\n      }\n    }\n  }\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    listener.apply(this, eventData);\n  }\n  const events2 = eventType.split(\" \");\n  let j;\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (!targetSelector) {\n      for (j = 0; j < events2.length; j += 1) {\n        const event2 = events2[j];\n        if (!el.dom7Listeners)\n          el.dom7Listeners = {};\n        if (!el.dom7Listeners[event2])\n          el.dom7Listeners[event2] = [];\n        el.dom7Listeners[event2].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event2, handleEvent, capture);\n      }\n    } else {\n      for (j = 0; j < events2.length; j += 1) {\n        const event2 = events2[j];\n        if (!el.dom7LiveListeners)\n          el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event2])\n          el.dom7LiveListeners[event2] = [];\n        el.dom7LiveListeners[event2].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event2, handleLiveEvent, capture);\n      }\n    }\n  }\n  return this;\n}\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === \"function\") {\n    [eventType, listener, capture] = args;\n    targetSelector = void 0;\n  }\n  if (!capture)\n    capture = false;\n  const events2 = eventType.split(\" \");\n  for (let i = 0; i < events2.length; i += 1) {\n    const event2 = events2[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event2];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event2];\n      }\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event2, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event2, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event2, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n  return this;\n}\nfunction trigger(...args) {\n  const window2 = getWindow();\n  const events2 = args[0].split(\" \");\n  const eventData = args[1];\n  for (let i = 0; i < events2.length; i += 1) {\n    const event2 = events2[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      if (window2.CustomEvent) {\n        const evt = new window2.CustomEvent(event2, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n  return this;\n}\nfunction transitionEnd(callback) {\n  const dom = this;\n  function fireCallBack(e) {\n    if (e.target !== this)\n      return;\n    callback.call(this, e);\n    dom.off(\"transitionend\", fireCallBack);\n  }\n  if (callback) {\n    dom.on(\"transitionend\", fireCallBack);\n  }\n  return this;\n}\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles2 = this.styles();\n      return this[0].offsetWidth + parseFloat(styles2.getPropertyValue(\"margin-right\")) + parseFloat(styles2.getPropertyValue(\"margin-left\"));\n    }\n    return this[0].offsetWidth;\n  }\n  return null;\n}\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles2 = this.styles();\n      return this[0].offsetHeight + parseFloat(styles2.getPropertyValue(\"margin-top\")) + parseFloat(styles2.getPropertyValue(\"margin-bottom\"));\n    }\n    return this[0].offsetHeight;\n  }\n  return null;\n}\nfunction offset() {\n  if (this.length > 0) {\n    const window2 = getWindow();\n    const document2 = getDocument();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document2.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window2 ? window2.scrollY : el.scrollTop;\n    const scrollLeft = el === window2 ? window2.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n  return null;\n}\nfunction styles() {\n  const window2 = getWindow();\n  if (this[0])\n    return window2.getComputedStyle(this[0], null);\n  return {};\n}\nfunction css(props, value) {\n  const window2 = getWindow();\n  let i;\n  if (arguments.length === 1) {\n    if (typeof props === \"string\") {\n      if (this[0])\n        return window2.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n      return this;\n    }\n  }\n  if (arguments.length === 2 && typeof props === \"string\") {\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n    return this;\n  }\n  return this;\n}\nfunction each(callback) {\n  if (!callback)\n    return this;\n  this.forEach((el, index2) => {\n    callback.apply(el, [el, index2]);\n  });\n  return this;\n}\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\nfunction html(html2) {\n  if (typeof html2 === \"undefined\") {\n    return this[0] ? this[0].innerHTML : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html2;\n  }\n  return this;\n}\nfunction text(text2) {\n  if (typeof text2 === \"undefined\") {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text2;\n  }\n  return this;\n}\nfunction is(selector) {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === \"undefined\")\n    return false;\n  if (typeof selector === \"string\") {\n    if (el.matches)\n      return el.matches(selector);\n    if (el.webkitMatchesSelector)\n      return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector)\n      return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el)\n        return true;\n    }\n    return false;\n  }\n  if (selector === document2) {\n    return el === document2;\n  }\n  if (selector === window2) {\n    return el === window2;\n  }\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el)\n        return true;\n    }\n    return false;\n  }\n  return false;\n}\nfunction index() {\n  let child = this[0];\n  let i;\n  if (child) {\n    i = 0;\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1)\n        i += 1;\n    }\n    return i;\n  }\n  return void 0;\n}\nfunction eq(index2) {\n  if (typeof index2 === \"undefined\")\n    return this;\n  const length = this.length;\n  if (index2 > length - 1) {\n    return $([]);\n  }\n  if (index2 < 0) {\n    const returnIndex = length + index2;\n    if (returnIndex < 0)\n      return $([]);\n    return $([this[returnIndex]]);\n  }\n  return $([this[index2]]);\n}\nfunction append(...els) {\n  let newChild;\n  const document2 = getDocument();\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === \"string\") {\n        const tempDiv = document2.createElement(\"div\");\n        tempDiv.innerHTML = newChild;\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n  return this;\n}\nfunction prepend(newChild) {\n  const document2 = getDocument();\n  let i;\n  let j;\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === \"string\") {\n      const tempDiv = document2.createElement(\"div\");\n      tempDiv.innerHTML = newChild;\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n  return this;\n}\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n      return $([]);\n    }\n    if (this[0].nextElementSibling)\n      return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el)\n    return $([]);\n  while (el.nextElementSibling) {\n    const next2 = el.nextElementSibling;\n    if (selector) {\n      if ($(next2).is(selector))\n        nextEls.push(next2);\n    } else\n      nextEls.push(next2);\n    el = next2;\n  }\n  return $(nextEls);\n}\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n      return $([]);\n    }\n    if (el.previousElementSibling)\n      return $([el.previousElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el)\n    return $([]);\n  while (el.previousElementSibling) {\n    const prev2 = el.previousElementSibling;\n    if (selector) {\n      if ($(prev2).is(selector))\n        prevEls.push(prev2);\n    } else\n      prevEls.push(prev2);\n    el = prev2;\n  }\n  return $(prevEls);\n}\nfunction parent(selector) {\n  const parents2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector))\n          parents2.push(this[i].parentNode);\n      } else {\n        parents2.push(this[i].parentNode);\n      }\n    }\n  }\n  return $(parents2);\n}\nfunction parents(selector) {\n  const parents2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    let parent2 = this[i].parentNode;\n    while (parent2) {\n      if (selector) {\n        if ($(parent2).is(selector))\n          parents2.push(parent2);\n      } else {\n        parents2.push(parent2);\n      }\n      parent2 = parent2.parentNode;\n    }\n  }\n  return $(parents2);\n}\nfunction closest(selector) {\n  let closest2 = this;\n  if (typeof selector === \"undefined\") {\n    return $([]);\n  }\n  if (!closest2.is(selector)) {\n    closest2 = closest2.parents(selector).eq(0);\n  }\n  return closest2;\n}\nfunction find(selector) {\n  const foundElements = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n  return $(foundElements);\n}\nfunction children(selector) {\n  const children2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children2.push(childNodes[j]);\n      }\n    }\n  }\n  return $(children2);\n}\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode)\n      this[i].parentNode.removeChild(this[i]);\n  }\n  return this;\n}\nvar noTrigger = \"resize scroll\".split(\" \");\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === \"undefined\") {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i])\n            this[i][name]();\n          else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n      return this;\n    }\n    return this.on(name, ...args);\n  }\n  return eventHandler;\n}\nvar click = shortcut(\"click\");\nvar blur = shortcut(\"blur\");\nvar focus = shortcut(\"focus\");\nvar focusin = shortcut(\"focusin\");\nvar focusout = shortcut(\"focusout\");\nvar keyup = shortcut(\"keyup\");\nvar keydown = shortcut(\"keydown\");\nvar keypress = shortcut(\"keypress\");\nvar submit = shortcut(\"submit\");\nvar change = shortcut(\"change\");\nvar mousedown = shortcut(\"mousedown\");\nvar mousemove = shortcut(\"mousemove\");\nvar mouseup = shortcut(\"mouseup\");\nvar mouseenter = shortcut(\"mouseenter\");\nvar mouseleave = shortcut(\"mouseleave\");\nvar mouseout = shortcut(\"mouseout\");\nvar mouseover = shortcut(\"mouseover\");\nvar touchstart = shortcut(\"touchstart\");\nvar touchend = shortcut(\"touchend\");\nvar touchmove = shortcut(\"touchmove\");\nvar resize = shortcut(\"resize\");\nvar scroll = shortcut(\"scroll\");\n\n// node_modules/swiper/shared/dom.js\nvar Methods = {\n  addClass,\n  removeClass,\n  hasClass,\n  toggleClass,\n  attr,\n  removeAttr,\n  transform,\n  transition,\n  on,\n  off,\n  trigger,\n  transitionEnd,\n  outerWidth,\n  outerHeight,\n  styles,\n  offset,\n  css,\n  each,\n  html,\n  text,\n  is,\n  index,\n  eq,\n  append,\n  prepend,\n  next,\n  nextAll,\n  prev,\n  prevAll,\n  parent,\n  parents,\n  closest,\n  find,\n  children,\n  filter,\n  remove\n};\nObject.keys(Methods).forEach((methodName) => {\n  Object.defineProperty($.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nvar dom_default = $;\n\n// node_modules/swiper/shared/utils.js\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach((key) => {\n    try {\n      object[key] = null;\n    } catch (e) {\n    }\n    try {\n      delete object[key];\n    } catch (e) {\n    }\n  });\n}\nfunction nextTick(callback, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n  return setTimeout(callback, delay);\n}\nfunction now() {\n  return Date.now();\n}\nfunction getComputedStyle2(el) {\n  const window2 = getWindow();\n  let style;\n  if (window2.getComputedStyle) {\n    style = window2.getComputedStyle(el, null);\n  }\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n  if (!style) {\n    style = el.style;\n  }\n  return style;\n}\nfunction getTranslate(el, axis) {\n  if (axis === void 0) {\n    axis = \"x\";\n  }\n  const window2 = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle2(el, null);\n  if (window2.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n    if (curTransform.split(\",\").length > 6) {\n      curTransform = curTransform.split(\", \").map((a) => a.replace(\",\", \".\")).join(\", \");\n    }\n    transformMatrix = new window2.WebKitCSSMatrix(curTransform === \"none\" ? \"\" : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\");\n    matrix = transformMatrix.toString().split(\",\");\n  }\n  if (axis === \"x\") {\n    if (window2.WebKitCSSMatrix)\n      curTransform = transformMatrix.m41;\n    else if (matrix.length === 16)\n      curTransform = parseFloat(matrix[12]);\n    else\n      curTransform = parseFloat(matrix[4]);\n  }\n  if (axis === \"y\") {\n    if (window2.WebKitCSSMatrix)\n      curTransform = transformMatrix.m42;\n    else if (matrix.length === 16)\n      curTransform = parseFloat(matrix[13]);\n    else\n      curTransform = parseFloat(matrix[5]);\n  }\n  return curTransform || 0;\n}\nfunction isObject2(o) {\n  return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction isNode(node) {\n  if (typeof window !== \"undefined\" && typeof window.HTMLElement !== \"undefined\") {\n    return node instanceof HTMLElement;\n  }\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend2() {\n  const to = Object(arguments.length <= 0 ? void 0 : arguments[0]);\n  const noExtend = [\"__proto__\", \"constructor\", \"prototype\"];\n  for (let i = 1; i < arguments.length; i += 1) {\n    const nextSource = i < 0 || arguments.length <= i ? void 0 : arguments[i];\n    if (nextSource !== void 0 && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== void 0 && desc.enumerable) {\n          if (isObject2(to[nextKey]) && isObject2(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend2(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject2(to[nextKey]) && isObject2(nextSource[nextKey])) {\n            to[nextKey] = {};\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend2(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n  return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll(_ref) {\n  let {\n    swiper,\n    targetPosition,\n    side\n  } = _ref;\n  const window2 = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = \"none\";\n  window2.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? \"next\" : \"prev\";\n  const isOutOfBound = (current, target) => {\n    return dir === \"next\" && current >= target || dir === \"prev\" && current <= target;\n  };\n  const animate = () => {\n    time = new Date().getTime();\n    if (startTime === null) {\n      startTime = time;\n    }\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = \"hidden\";\n      swiper.wrapperEl.style.scrollSnapType = \"\";\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = \"\";\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window2.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n    swiper.cssModeFrameID = window2.requestAnimationFrame(animate);\n  };\n  animate();\n}\n\n// node_modules/swiper/shared/get-support.js\nvar support;\nfunction calcSupport() {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  return {\n    smoothScroll: document2.documentElement && \"scrollBehavior\" in document2.documentElement.style,\n    touch: !!(\"ontouchstart\" in window2 || window2.DocumentTouch && document2 instanceof window2.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n      try {\n        const opts = Object.defineProperty({}, \"passive\", {\n          get() {\n            supportsPassive = true;\n          }\n        });\n        window2.addEventListener(\"testPassiveListener\", null, opts);\n      } catch (e) {\n      }\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return \"ongesturestart\" in window2;\n    }()\n  };\n}\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n  return support;\n}\n\n// node_modules/swiper/shared/get-device.js\nvar deviceCached;\nfunction calcDevice(_temp) {\n  let {\n    userAgent\n  } = _temp === void 0 ? {} : _temp;\n  const support2 = getSupport();\n  const window2 = getWindow();\n  const platform = window2.navigator.platform;\n  const ua = userAgent || window2.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window2.screen.width;\n  const screenHeight = window2.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === \"Win32\";\n  let macos = platform === \"MacIntel\";\n  const iPadScreens = [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"];\n  if (!ipad && macos && support2.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad)\n      ipad = [0, 1, \"13_0_0\"];\n    macos = false;\n  }\n  if (android && !windows) {\n    device.os = \"android\";\n    device.android = true;\n  }\n  if (ipad || iphone || ipod) {\n    device.os = \"ios\";\n    device.ios = true;\n  }\n  return device;\n}\nfunction getDevice(overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n  return deviceCached;\n}\n\n// node_modules/swiper/shared/get-browser.js\nvar browser;\nfunction calcBrowser() {\n  const window2 = getWindow();\n  function isSafari() {\n    const ua = window2.navigator.userAgent.toLowerCase();\n    return ua.indexOf(\"safari\") >= 0 && ua.indexOf(\"chrome\") < 0 && ua.indexOf(\"android\") < 0;\n  }\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent)\n  };\n}\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n  return browser;\n}\n\n// node_modules/swiper/core/modules/resize/resize.js\nfunction Resize(_ref) {\n  let {\n    swiper,\n    on: on2,\n    emit\n  } = _ref;\n  const window2 = getWindow();\n  let observer = null;\n  let animationFrame = null;\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    emit(\"beforeResize\");\n    emit(\"resize\");\n  };\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    observer = new ResizeObserver((entries) => {\n      animationFrame = window2.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach((_ref2) => {\n          let {\n            contentBoxSize,\n            contentRect,\n            target\n          } = _ref2;\n          if (target && target !== swiper.el)\n            return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n  const removeObserver = () => {\n    if (animationFrame) {\n      window2.cancelAnimationFrame(animationFrame);\n    }\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    emit(\"orientationchange\");\n  };\n  on2(\"init\", () => {\n    if (swiper.params.resizeObserver && typeof window2.ResizeObserver !== \"undefined\") {\n      createObserver();\n      return;\n    }\n    window2.addEventListener(\"resize\", resizeHandler);\n    window2.addEventListener(\"orientationchange\", orientationChangeHandler);\n  });\n  on2(\"destroy\", () => {\n    removeObserver();\n    window2.removeEventListener(\"resize\", resizeHandler);\n    window2.removeEventListener(\"orientationchange\", orientationChangeHandler);\n  });\n}\n\n// node_modules/swiper/core/modules/observer/observer.js\nfunction Observer(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const observers = [];\n  const window2 = getWindow();\n  const attach = function(target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const ObserverFunc = window2.MutationObserver || window2.WebkitMutationObserver;\n    const observer = new ObserverFunc((mutations) => {\n      if (mutations.length === 1) {\n        emit(\"observerUpdate\", mutations[0]);\n        return;\n      }\n      const observerUpdate = function observerUpdate2() {\n        emit(\"observerUpdate\", mutations[0]);\n      };\n      if (window2.requestAnimationFrame) {\n        window2.requestAnimationFrame(observerUpdate);\n      } else {\n        window2.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === \"undefined\" ? true : options.attributes,\n      childList: typeof options.childList === \"undefined\" ? true : options.childList,\n      characterData: typeof options.characterData === \"undefined\" ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n  const init = () => {\n    if (!swiper.params.observer)\n      return;\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    }\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    });\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n  const destroy = () => {\n    observers.forEach((observer) => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on2(\"init\", init);\n  on2(\"destroy\", destroy);\n}\n\n// node_modules/swiper/core/events-emitter.js\nvar events_emitter_default = {\n  on(events2, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    const method = priority ? \"unshift\" : \"push\";\n    events2.split(\" \").forEach((event2) => {\n      if (!self.eventsListeners[event2])\n        self.eventsListeners[event2] = [];\n      self.eventsListeners[event2][method](handler);\n    });\n    return self;\n  },\n  once(events2, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    function onceHandler() {\n      self.off(events2, onceHandler);\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.__emitterProxy = handler;\n    return self.on(events2, onceHandler, priority);\n  },\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    const method = priority ? \"unshift\" : \"push\";\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n    return self;\n  },\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsAnyListeners)\n      return self;\n    const index2 = self.eventsAnyListeners.indexOf(handler);\n    if (index2 >= 0) {\n      self.eventsAnyListeners.splice(index2, 1);\n    }\n    return self;\n  },\n  off(events2, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsListeners)\n      return self;\n    events2.split(\" \").forEach((event2) => {\n      if (typeof handler === \"undefined\") {\n        self.eventsListeners[event2] = [];\n      } else if (self.eventsListeners[event2]) {\n        self.eventsListeners[event2].forEach((eventHandler, index2) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event2].splice(index2, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n  emit() {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsListeners)\n      return self;\n    let events2;\n    let data;\n    let context;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\n      events2 = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events2 = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n    data.unshift(context);\n    const eventsArray = Array.isArray(events2) ? events2 : events2.split(\" \");\n    eventsArray.forEach((event2) => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach((eventHandler) => {\n          eventHandler.apply(context, [event2, ...data]);\n        });\n      }\n      if (self.eventsListeners && self.eventsListeners[event2]) {\n        self.eventsListeners[event2].forEach((eventHandler) => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n};\n\n// node_modules/swiper/core/update/updateSize.js\nfunction updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n  if (typeof swiper.params.width !== \"undefined\" && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n  if (typeof swiper.params.height !== \"undefined\" && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  }\n  width = width - parseInt($el.css(\"padding-left\") || 0, 10) - parseInt($el.css(\"padding-right\") || 0, 10);\n  height = height - parseInt($el.css(\"padding-top\") || 0, 10) - parseInt($el.css(\"padding-bottom\") || 0, 10);\n  if (Number.isNaN(width))\n    width = 0;\n  if (Number.isNaN(height))\n    height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}\n\n// node_modules/swiper/core/update/updateSlides.js\nfunction updateSlides() {\n  const swiper = this;\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    }\n    return {\n      \"width\": \"height\",\n      \"margin-top\": \"margin-left\",\n      \"margin-bottom \": \"margin-right\",\n      \"margin-left\": \"margin-top\",\n      \"margin-right\": \"margin-bottom\",\n      \"padding-left\": \"padding-top\",\n      \"padding-right\": \"padding-bottom\",\n      \"marginRight\": \"marginBottom\"\n    }[property];\n  }\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === \"function\") {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === \"function\") {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index2 = 0;\n  if (typeof swiperSize === \"undefined\") {\n    return;\n  }\n  if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiperSize;\n  }\n  swiper.virtualSize = -spaceBetween;\n  if (rtl)\n    slides.css({\n      marginLeft: \"\",\n      marginBottom: \"\",\n      marginTop: \"\"\n    });\n  else\n    slides.css({\n      marginRight: \"\",\n      marginBottom: \"\",\n      marginTop: \"\"\n    });\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-before\", \"\");\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-after\", \"\");\n  }\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  }\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === \"auto\" && params.breakpoints && Object.keys(params.breakpoints).filter((key) => {\n    return typeof params.breakpoints[key].slidesPerView !== \"undefined\";\n  }).length > 0;\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n    if (slide.css(\"display\") === \"none\")\n      continue;\n    if (params.slidesPerView === \"auto\") {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel(\"width\")] = ``;\n      }\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n      if (currentTransform) {\n        slide[0].style.transform = \"none\";\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = \"none\";\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        const width = getDirectionPropertyValue(slideStyles, \"width\");\n        const paddingLeft = getDirectionPropertyValue(slideStyles, \"padding-left\");\n        const paddingRight = getDirectionPropertyValue(slideStyles, \"padding-right\");\n        const marginLeft = getDirectionPropertyValue(slideStyles, \"margin-left\");\n        const marginRight = getDirectionPropertyValue(slideStyles, \"margin-right\");\n        const boxSizing = slideStyles.getPropertyValue(\"box-sizing\");\n        if (boxSizing && boxSizing === \"border-box\") {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths)\n        slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths)\n        slideSize = Math.floor(slideSize);\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel(\"width\")] = `${slideSize}px`;\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0)\n        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0)\n        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1e3)\n        slidePosition = 0;\n      if (params.roundLengths)\n        slidePosition = Math.floor(slidePosition);\n      if (index2 % params.slidesPerGroup === 0)\n        snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths)\n        slidePosition = Math.floor(slidePosition);\n      if ((index2 - Math.min(swiper.params.slidesPerGroupSkip, index2)) % swiper.params.slidesPerGroup === 0)\n        snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index2 += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  if (rtl && wrongRTL && (params.effect === \"slide\" || params.effect === \"coverflow\")) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel(\"width\")]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  }\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths)\n        slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (snapGrid.length === 0)\n    snapGrid = [0];\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? \"marginLeft\" : getDirectionLabel(\"marginRight\");\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode)\n        return true;\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map((snap) => {\n      if (snap < 0)\n        return -offsetBefore;\n      if (snap > maxSnap)\n        return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-before\", `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-after\", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map((v) => v + addToSlidesGrid);\n  }\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit(\"slidesLengthChange\");\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow)\n      swiper.checkOverflow();\n    swiper.emit(\"snapGridLengthChange\");\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit(\"slidesGridLengthChange\");\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (!isVirtual && !params.cssMode && (params.effect === \"slide\" || params.effect === \"fade\")) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded)\n        swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}\n\n// node_modules/swiper/core/update/updateAutoHeight.js\nfunction updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n  if (typeof speed === \"number\") {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  const getSlideByIndex = (index2) => {\n    if (isVirtual) {\n      return swiper.slides.filter((el) => parseInt(el.getAttribute(\"data-swiper-slide-index\"), 10) === index2)[0];\n    }\n    return swiper.slides.eq(index2)[0];\n  };\n  if (swiper.params.slidesPerView !== \"auto\" && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || dom_default([])).each((slide) => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index2 = swiper.activeIndex + i;\n        if (index2 > swiper.slides.length && !isVirtual)\n          break;\n        activeSlides.push(getSlideByIndex(index2));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  }\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== \"undefined\") {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n  if (newHeight || newHeight === 0)\n    swiper.$wrapperEl.css(\"height\", `${newHeight}px`);\n}\n\n// node_modules/swiper/core/update/updateSlidesOffset.js\nfunction updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}\n\n// node_modules/swiper/core/update/updateSlidesProgress.js\nfunction updateSlidesProgress(translate) {\n  if (translate === void 0) {\n    translate = this && this.translate || 0;\n  }\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0)\n    return;\n  if (typeof slides[0].swiperSlideOffset === \"undefined\")\n    swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl)\n    offsetCenter = translate;\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n  swiper.visibleSlides = dom_default(swiper.visibleSlides);\n}\n\n// node_modules/swiper/core/update/updateProgress.js\nfunction updateProgress(translate) {\n  const swiper = this;\n  if (typeof translate === \"undefined\") {\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight)\n    swiper.updateSlidesProgress(translate);\n  if (isBeginning && !wasBeginning) {\n    swiper.emit(\"reachBeginning toEdge\");\n  }\n  if (isEnd && !wasEnd) {\n    swiper.emit(\"reachEnd toEdge\");\n  }\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit(\"fromEdge\");\n  }\n  swiper.emit(\"progress\", progress);\n}\n\n// node_modules/swiper/core/update/updateSlidesClasses.js\nfunction updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  }\n  activeSlide.addClass(params.slideActiveClass);\n  if (params.loop) {\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  }\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  }\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n  if (params.loop) {\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n  swiper.emitSlidesClasses();\n}\n\n// node_modules/swiper/core/update/updateActiveIndex.js\nfunction updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n  if (typeof activeIndex === \"undefined\") {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== \"undefined\") {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    }\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === \"undefined\")\n        activeIndex = 0;\n    }\n  }\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n  if (snapIndex >= snapGrid.length)\n    snapIndex = snapGrid.length - 1;\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit(\"snapIndexChange\");\n    }\n    return;\n  }\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr(\"data-swiper-slide-index\") || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit(\"activeIndexChange\");\n  swiper.emit(\"snapIndexChange\");\n  if (previousRealIndex !== realIndex) {\n    swiper.emit(\"realIndexChange\");\n  }\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit(\"slideChange\");\n  }\n}\n\n// node_modules/swiper/core/update/updateClickedSlide.js\nfunction updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = dom_default(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt(dom_default(slide).attr(\"data-swiper-slide-index\"), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = void 0;\n    swiper.clickedIndex = void 0;\n    return;\n  }\n  if (params.slideToClickedSlide && swiper.clickedIndex !== void 0 && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\n\n// node_modules/swiper/core/update/index.js\nvar update_default = {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};\n\n// node_modules/swiper/core/translate/getTranslate.js\nfunction getSwiperTranslate(axis) {\n  if (axis === void 0) {\n    axis = this.isHorizontal() ? \"x\" : \"y\";\n  }\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    $wrapperEl\n  } = swiper;\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n  if (params.cssMode) {\n    return translate;\n  }\n  let currentTranslate = getTranslate($wrapperEl[0], axis);\n  if (rtl)\n    currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}\n\n// node_modules/swiper/core/translate/setTranslate.js\nfunction setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y;\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n  swiper.emit(\"setTranslate\", swiper.translate, byController);\n}\n\n// node_modules/swiper/core/translate/minTranslate.js\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\n\n// node_modules/swiper/core/translate/maxTranslate.js\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\n\n// node_modules/swiper/core/translate/translateTo.js\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (translateBounds === void 0) {\n    translateBounds = true;\n  }\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n  const minTranslate2 = swiper.minTranslate();\n  const maxTranslate2 = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate2)\n    newTranslate = minTranslate2;\n  else if (translateBounds && translate < maxTranslate2)\n    newTranslate = maxTranslate2;\n  else\n    newTranslate = translate;\n  swiper.updateProgress(newTranslate);\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? \"left\" : \"top\"\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? \"left\" : \"top\"]: -newTranslate,\n        behavior: \"smooth\"\n      });\n    }\n    return true;\n  }\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit(\"beforeTransitionStart\", speed, internal);\n      swiper.emit(\"transitionEnd\");\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit(\"beforeTransitionStart\", speed, internal);\n      swiper.emit(\"transitionStart\");\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd3(e) {\n          if (!swiper || swiper.destroyed)\n            return;\n          if (e.target !== this)\n            return;\n          swiper.$wrapperEl[0].removeEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit(\"transitionEnd\");\n          }\n        };\n      }\n      swiper.$wrapperEl[0].addEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n  return true;\n}\n\n// node_modules/swiper/core/translate/index.js\nvar translate_default = {\n  getTranslate: getSwiperTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};\n\n// node_modules/swiper/core/transition/setTransition.js\nfunction setTransition(duration, byController) {\n  const swiper = this;\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n  swiper.emit(\"setTransition\", duration, byController);\n}\n\n// node_modules/swiper/core/transition/transitionEmit.js\nfunction transitionEmit(_ref) {\n  let {\n    swiper,\n    runCallbacks,\n    direction,\n    step\n  } = _ref;\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex)\n      dir = \"next\";\n    else if (activeIndex < previousIndex)\n      dir = \"prev\";\n    else\n      dir = \"reset\";\n  }\n  swiper.emit(`transition${step}`);\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === \"reset\") {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n    swiper.emit(`slideChangeTransition${step}`);\n    if (dir === \"next\") {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}\n\n// node_modules/swiper/core/transition/transitionStart.js\nfunction transitionStart(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode)\n    return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: \"Start\"\n  });\n}\n\n// node_modules/swiper/core/transition/transitionEnd.js\nfunction transitionEnd2(runCallbacks, direction) {\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode)\n    return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: \"End\"\n  });\n}\n\n// node_modules/swiper/core/transition/index.js\nvar transition_default = {\n  setTransition,\n  transitionStart,\n  transitionEnd: transitionEnd2\n};\n\n// node_modules/swiper/core/slide/slideTo.js\nfunction slideTo(index2, speed, runCallbacks, internal, initial) {\n  if (index2 === void 0) {\n    index2 = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index2 !== \"number\" && typeof index2 !== \"string\") {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index2}] given.`);\n  }\n  if (typeof index2 === \"string\") {\n    const indexAsNumber = parseInt(index2, 10);\n    const isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index2}] given.`);\n    }\n    index2 = indexAsNumber;\n  }\n  const swiper = this;\n  let slideIndex = index2;\n  if (slideIndex < 0)\n    slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length)\n    snapIndex = snapGrid.length - 1;\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit(\"beforeSlideChangeStart\");\n  }\n  const translate = -snapGrid[snapIndex];\n  swiper.updateProgress(translate);\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n      if (typeof slidesGrid[i + 1] !== \"undefined\") {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  }\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex)\n        return false;\n    }\n  }\n  let direction;\n  if (slideIndex > activeIndex)\n    direction = \"next\";\n  else if (slideIndex < activeIndex)\n    direction = \"prev\";\n  else\n    direction = \"reset\";\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex);\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n    swiper.updateSlidesClasses();\n    if (params.effect !== \"slide\") {\n      swiper.setTranslate(translate);\n    }\n    if (direction !== \"reset\") {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n    return false;\n  }\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = \"none\";\n        swiper._immediateVirtual = true;\n      }\n      wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = \"\";\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? \"left\" : \"top\"\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? \"left\" : \"top\"]: t,\n        behavior: \"smooth\"\n      });\n    }\n    return true;\n  }\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit(\"beforeTransitionStart\", speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd3(e) {\n        if (!swiper || swiper.destroyed)\n          return;\n        if (e.target !== this)\n          return;\n        swiper.$wrapperEl[0].removeEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n    swiper.$wrapperEl[0].addEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", swiper.onSlideToWrapperTransitionEnd);\n  }\n  return true;\n}\n\n// node_modules/swiper/core/slide/slideToLoop.js\nfunction slideToLoop(index2, speed, runCallbacks, internal) {\n  if (index2 === void 0) {\n    index2 = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index2 === \"string\") {\n    const indexAsNumber = parseInt(index2, 10);\n    const isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index2}] given.`);\n    }\n    index2 = indexAsNumber;\n  }\n  const swiper = this;\n  let newIndex = index2;\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideNext.js\nfunction slideNext(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled)\n    return swiper;\n  let perGroup = params.slidesPerGroup;\n  if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic(\"current\", true), 1);\n  }\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide)\n      return false;\n    swiper.loopFix();\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slidePrev.js\nfunction slidePrev(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return swiper;\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide)\n      return false;\n    swiper.loopFix();\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n  function normalize(val) {\n    if (val < 0)\n      return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map((val) => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n  if (typeof prevSnap === \"undefined\" && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        prevSnapIndex = snapIndex;\n      }\n    });\n    if (typeof prevSnapIndex !== \"undefined\") {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n  let prevIndex = 0;\n  if (typeof prevSnap !== \"undefined\") {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0)\n      prevIndex = swiper.activeIndex - 1;\n    if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic(\"previous\", true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideReset.js\nfunction slideReset(speed, runCallbacks, internal) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideToClosest.js\nfunction slideToClosest(speed, runCallbacks, internal, threshold) {\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (threshold === void 0) {\n    threshold = 0.5;\n  }\n  const swiper = this;\n  let index2 = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index2);\n  const snapIndex = skip + Math.floor((index2 - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index2 += swiper.params.slidesPerGroup;\n    }\n  } else {\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index2 -= swiper.params.slidesPerGroup;\n    }\n  }\n  index2 = Math.max(index2, 0);\n  index2 = Math.min(index2, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index2, speed, runCallbacks, internal);\n}\n\n// node_modules/swiper/core/slide/slideToClickedSlide.js\nfunction slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n  if (params.loop) {\n    if (swiper.animating)\n      return;\n    realIndex = parseInt(dom_default(swiper.clickedSlide).attr(\"data-swiper-slide-index\"), 10);\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\n\n// node_modules/swiper/core/slide/index.js\nvar slide_default = {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};\n\n// node_modules/swiper/core/loop/loopCreate.js\nfunction loopCreate() {\n  const swiper = this;\n  const document2 = getDocument();\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const $selector = $wrapperEl.children().length > 0 ? dom_default($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = dom_default(document2.createElement(\"div\")).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n  if (params.slidesPerView === \"auto\" && !params.loopedSlides)\n    params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n  if (swiper.loopedSlides > slides.length && swiper.params.loopedSlidesLimit) {\n    swiper.loopedSlides = slides.length;\n  }\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index2) => {\n    dom_default(el).attr(\"data-swiper-slide-index\", index2);\n  });\n  for (let i = 0; i < swiper.loopedSlides; i += 1) {\n    const index2 = i - Math.floor(i / slides.length) * slides.length;\n    appendSlides.push(slides.eq(index2)[0]);\n    prependSlides.unshift(slides.eq(slides.length - index2 - 1)[0]);\n  }\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append(dom_default(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend(dom_default(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}\n\n// node_modules/swiper/core/loop/loopFix.js\nfunction loopFix() {\n  const swiper = this;\n  swiper.emit(\"beforeLoopFix\");\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate();\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit(\"loopFix\");\n}\n\n// node_modules/swiper/core/loop/loopDestroy.js\nfunction loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr(\"data-swiper-slide-index\");\n}\n\n// node_modules/swiper/core/loop/index.js\nvar loop_default = {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};\n\n// node_modules/swiper/core/grab-cursor/setGrabCursor.js\nfunction setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode)\n    return;\n  const el = swiper.params.touchEventsTarget === \"container\" ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = \"move\";\n  el.style.cursor = moving ? \"grabbing\" : \"grab\";\n}\n\n// node_modules/swiper/core/grab-cursor/unsetGrabCursor.js\nfunction unsetGrabCursor() {\n  const swiper = this;\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n  swiper[swiper.params.touchEventsTarget === \"container\" ? \"el\" : \"wrapperEl\"].style.cursor = \"\";\n}\n\n// node_modules/swiper/core/grab-cursor/index.js\nvar grab_cursor_default = {\n  setGrabCursor,\n  unsetGrabCursor\n};\n\n// node_modules/swiper/core/events/onTouchStart.js\nfunction closestElement(selector, base) {\n  if (base === void 0) {\n    base = this;\n  }\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow())\n      return null;\n    if (el.assignedSlot)\n      el = el.assignedSlot;\n    const found = el.closest(selector);\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n    return found || __closestFrom(el.getRootNode().host);\n  }\n  return __closestFrom(base);\n}\nfunction onTouchStart(event2) {\n  const swiper = this;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n  let e = event2;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  let $targetEl = dom_default(e.target);\n  if (params.touchEventsTarget === \"wrapper\") {\n    if (!$targetEl.closest(swiper.wrapperEl).length)\n      return;\n  }\n  data.isTouchEvent = e.type === \"touchstart\";\n  if (!data.isTouchEvent && \"which\" in e && e.which === 3)\n    return;\n  if (!data.isTouchEvent && \"button\" in e && e.button > 0)\n    return;\n  if (data.isTouched && data.isMoved)\n    return;\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== \"\";\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && event2.path && event2.path[0]) {\n    $targetEl = dom_default(event2.path[0]);\n  }\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot);\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, $targetEl[0]) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0])\n      return;\n  }\n  touches.currentX = e.type === \"touchstart\" ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === \"touchstart\" ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY;\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window2.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === \"prevent\") {\n      event2.preventDefault();\n    } else {\n      return;\n    }\n  }\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: void 0,\n    startMoving: void 0\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = void 0;\n  if (params.threshold > 0)\n    data.allowThresholdMove = false;\n  if (e.type !== \"touchstart\") {\n    let preventDefault = true;\n    if ($targetEl.is(data.focusableElements)) {\n      preventDefault = false;\n      if ($targetEl[0].nodeName === \"SELECT\") {\n        data.isTouched = false;\n      }\n    }\n    if (document2.activeElement && dom_default(document2.activeElement).is(data.focusableElements) && document2.activeElement !== $targetEl[0]) {\n      document2.activeElement.blur();\n    }\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n  if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n  swiper.emit(\"touchStart\", e);\n}\n\n// node_modules/swiper/core/events/onTouchMove.js\nfunction onTouchMove(event2) {\n  const document2 = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  let e = event2;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit(\"touchMoveOpposite\", e);\n    }\n    return;\n  }\n  if (data.isTouchEvent && e.type !== \"touchmove\")\n    return;\n  const targetTouch = e.type === \"touchmove\" && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === \"touchmove\" ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === \"touchmove\" ? targetTouch.pageY : e.pageY;\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n  if (!swiper.allowTouchMove) {\n    if (!dom_default(e.target).is(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n    return;\n  }\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n  if (data.isTouchEvent && document2.activeElement) {\n    if (e.target === document2.activeElement && dom_default(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n  if (data.allowTouchCallbacks) {\n    swiper.emit(\"touchMove\", e);\n  }\n  if (e.targetTouches && e.targetTouches.length > 1)\n    return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold)\n    return;\n  if (typeof data.isScrolling === \"undefined\") {\n    let touchAngle;\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n  if (data.isScrolling) {\n    swiper.emit(\"touchMoveOpposite\", e);\n  }\n  if (typeof data.startMoving === \"undefined\") {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n  if (!data.startMoving) {\n    return;\n  }\n  swiper.allowClick = false;\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\");\n    }\n    data.allowMomentumBounce = false;\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n    swiper.emit(\"sliderFirstMove\", e);\n  }\n  swiper.emit(\"sliderMove\", e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl)\n    diff = -diff;\n  swiper.swipeDirection = diff > 0 ? \"prev\" : \"next\";\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance)\n      data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance)\n      data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  }\n  if (!swiper.allowSlideNext && swiper.swipeDirection === \"next\" && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === \"prev\" && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n  if (!params.followFinger || params.cssMode)\n    return;\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  }\n  swiper.updateProgress(data.currentTranslate);\n  swiper.setTranslate(data.currentTranslate);\n}\n\n// node_modules/swiper/core/events/onTouchEnd.js\nfunction onTouchEnd(event2) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  let e = event2;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  if (data.allowTouchCallbacks) {\n    swiper.emit(\"touchEnd\", e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  }\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime;\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit(\"tap click\", e);\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit(\"doubleTap doubleClick\", e);\n    }\n  }\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed)\n      swiper.allowClick = true;\n  });\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n  if (params.cssMode) {\n    return;\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  }\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment2 = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (typeof slidesGrid[i + increment2] !== \"undefined\") {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment2]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment2] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  }\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n  if (timeDiff > params.longSwipesMs) {\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === \"next\") {\n      if (ratio >= params.longSwipesRatio)\n        swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);\n      else\n        swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === \"prev\") {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === \"next\") {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n      if (swiper.swipeDirection === \"prev\") {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\n\n// node_modules/swiper/core/events/onResize.js\nfunction onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0)\n    return;\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  }\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper;\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n  if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\n\n// node_modules/swiper/core/events/onClick.js\nfunction onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled)\n    return;\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks)\n      e.preventDefault();\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\n\n// node_modules/swiper/core/events/onScroll.js\nfunction onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  swiper.previousTranslate = swiper.translate;\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  }\n  if (swiper.translate === 0)\n    swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n  swiper.emit(\"setTranslate\", swiper.translate, false);\n}\n\n// node_modules/swiper/core/events/index.js\nvar dummyEventAttached = false;\nfunction dummyEventListener() {\n}\nvar events = (swiper, method) => {\n  const document2 = getDocument();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support: support2\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n  const swiperMethod = method;\n  if (!support2.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document2[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document2[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === \"touchstart\" && support2.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support2.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  }\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod](\"click\", swiper.onClick, true);\n  }\n  if (params.cssMode) {\n    wrapperEl[domMethod](\"scroll\", swiper.onScroll);\n  }\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, true);\n  } else {\n    swiper[swiperMethod](\"observerUpdate\", onResize, true);\n  }\n};\nfunction attachEvents() {\n  const swiper = this;\n  const document2 = getDocument();\n  const {\n    params,\n    support: support2\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n  swiper.onClick = onClick.bind(swiper);\n  if (support2.touch && !dummyEventAttached) {\n    document2.addEventListener(\"touchstart\", dummyEventListener);\n    dummyEventAttached = true;\n  }\n  events(swiper, \"on\");\n}\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, \"off\");\n}\nvar events_default = {\n  attachEvents,\n  detachEvents\n};\n\n// node_modules/swiper/core/breakpoints/setBreakpoint.js\nvar isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0)\n    return;\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint)\n    return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : void 0;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === \"column\" || !breakpointParams.grid.fill && params.grid.fill === \"column\") {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n    swiper.emitContainerClasses();\n  }\n  [\"navigation\", \"pagination\", \"scrollbar\"].forEach((prop) => {\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n  extend2(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit(\"_beforeBreakpoint\", breakpointParams);\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n  swiper.emit(\"breakpoint\", breakpointParams);\n}\n\n// node_modules/swiper/core/breakpoints/getBreakpoint.js\nfunction getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = \"window\";\n  }\n  if (!breakpoints || base === \"container\" && !containerEl)\n    return void 0;\n  let breakpoint = false;\n  const window2 = getWindow();\n  const currentHeight = base === \"window\" ? window2.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map((point) => {\n    if (typeof point === \"string\" && point.indexOf(\"@\") === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n    if (base === \"window\") {\n      if (window2.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n  return breakpoint || \"max\";\n}\n\n// node_modules/swiper/core/breakpoints/index.js\nvar breakpoints_default = {\n  setBreakpoint,\n  getBreakpoint\n};\n\n// node_modules/swiper/core/classes/addClasses.js\nfunction prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach((item) => {\n    if (typeof item === \"object\") {\n      Object.keys(item).forEach((classNames) => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === \"string\") {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\nfunction addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support: support2\n  } = swiper;\n  const suffixes = prepareClasses([\"initialized\", params.direction, {\n    \"pointer-events\": !support2.touch\n  }, {\n    \"free-mode\": swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    \"autoheight\": params.autoHeight\n  }, {\n    \"rtl\": rtl\n  }, {\n    \"grid\": params.grid && params.grid.rows > 1\n  }, {\n    \"grid-column\": params.grid && params.grid.rows > 1 && params.grid.fill === \"column\"\n  }, {\n    \"android\": device.android\n  }, {\n    \"ios\": device.ios\n  }, {\n    \"css-mode\": params.cssMode\n  }, {\n    \"centered\": params.cssMode && params.centeredSlides\n  }, {\n    \"watch-progress\": params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(\" \"));\n  swiper.emitContainerClasses();\n}\n\n// node_modules/swiper/core/classes/removeClasses.js\nfunction removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(\" \"));\n  swiper.emitContainerClasses();\n}\n\n// node_modules/swiper/core/classes/index.js\nvar classes_default = {\n  addClasses,\n  removeClasses\n};\n\n// node_modules/swiper/core/images/loadImage.js\nfunction loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window2 = getWindow();\n  let image;\n  function onReady() {\n    if (callback)\n      callback();\n  }\n  const isPicture = dom_default(imageEl).parent(\"picture\")[0];\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window2.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n      if (sizes) {\n        image.sizes = sizes;\n      }\n      if (srcset) {\n        image.srcset = srcset;\n      }\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    onReady();\n  }\n}\n\n// node_modules/swiper/core/images/preloadImages.js\nfunction preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find(\"img\");\n  function onReady() {\n    if (typeof swiper === \"undefined\" || swiper === null || !swiper || swiper.destroyed)\n      return;\n    if (swiper.imagesLoaded !== void 0)\n      swiper.imagesLoaded += 1;\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady)\n        swiper.update();\n      swiper.emit(\"imagesReady\");\n    }\n  }\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute(\"src\"), imageEl.srcset || imageEl.getAttribute(\"srcset\"), imageEl.sizes || imageEl.getAttribute(\"sizes\"), true, onReady);\n  }\n}\n\n// node_modules/swiper/core/images/index.js\nvar images_default = {\n  loadImage,\n  preloadImages\n};\n\n// node_modules/swiper/core/check-overflow/index.js\nfunction checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? \"lock\" : \"unlock\");\n  }\n}\nvar check_overflow_default = {\n  checkOverflow\n};\n\n// node_modules/swiper/core/defaults.js\nvar defaults_default = {\n  init: true,\n  direction: \"horizontal\",\n  touchEventsTarget: \"wrapper\",\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: \"input, select, option, textarea, button, video, label\",\n  width: null,\n  height: null,\n  preventInteractionOnTransition: false,\n  userAgent: null,\n  url: null,\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  autoHeight: false,\n  setWrapperSize: false,\n  virtualTranslate: false,\n  effect: \"slide\",\n  breakpoints: void 0,\n  breakpointsBase: \"window\",\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  slidesOffsetAfter: 0,\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  watchOverflow: true,\n  roundLengths: false,\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  uniqueNavElements: true,\n  resistance: true,\n  resistanceRatio: 0.85,\n  watchSlidesProgress: false,\n  grabCursor: false,\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  preloadImages: true,\n  updateOnImagesReady: true,\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopedSlidesLimit: true,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  rewind: false,\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  noSwiping: true,\n  noSwipingClass: \"swiper-no-swiping\",\n  noSwipingSelector: null,\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  containerModifierClass: \"swiper-\",\n  slideClass: \"swiper-slide\",\n  slideBlankClass: \"swiper-slide-invisible-blank\",\n  slideActiveClass: \"swiper-slide-active\",\n  slideDuplicateActiveClass: \"swiper-slide-duplicate-active\",\n  slideVisibleClass: \"swiper-slide-visible\",\n  slideDuplicateClass: \"swiper-slide-duplicate\",\n  slideNextClass: \"swiper-slide-next\",\n  slideDuplicateNextClass: \"swiper-slide-duplicate-next\",\n  slidePrevClass: \"swiper-slide-prev\",\n  slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\",\n  wrapperClass: \"swiper-wrapper\",\n  runCallbacksOnInit: true,\n  _emitClasses: false\n};\n\n// node_modules/swiper/core/moduleExtendParams.js\nfunction moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n    if (typeof moduleParams !== \"object\" || moduleParams === null) {\n      extend2(allModulesParams, obj);\n      return;\n    }\n    if ([\"navigation\", \"pagination\", \"scrollbar\"].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n    if (!(moduleParamName in params && \"enabled\" in moduleParams)) {\n      extend2(allModulesParams, obj);\n      return;\n    }\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n    if (typeof params[moduleParamName] === \"object\" && !(\"enabled\" in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n    if (!params[moduleParamName])\n      params[moduleParamName] = {\n        enabled: false\n      };\n    extend2(allModulesParams, obj);\n  };\n}\n\n// node_modules/swiper/core/core.js\nvar prototypes = {\n  eventsEmitter: events_emitter_default,\n  update: update_default,\n  translate: translate_default,\n  transition: transition_default,\n  slide: slide_default,\n  loop: loop_default,\n  grabCursor: grab_cursor_default,\n  events: events_default,\n  breakpoints: breakpoints_default,\n  checkOverflow: check_overflow_default,\n  classes: classes_default,\n  images: images_default\n};\nvar extendedDefaults = {};\nvar Swiper = class {\n  constructor() {\n    let el;\n    let params;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === \"Object\") {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n    if (!params)\n      params = {};\n    params = extend2({}, params);\n    if (el && !params.el)\n      params.el = el;\n    if (params.el && dom_default(params.el).length > 1) {\n      const swipers = [];\n      dom_default(params.el).each((containerEl) => {\n        const newParams = extend2({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    }\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n    const allModulesParams = {};\n    swiper.modules.forEach((mod) => {\n      mod({\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    });\n    const swiperParams = extend2({}, defaults_default, allModulesParams);\n    swiper.params = extend2({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend2({}, swiper.params);\n    swiper.passedParams = extend2({}, params);\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach((eventName) => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    }\n    swiper.$ = dom_default;\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      classNames: [],\n      slides: dom_default(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      isHorizontal() {\n        return swiper.params.direction === \"horizontal\";\n      },\n      isVertical() {\n        return swiper.params.direction === \"vertical\";\n      },\n      activeIndex: 0,\n      realIndex: 0,\n      isBeginning: true,\n      isEnd: false,\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      touchEvents: function touchEvents() {\n        const touch = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"];\n        const desktop = [\"pointerdown\", \"pointermove\", \"pointerup\"];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: void 0,\n        isMoved: void 0,\n        allowTouchCallbacks: void 0,\n        touchStartTime: void 0,\n        isScrolling: void 0,\n        currentTranslate: void 0,\n        startTranslate: void 0,\n        allowThresholdMove: void 0,\n        focusableElements: swiper.params.focusableElements,\n        lastClickTime: now(),\n        clickTimeout: void 0,\n        velocities: [],\n        allowMomentumBounce: void 0,\n        isTouchEvent: void 0,\n        startMoving: void 0\n      },\n      allowClick: true,\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit(\"_swiper\");\n    if (swiper.params.init) {\n      swiper.init();\n    }\n    return swiper;\n  }\n  enable() {\n    const swiper = this;\n    if (swiper.enabled)\n      return;\n    swiper.enabled = true;\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n    swiper.emit(\"enable\");\n  }\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled)\n      return;\n    swiper.enabled = false;\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n    swiper.emit(\"disable\");\n  }\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === \"undefined\" ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el)\n      return;\n    const cls = swiper.el.className.split(\" \").filter((className) => {\n      return className.indexOf(\"swiper\") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit(\"_containerClasses\", cls.join(\" \"));\n  }\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed)\n      return \"\";\n    return slideEl.className.split(\" \").filter((className) => {\n      return className.indexOf(\"swiper-slide\") === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(\" \");\n  }\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el)\n      return;\n    const updates = [];\n    swiper.slides.each((slideEl) => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit(\"_slideClass\", slideEl, classNames);\n    });\n    swiper.emit(\"_slideClasses\", updates);\n  }\n  slidesPerViewDynamic(view, exact) {\n    if (view === void 0) {\n      view = \"current\";\n    }\n    if (exact === void 0) {\n      exact = false;\n    }\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize)\n            breakLoop = true;\n        }\n      }\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize)\n            breakLoop = true;\n        }\n      }\n    } else {\n      if (view === \"current\") {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n    return spv;\n  }\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed)\n      return;\n    const {\n      snapGrid,\n      params\n    } = swiper;\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    function setTranslate2() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    let translated;\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate2();\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === \"auto\" || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (!translated) {\n        setTranslate2();\n      }\n    }\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n    swiper.emit(\"update\");\n  }\n  changeDirection(newDirection, needUpdate) {\n    if (needUpdate === void 0) {\n      needUpdate = true;\n    }\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n    if (!newDirection) {\n      newDirection = currentDirection === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    }\n    if (newDirection === currentDirection || newDirection !== \"horizontal\" && newDirection !== \"vertical\") {\n      return swiper;\n    }\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each((slideEl) => {\n      if (newDirection === \"vertical\") {\n        slideEl.style.width = \"\";\n      } else {\n        slideEl.style.height = \"\";\n      }\n    });\n    swiper.emit(\"changeDirection\");\n    if (needUpdate)\n      swiper.update();\n    return swiper;\n  }\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === \"rtl\" || !swiper.rtl && direction === \"ltr\")\n      return;\n    swiper.rtl = direction === \"rtl\";\n    swiper.rtlTranslate = swiper.params.direction === \"horizontal\" && swiper.rtl;\n    if (swiper.rtl) {\n      swiper.$el.addClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = \"rtl\";\n    } else {\n      swiper.$el.removeClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = \"ltr\";\n    }\n    swiper.update();\n  }\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted)\n      return true;\n    const $el = dom_default(el || swiper.params.el);\n    el = $el[0];\n    if (!el) {\n      return false;\n    }\n    el.swiper = swiper;\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || \"\").trim().split(\" \").join(\".\")}`;\n    };\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = dom_default(el.shadowRoot.querySelector(getWrapperSelector()));\n        res.children = (options) => $el.children(options);\n        return res;\n      }\n      if (!$el.children) {\n        return dom_default($el).children(getWrapperSelector());\n      }\n      return $el.children(getWrapperSelector());\n    };\n    let $wrapperEl = getWrapper();\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document2 = getDocument();\n      const wrapper = document2.createElement(\"div\");\n      $wrapperEl = dom_default(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each((slideEl) => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      rtl: el.dir.toLowerCase() === \"rtl\" || $el.css(\"direction\") === \"rtl\",\n      rtlTranslate: swiper.params.direction === \"horizontal\" && (el.dir.toLowerCase() === \"rtl\" || $el.css(\"direction\") === \"rtl\"),\n      wrongRTL: $wrapperEl.css(\"display\") === \"-webkit-box\"\n    });\n    return true;\n  }\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized)\n      return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false)\n      return swiper;\n    swiper.emit(\"beforeInit\");\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.addClasses();\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    }\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    }\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    }\n    swiper.attachEvents();\n    swiper.initialized = true;\n    swiper.emit(\"init\");\n    swiper.emit(\"afterInit\");\n    return swiper;\n  }\n  destroy(deleteInstance, cleanStyles) {\n    if (deleteInstance === void 0) {\n      deleteInstance = true;\n    }\n    if (cleanStyles === void 0) {\n      cleanStyles = true;\n    }\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n    if (typeof swiper.params === \"undefined\" || swiper.destroyed) {\n      return null;\n    }\n    swiper.emit(\"beforeDestroy\");\n    swiper.initialized = false;\n    swiper.detachEvents();\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr(\"style\");\n      $wrapperEl.removeAttr(\"style\");\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\");\n      }\n    }\n    swiper.emit(\"destroy\");\n    Object.keys(swiper.eventsListeners).forEach((eventName) => {\n      swiper.off(eventName);\n    });\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n    swiper.destroyed = true;\n    return null;\n  }\n  static extendDefaults(newDefaults) {\n    extend2(extendedDefaults, newDefaults);\n  }\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n  static get defaults() {\n    return defaults_default;\n  }\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__)\n      Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n    if (typeof mod === \"function\" && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach((m) => Swiper.installModule(m));\n      return Swiper;\n    }\n    Swiper.installModule(module);\n    return Swiper;\n  }\n};\nObject.keys(prototypes).forEach((prototypeGroup) => {\n  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nvar core_default = Swiper;\n\n// node_modules/swiper/modules/virtual/virtual.js\nfunction Virtual(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  let cssModeTimeout;\n  swiper.virtual = {\n    cache: {},\n    from: void 0,\n    to: void 0,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n  function renderSlide(slide, index2) {\n    const params = swiper.params.virtual;\n    if (params.cache && swiper.virtual.cache[index2]) {\n      return swiper.virtual.cache[index2];\n    }\n    const $slideEl = params.renderSlide ? dom_default(params.renderSlide.call(swiper, slide, index2)) : dom_default(`<div class=\"${swiper.params.slideClass}\" data-swiper-slide-index=\"${index2}\">${slide}</div>`);\n    if (!$slideEl.attr(\"data-swiper-slide-index\"))\n      $slideEl.attr(\"data-swiper-slide-index\", index2);\n    if (params.cache)\n      swiper.virtual.cache[index2] = $slideEl;\n    return $slideEl;\n  }\n  function update(force) {\n    const {\n      slidesPerView,\n      slidesPerGroup,\n      centeredSlides\n    } = swiper.params;\n    const {\n      addSlidesBefore,\n      addSlidesAfter\n    } = swiper.params.virtual;\n    const {\n      from: previousFrom,\n      to: previousTo,\n      slides,\n      slidesGrid: previousSlidesGrid,\n      offset: previousOffset\n    } = swiper.virtual;\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n    const activeIndex = swiper.activeIndex || 0;\n    let offsetProp;\n    if (swiper.rtlTranslate)\n      offsetProp = \"right\";\n    else\n      offsetProp = swiper.isHorizontal() ? \"left\" : \"top\";\n    let slidesAfter;\n    let slidesBefore;\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = slidesPerGroup + addSlidesBefore;\n    }\n    const from = Math.max((activeIndex || 0) - slidesBefore, 0);\n    const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n    const offset2 = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    Object.assign(swiper.virtual, {\n      from,\n      to,\n      offset: offset2,\n      slidesGrid: swiper.slidesGrid\n    });\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n      if (swiper.lazy && swiper.params.lazy.enabled) {\n        swiper.lazy.load();\n      }\n      emit(\"virtualUpdate\");\n    }\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset2 !== previousOffset) {\n        swiper.slides.css(offsetProp, `${offset2}px`);\n      }\n      swiper.updateProgress();\n      emit(\"virtualUpdate\");\n      return;\n    }\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset: offset2,\n        from,\n        to,\n        slides: function getSlides() {\n          const slidesToRender = [];\n          for (let i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n          return slidesToRender;\n        }()\n      });\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      } else {\n        emit(\"virtualUpdate\");\n      }\n      return;\n    }\n    const prependIndexes = [];\n    const appendIndexes = [];\n    if (force) {\n      swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();\n    } else {\n      for (let i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${i}\"]`).remove();\n        }\n      }\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      if (i >= from && i <= to) {\n        if (typeof previousTo === \"undefined\" || force) {\n          appendIndexes.push(i);\n        } else {\n          if (i > previousTo)\n            appendIndexes.push(i);\n          if (i < previousFrom)\n            prependIndexes.push(i);\n        }\n      }\n    }\n    appendIndexes.forEach((index2) => {\n      swiper.$wrapperEl.append(renderSlide(slides[index2], index2));\n    });\n    prependIndexes.sort((a, b) => b - a).forEach((index2) => {\n      swiper.$wrapperEl.prepend(renderSlide(slides[index2], index2));\n    });\n    swiper.$wrapperEl.children(\".swiper-slide\").css(offsetProp, `${offset2}px`);\n    onRendered();\n  }\n  function appendSlide2(slides) {\n    if (typeof slides === \"object\" && \"length\" in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i])\n          swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n    update(true);\n  }\n  function prependSlide2(slides) {\n    const activeIndex = swiper.activeIndex;\n    let newActiveIndex = activeIndex + 1;\n    let numberOfNewSlides = 1;\n    if (Array.isArray(slides)) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i])\n          swiper.virtual.slides.unshift(slides[i]);\n      }\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n    if (swiper.params.virtual.cache) {\n      const cache = swiper.virtual.cache;\n      const newCache = {};\n      Object.keys(cache).forEach((cachedIndex) => {\n        const $cachedEl = cache[cachedIndex];\n        const cachedElIndex = $cachedEl.attr(\"data-swiper-slide-index\");\n        if (cachedElIndex) {\n          $cachedEl.attr(\"data-swiper-slide-index\", parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n  function removeSlide2(slidesIndexes) {\n    if (typeof slidesIndexes === \"undefined\" || slidesIndexes === null)\n      return;\n    let activeIndex = swiper.activeIndex;\n    if (Array.isArray(slidesIndexes)) {\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n        if (slidesIndexes[i] < activeIndex)\n          activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n      if (slidesIndexes < activeIndex)\n        activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n  function removeAllSlides2() {\n    swiper.virtual.slides = [];\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n  on2(\"beforeInit\", () => {\n    if (!swiper.params.virtual.enabled)\n      return;\n    swiper.virtual.slides = swiper.params.virtual.slides;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on2(\"setTranslate\", () => {\n    if (!swiper.params.virtual.enabled)\n      return;\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(() => {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on2(\"init update resize\", () => {\n    if (!swiper.params.virtual.enabled)\n      return;\n    if (swiper.params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, \"--swiper-virtual-size\", `${swiper.virtualSize}px`);\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide: appendSlide2,\n    prependSlide: prependSlide2,\n    removeSlide: removeSlide2,\n    removeAllSlides: removeAllSlides2,\n    update\n  });\n}\n\n// node_modules/swiper/modules/keyboard/keyboard.js\nfunction Keyboard(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  swiper.keyboard = {\n    enabled: false\n  };\n  extendParams({\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n      pageUpDown: true\n    }\n  });\n  function handle(event2) {\n    if (!swiper.enabled)\n      return;\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let e = event2;\n    if (e.originalEvent)\n      e = e.originalEvent;\n    const kc = e.keyCode || e.charCode;\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\n    const isPageUp = pageUpDown && kc === 33;\n    const isPageDown = pageUpDown && kc === 34;\n    const isArrowLeft = kc === 37;\n    const isArrowRight = kc === 39;\n    const isArrowUp = kc === 38;\n    const isArrowDown = kc === 40;\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n      return false;\n    }\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return void 0;\n    }\n    if (document2.activeElement && document2.activeElement.nodeName && (document2.activeElement.nodeName.toLowerCase() === \"input\" || document2.activeElement.nodeName.toLowerCase() === \"textarea\")) {\n      return void 0;\n    }\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n      let inView = false;\n      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n        return void 0;\n      }\n      const $el = swiper.$el;\n      const swiperWidth = $el[0].clientWidth;\n      const swiperHeight = $el[0].clientHeight;\n      const windowWidth = window2.innerWidth;\n      const windowHeight = window2.innerHeight;\n      const swiperOffset = swiper.$el.offset();\n      if (rtl)\n        swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n          if (point[0] === 0 && point[1] === 0)\n            continue;\n          inView = true;\n        }\n      }\n      if (!inView)\n        return void 0;\n    }\n    if (swiper.isHorizontal()) {\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n      }\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl)\n        swiper.slideNext();\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl)\n        swiper.slidePrev();\n    } else {\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n        if (e.preventDefault)\n          e.preventDefault();\n        else\n          e.returnValue = false;\n      }\n      if (isPageDown || isArrowDown)\n        swiper.slideNext();\n      if (isPageUp || isArrowUp)\n        swiper.slidePrev();\n    }\n    emit(\"keyPress\", kc);\n    return void 0;\n  }\n  function enable() {\n    if (swiper.keyboard.enabled)\n      return;\n    dom_default(document2).on(\"keydown\", handle);\n    swiper.keyboard.enabled = true;\n  }\n  function disable() {\n    if (!swiper.keyboard.enabled)\n      return;\n    dom_default(document2).off(\"keydown\", handle);\n    swiper.keyboard.enabled = false;\n  }\n  on2(\"init\", () => {\n    if (swiper.params.keyboard.enabled) {\n      enable();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (swiper.keyboard.enabled) {\n      disable();\n    }\n  });\n  Object.assign(swiper.keyboard, {\n    enable,\n    disable\n  });\n}\n\n// node_modules/swiper/modules/mousewheel/mousewheel.js\nfunction Mousewheel(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const window2 = getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: \"container\",\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n  function normalize(e) {\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0;\n    let pX = 0;\n    let pY = 0;\n    if (\"detail\" in e) {\n      sY = e.detail;\n    }\n    if (\"wheelDelta\" in e) {\n      sY = -e.wheelDelta / 120;\n    }\n    if (\"wheelDeltaY\" in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n    if (\"wheelDeltaX\" in e) {\n      sX = -e.wheelDeltaX / 120;\n    }\n    if (\"axis\" in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n    if (\"deltaY\" in e) {\n      pY = e.deltaY;\n    }\n    if (\"deltaX\" in e) {\n      pX = e.deltaX;\n    }\n    if (e.shiftKey && !pX) {\n      pX = pY;\n      pY = 0;\n    }\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    }\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n  function handleMouseEnter() {\n    if (!swiper.enabled)\n      return;\n    swiper.mouseEntered = true;\n  }\n  function handleMouseLeave() {\n    if (!swiper.enabled)\n      return;\n    swiper.mouseEntered = false;\n  }\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      return false;\n    }\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      return false;\n    }\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      return true;\n    }\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit(\"scroll\", newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit(\"scroll\", newEvent.raw);\n    }\n    lastScrollTime = new window2.Date().getTime();\n    return false;\n  }\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      return true;\n    }\n    return false;\n  }\n  function handle(event2) {\n    let e = event2;\n    let disableParentSwiper = true;\n    if (!swiper.enabled)\n      return;\n    const params = swiper.params.mousewheel;\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n      target = dom_default(swiper.params.mousewheel.eventsTarget);\n    }\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges)\n      return true;\n    if (e.originalEvent)\n      e = e.originalEvent;\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY))\n          delta = -data.pixelX * rtlFactor;\n        else\n          return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX))\n        delta = -data.pixelY;\n      else\n        return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n    if (delta === 0)\n      return true;\n    if (params.invert)\n      delta = -delta;\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate())\n      positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate())\n      positions = swiper.maxTranslate();\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested)\n      e.stopPropagation();\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event2\n      };\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift();\n      }\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : void 0;\n      recentWheelEvents.push(newEvent);\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      }\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = void 0;\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate())\n          position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate())\n          position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n        if (swiper.params.freeMode.sticky) {\n          clearTimeout(timeout);\n          timeout = void 0;\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift();\n          }\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : void 0;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, void 0, snapToThreshold);\n            }, 0);\n          }\n          if (!timeout) {\n            timeout = nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, void 0, snapToThreshold);\n            }, 500);\n          }\n        }\n        if (!ignoreWheelEvents)\n          emit(\"scroll\", e);\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction)\n          swiper.autoplay.stop();\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate())\n          return true;\n      }\n    }\n    if (e.preventDefault)\n      e.preventDefault();\n    else\n      e.returnValue = false;\n    return false;\n  }\n  function events2(method) {\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n      target = dom_default(swiper.params.mousewheel.eventsTarget);\n    }\n    target[method](\"mouseenter\", handleMouseEnter);\n    target[method](\"mouseleave\", handleMouseLeave);\n    target[method](\"wheel\", handle);\n  }\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener(\"wheel\", handle);\n      return true;\n    }\n    if (swiper.mousewheel.enabled)\n      return false;\n    events2(\"on\");\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n    if (!swiper.mousewheel.enabled)\n      return false;\n    events2(\"off\");\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n  on2(\"init\", () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n    if (swiper.params.mousewheel.enabled)\n      enable();\n  });\n  on2(\"destroy\", () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n    if (swiper.mousewheel.enabled)\n      disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}\n\n// node_modules/swiper/shared/create-element-if-not-defined.js\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  const document2 = getDocument();\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach((key) => {\n      if (!params[key] && params.auto === true) {\n        let element = swiper.$el.children(`.${checkProps[key]}`)[0];\n        if (!element) {\n          element = document2.createElement(\"div\");\n          element.className = checkProps[key];\n          swiper.$el.append(element);\n        }\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n  return params;\n}\n\n// node_modules/swiper/modules/navigation/navigation.js\nfunction Navigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: \"swiper-button-disabled\",\n      hiddenClass: \"swiper-button-hidden\",\n      lockClass: \"swiper-button-lock\",\n      navigationDisabledClass: \"swiper-navigation-disabled\"\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    $nextEl: null,\n    prevEl: null,\n    $prevEl: null\n  };\n  function getEl(el) {\n    let $el;\n    if (el) {\n      $el = dom_default(el);\n      if (swiper.params.uniqueNavElements && typeof el === \"string\" && $el.length > 1 && swiper.$el.find(el).length === 1) {\n        $el = swiper.$el.find(el);\n      }\n    }\n    return $el;\n  }\n  function toggleEl($el, disabled) {\n    const params = swiper.params.navigation;\n    if ($el && $el.length > 0) {\n      $el[disabled ? \"addClass\" : \"removeClass\"](params.disabledClass);\n      if ($el[0] && $el[0].tagName === \"BUTTON\")\n        $el[0].disabled = disabled;\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        $el[swiper.isLocked ? \"addClass\" : \"removeClass\"](params.lockClass);\n      }\n    }\n  }\n  function update() {\n    if (swiper.params.loop)\n      return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    toggleEl($prevEl, swiper.isBeginning && !swiper.params.rewind);\n    toggleEl($nextEl, swiper.isEnd && !swiper.params.rewind);\n  }\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind)\n      return;\n    swiper.slidePrev();\n    emit(\"navigationPrev\");\n  }\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind)\n      return;\n    swiper.slideNext();\n    emit(\"navigationNext\");\n  }\n  function init() {\n    const params = swiper.params.navigation;\n    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: \"swiper-button-next\",\n      prevEl: \"swiper-button-prev\"\n    });\n    if (!(params.nextEl || params.prevEl))\n      return;\n    const $nextEl = getEl(params.nextEl);\n    const $prevEl = getEl(params.prevEl);\n    if ($nextEl && $nextEl.length > 0) {\n      $nextEl.on(\"click\", onNextClick);\n    }\n    if ($prevEl && $prevEl.length > 0) {\n      $prevEl.on(\"click\", onPrevClick);\n    }\n    Object.assign(swiper.navigation, {\n      $nextEl,\n      nextEl: $nextEl && $nextEl[0],\n      $prevEl,\n      prevEl: $prevEl && $prevEl[0]\n    });\n    if (!swiper.enabled) {\n      if ($nextEl)\n        $nextEl.addClass(params.lockClass);\n      if ($prevEl)\n        $prevEl.addClass(params.lockClass);\n    }\n  }\n  function destroy() {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    if ($nextEl && $nextEl.length) {\n      $nextEl.off(\"click\", onNextClick);\n      $nextEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n    if ($prevEl && $prevEl.length) {\n      $prevEl.off(\"click\", onPrevClick);\n      $prevEl.removeClass(swiper.params.navigation.disabledClass);\n    }\n  }\n  on2(\"init\", () => {\n    if (swiper.params.navigation.enabled === false) {\n      disable();\n    } else {\n      init();\n      update();\n    }\n  });\n  on2(\"toEdge fromEdge lock unlock\", () => {\n    update();\n  });\n  on2(\"destroy\", () => {\n    destroy();\n  });\n  on2(\"enable disable\", () => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    if ($nextEl) {\n      $nextEl[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.navigation.lockClass);\n    }\n    if ($prevEl) {\n      $prevEl[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.navigation.lockClass);\n    }\n  });\n  on2(\"click\", (_s, e) => {\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    const targetEl = e.target;\n    if (swiper.params.navigation.hideOnClick && !dom_default(targetEl).is($prevEl) && !dom_default(targetEl).is($nextEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl)))\n        return;\n      let isHidden;\n      if ($nextEl) {\n        isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n      } else if ($prevEl) {\n        isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n      }\n      if (isHidden === true) {\n        emit(\"navigationShow\");\n      } else {\n        emit(\"navigationHide\");\n      }\n      if ($nextEl) {\n        $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n      if ($prevEl) {\n        $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n      }\n    }\n  });\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.navigation.navigationDisabledClass);\n    init();\n    update();\n  };\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.navigation.navigationDisabledClass);\n    destroy();\n  };\n  Object.assign(swiper.navigation, {\n    enable,\n    disable,\n    update,\n    init,\n    destroy\n  });\n}\n\n// node_modules/swiper/shared/classes-to-selector.js\nfunction classesToSelector(classes) {\n  if (classes === void 0) {\n    classes = \"\";\n  }\n  return `.${classes.trim().replace(/([\\.:!\\/])/g, \"\\\\$1\").replace(/ /g, \".\")}`;\n}\n\n// node_modules/swiper/modules/pagination/pagination.js\nfunction Pagination(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const pfx = \"swiper-pagination\";\n  extendParams({\n    pagination: {\n      el: null,\n      bulletElement: \"span\",\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: \"bullets\",\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: (number) => number,\n      formatFractionTotal: (number) => number,\n      bulletClass: `${pfx}-bullet`,\n      bulletActiveClass: `${pfx}-bullet-active`,\n      modifierClass: `${pfx}-`,\n      currentClass: `${pfx}-current`,\n      totalClass: `${pfx}-total`,\n      hiddenClass: `${pfx}-hidden`,\n      progressbarFillClass: `${pfx}-progressbar-fill`,\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n      clickableClass: `${pfx}-clickable`,\n      lockClass: `${pfx}-lock`,\n      horizontalClass: `${pfx}-horizontal`,\n      verticalClass: `${pfx}-vertical`,\n      paginationDisabledClass: `${pfx}-disabled`\n    }\n  });\n  swiper.pagination = {\n    el: null,\n    $el: null,\n    bullets: []\n  };\n  let bulletSize;\n  let dynamicBulletIndex = 0;\n  function isPaginationDisabled() {\n    return !swiper.params.pagination.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0;\n  }\n  function setSideBullets($bulletEl, position) {\n    const {\n      bulletActiveClass\n    } = swiper.params.pagination;\n    $bulletEl[position]().addClass(`${bulletActiveClass}-${position}`)[position]().addClass(`${bulletActiveClass}-${position}-${position}`);\n  }\n  function update() {\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled())\n      return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let current;\n    const total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n    if (swiper.params.loop) {\n      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n        current -= slidesLength - swiper.loopedSlides * 2;\n      }\n      if (current > total - 1)\n        current -= total;\n      if (current < 0 && swiper.params.paginationType !== \"bullets\")\n        current = total + current;\n    } else if (typeof swiper.snapIndex !== \"undefined\") {\n      current = swiper.snapIndex;\n    } else {\n      current = swiper.activeIndex || 0;\n    }\n    if (params.type === \"bullets\" && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n      if (params.dynamicBullets) {\n        bulletSize = bullets.eq(0)[swiper.isHorizontal() ? \"outerWidth\" : \"outerHeight\"](true);\n        $el.css(swiper.isHorizontal() ? \"width\" : \"height\", `${bulletSize * (params.dynamicMainBullets + 4)}px`);\n        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== void 0) {\n          dynamicBulletIndex += current - (swiper.previousIndex - swiper.loopedSlides || 0);\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (dynamicBulletIndex < 0) {\n            dynamicBulletIndex = 0;\n          }\n        }\n        firstIndex = Math.max(current - dynamicBulletIndex, 0);\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n      bullets.removeClass([\"\", \"-next\", \"-next-next\", \"-prev\", \"-prev-prev\", \"-main\"].map((suffix) => `${params.bulletActiveClass}${suffix}`).join(\" \"));\n      if ($el.length > 1) {\n        bullets.each((bullet) => {\n          const $bullet = dom_default(bullet);\n          const bulletIndex = $bullet.index();\n          if (bulletIndex === current) {\n            $bullet.addClass(params.bulletActiveClass);\n          }\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              $bullet.addClass(`${params.bulletActiveClass}-main`);\n            }\n            if (bulletIndex === firstIndex) {\n              setSideBullets($bullet, \"prev\");\n            }\n            if (bulletIndex === lastIndex) {\n              setSideBullets($bullet, \"next\");\n            }\n          }\n        });\n      } else {\n        const $bullet = bullets.eq(current);\n        const bulletIndex = $bullet.index();\n        $bullet.addClass(params.bulletActiveClass);\n        if (params.dynamicBullets) {\n          const $firstDisplayedBullet = bullets.eq(firstIndex);\n          const $lastDisplayedBullet = bullets.eq(lastIndex);\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n          }\n          if (swiper.params.loop) {\n            if (bulletIndex >= bullets.length) {\n              for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n              }\n              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n            } else {\n              setSideBullets($firstDisplayedBullet, \"prev\");\n              setSideBullets($lastDisplayedBullet, \"next\");\n            }\n          } else {\n            setSideBullets($firstDisplayedBullet, \"prev\");\n            setSideBullets($lastDisplayedBullet, \"next\");\n          }\n        }\n      }\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n        const offsetProp = rtl ? \"right\" : \"left\";\n        bullets.css(swiper.isHorizontal() ? offsetProp : \"top\", `${bulletsOffset}px`);\n      }\n    }\n    if (params.type === \"fraction\") {\n      $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));\n      $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));\n    }\n    if (params.type === \"progressbar\") {\n      let progressbarDirection;\n      if (params.progressbarOpposite) {\n        progressbarDirection = swiper.isHorizontal() ? \"vertical\" : \"horizontal\";\n      } else {\n        progressbarDirection = swiper.isHorizontal() ? \"horizontal\" : \"vertical\";\n      }\n      const scale = (current + 1) / total;\n      let scaleX = 1;\n      let scaleY = 1;\n      if (progressbarDirection === \"horizontal\") {\n        scaleX = scale;\n      } else {\n        scaleY = scale;\n      }\n      $el.find(classesToSelector(params.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n    }\n    if (params.type === \"custom\" && params.renderCustom) {\n      $el.html(params.renderCustom(swiper, current + 1, total));\n      emit(\"paginationRender\", $el[0]);\n    } else {\n      emit(\"paginationUpdate\", $el[0]);\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      $el[swiper.isLocked ? \"addClass\" : \"removeClass\"](params.lockClass);\n    }\n  }\n  function render() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled())\n      return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    let paginationHTML = \"\";\n    if (params.type === \"bullets\") {\n      let numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.loop && numberOfBullets > slidesLength) {\n        numberOfBullets = slidesLength;\n      }\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n      $el.html(paginationHTML);\n      swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));\n    }\n    if (params.type === \"fraction\") {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span> / <span class=\"${params.totalClass}\"></span>`;\n      }\n      $el.html(paginationHTML);\n    }\n    if (params.type === \"progressbar\") {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n      $el.html(paginationHTML);\n    }\n    if (params.type !== \"custom\") {\n      emit(\"paginationRender\", swiper.pagination.$el[0]);\n    }\n  }\n  function init() {\n    swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n      el: \"swiper-pagination\"\n    });\n    const params = swiper.params.pagination;\n    if (!params.el)\n      return;\n    let $el = dom_default(params.el);\n    if ($el.length === 0)\n      return;\n    if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && $el.length > 1) {\n      $el = swiper.$el.find(params.el);\n      if ($el.length > 1) {\n        $el = $el.filter((el) => {\n          if (dom_default(el).parents(\".swiper\")[0] !== swiper.el)\n            return false;\n          return true;\n        });\n      }\n    }\n    if (params.type === \"bullets\" && params.clickable) {\n      $el.addClass(params.clickableClass);\n    }\n    $el.addClass(params.modifierClass + params.type);\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    if (params.type === \"bullets\" && params.dynamicBullets) {\n      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n      dynamicBulletIndex = 0;\n      if (params.dynamicMainBullets < 1) {\n        params.dynamicMainBullets = 1;\n      }\n    }\n    if (params.type === \"progressbar\" && params.progressbarOpposite) {\n      $el.addClass(params.progressbarOppositeClass);\n    }\n    if (params.clickable) {\n      $el.on(\"click\", classesToSelector(params.bulletClass), function onClick2(e) {\n        e.preventDefault();\n        let index2 = dom_default(this).index() * swiper.params.slidesPerGroup;\n        if (swiper.params.loop)\n          index2 += swiper.loopedSlides;\n        swiper.slideTo(index2);\n      });\n    }\n    Object.assign(swiper.pagination, {\n      $el,\n      el: $el[0]\n    });\n    if (!swiper.enabled) {\n      $el.addClass(params.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled())\n      return;\n    const $el = swiper.pagination.$el;\n    $el.removeClass(params.hiddenClass);\n    $el.removeClass(params.modifierClass + params.type);\n    $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    if (swiper.pagination.bullets && swiper.pagination.bullets.removeClass)\n      swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n    if (params.clickable) {\n      $el.off(\"click\", classesToSelector(params.bulletClass));\n    }\n  }\n  on2(\"init\", () => {\n    if (swiper.params.pagination.enabled === false) {\n      disable();\n    } else {\n      init();\n      render();\n      update();\n    }\n  });\n  on2(\"activeIndexChange\", () => {\n    if (swiper.params.loop) {\n      update();\n    } else if (typeof swiper.snapIndex === \"undefined\") {\n      update();\n    }\n  });\n  on2(\"snapIndexChange\", () => {\n    if (!swiper.params.loop) {\n      update();\n    }\n  });\n  on2(\"slidesLengthChange\", () => {\n    if (swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on2(\"snapGridLengthChange\", () => {\n    if (!swiper.params.loop) {\n      render();\n      update();\n    }\n  });\n  on2(\"destroy\", () => {\n    destroy();\n  });\n  on2(\"enable disable\", () => {\n    const {\n      $el\n    } = swiper.pagination;\n    if ($el) {\n      $el[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.pagination.lockClass);\n    }\n  });\n  on2(\"lock unlock\", () => {\n    update();\n  });\n  on2(\"click\", (_s, e) => {\n    const targetEl = e.target;\n    const {\n      $el\n    } = swiper.pagination;\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && $el && $el.length > 0 && !dom_default(targetEl).hasClass(swiper.params.pagination.bulletClass)) {\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl))\n        return;\n      const isHidden = $el.hasClass(swiper.params.pagination.hiddenClass);\n      if (isHidden === true) {\n        emit(\"paginationShow\");\n      } else {\n        emit(\"paginationHide\");\n      }\n      $el.toggleClass(swiper.params.pagination.hiddenClass);\n    }\n  });\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.removeClass(swiper.params.pagination.paginationDisabledClass);\n    }\n    init();\n    render();\n    update();\n  };\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n    if (swiper.pagination.$el) {\n      swiper.pagination.$el.addClass(swiper.params.pagination.paginationDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.pagination, {\n    enable,\n    disable,\n    render,\n    update,\n    init,\n    destroy\n  });\n}\n\n// node_modules/swiper/modules/scrollbar/scrollbar.js\nfunction Scrollbar(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const document2 = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: \"auto\",\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: \"swiper-scrollbar-lock\",\n      dragClass: \"swiper-scrollbar-drag\",\n      scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null,\n    $el: null,\n    $dragEl: null\n  };\n  function setTranslate2() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl,\n      progress\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n      $dragEl[0].style.width = `${newSize}px`;\n    } else {\n      $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n      $dragEl[0].style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(timeout);\n      $el[0].style.opacity = 1;\n      timeout = setTimeout(() => {\n        $el[0].style.opacity = 0;\n        $el.transition(400);\n      }, 1e3);\n    }\n  }\n  function setTransition2(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    swiper.scrollbar.$dragEl.transition(duration);\n  }\n  function updateSize2() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      $dragEl,\n      $el\n    } = scrollbar;\n    $dragEl[0].style.width = \"\";\n    $dragEl[0].style.height = \"\";\n    trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n    if (swiper.params.scrollbar.dragSize === \"auto\") {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n    if (swiper.isHorizontal()) {\n      $dragEl[0].style.width = `${dragSize}px`;\n    } else {\n      $dragEl[0].style.height = `${dragSize}px`;\n    }\n    if (divider >= 1) {\n      $el[0].style.display = \"none\";\n    } else {\n      $el[0].style.display = \"\";\n    }\n    if (swiper.params.scrollbar.hide) {\n      $el[0].style.opacity = 0;\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.$el[swiper.isLocked ? \"addClass\" : \"removeClass\"](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function getPointerPosition(e) {\n    if (swiper.isHorizontal()) {\n      return e.type === \"touchstart\" || e.type === \"touchmove\" ? e.targetTouches[0].clientX : e.clientX;\n    }\n    return e.type === \"touchstart\" || e.type === \"touchmove\" ? e.targetTouches[0].clientY : e.clientY;\n  }\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? \"left\" : \"top\"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? \"left\" : \"top\"] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    $wrapperEl.transition(100);\n    $dragEl.transition(100);\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    $el.transition(0);\n    if (params.hide) {\n      $el.css(\"opacity\", 1);\n    }\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css(\"scroll-snap-type\", \"none\");\n    }\n    emit(\"scrollbarDragStart\", e);\n  }\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el,\n      $dragEl\n    } = scrollbar;\n    if (!isTouched)\n      return;\n    if (e.preventDefault)\n      e.preventDefault();\n    else\n      e.returnValue = false;\n    setDragPosition(e);\n    $wrapperEl.transition(0);\n    $el.transition(0);\n    $dragEl.transition(0);\n    emit(\"scrollbarDragMove\", e);\n  }\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      $wrapperEl\n    } = swiper;\n    const {\n      $el\n    } = scrollbar;\n    if (!isTouched)\n      return;\n    isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css(\"scroll-snap-type\", \"\");\n      $wrapperEl.transition(\"\");\n    }\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        $el.css(\"opacity\", 0);\n        $el.transition(400);\n      }, 1e3);\n    }\n    emit(\"scrollbarDragEnd\", e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n  function events2(method) {\n    const {\n      scrollbar,\n      touchEventsTouch,\n      touchEventsDesktop,\n      params,\n      support: support2\n    } = swiper;\n    const $el = scrollbar.$el;\n    if (!$el)\n      return;\n    const target = $el[0];\n    const activeListener = support2.passiveListener && params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = support2.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target)\n      return;\n    const eventMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n    if (!support2.touch) {\n      target[eventMethod](touchEventsDesktop.start, onDragStart, activeListener);\n      document2[eventMethod](touchEventsDesktop.move, onDragMove, activeListener);\n      document2[eventMethod](touchEventsDesktop.end, onDragEnd, passiveListener);\n    } else {\n      target[eventMethod](touchEventsTouch.start, onDragStart, activeListener);\n      target[eventMethod](touchEventsTouch.move, onDragMove, activeListener);\n      target[eventMethod](touchEventsTouch.end, onDragEnd, passiveListener);\n    }\n  }\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    events2(\"on\");\n  }\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el)\n      return;\n    events2(\"off\");\n  }\n  function init() {\n    const {\n      scrollbar,\n      $el: $swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: \"swiper-scrollbar\"\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el)\n      return;\n    let $el = dom_default(params.el);\n    if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n      $el = $swiperEl.find(params.el);\n    }\n    $el.addClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n    if ($dragEl.length === 0) {\n      $dragEl = dom_default(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n      $el.append($dragEl);\n    }\n    Object.assign(scrollbar, {\n      $el,\n      el: $el[0],\n      $dragEl,\n      dragEl: $dragEl[0]\n    });\n    if (params.draggable) {\n      enableDraggable();\n    }\n    if ($el) {\n      $el[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const $el = swiper.scrollbar.$el;\n    if ($el) {\n      $el.removeClass(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n    disableDraggable();\n  }\n  on2(\"init\", () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      disable();\n    } else {\n      init();\n      updateSize2();\n      setTranslate2();\n    }\n  });\n  on2(\"update resize observerUpdate lock unlock\", () => {\n    updateSize2();\n  });\n  on2(\"setTranslate\", () => {\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    setTransition2(duration);\n  });\n  on2(\"enable disable\", () => {\n    const {\n      $el\n    } = swiper.scrollbar;\n    if ($el) {\n      $el[swiper.enabled ? \"removeClass\" : \"addClass\"](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on2(\"destroy\", () => {\n    destroy();\n  });\n  const enable = () => {\n    swiper.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.removeClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    init();\n    updateSize2();\n    setTranslate2();\n  };\n  const disable = () => {\n    swiper.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.$el) {\n      swiper.scrollbar.$el.addClass(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize: updateSize2,\n    setTranslate: setTranslate2,\n    init,\n    destroy\n  });\n}\n\n// node_modules/swiper/modules/parallax/parallax.js\nfunction Parallax(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    parallax: {\n      enabled: false\n    }\n  });\n  const setTransform = (el, progress) => {\n    const {\n      rtl\n    } = swiper;\n    const $el = dom_default(el);\n    const rtlFactor = rtl ? -1 : 1;\n    const p = $el.attr(\"data-swiper-parallax\") || \"0\";\n    let x = $el.attr(\"data-swiper-parallax-x\");\n    let y = $el.attr(\"data-swiper-parallax-y\");\n    const scale = $el.attr(\"data-swiper-parallax-scale\");\n    const opacity = $el.attr(\"data-swiper-parallax-opacity\");\n    if (x || y) {\n      x = x || \"0\";\n      y = y || \"0\";\n    } else if (swiper.isHorizontal()) {\n      x = p;\n      y = \"0\";\n    } else {\n      y = p;\n      x = \"0\";\n    }\n    if (x.indexOf(\"%\") >= 0) {\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n    } else {\n      x = `${x * progress * rtlFactor}px`;\n    }\n    if (y.indexOf(\"%\") >= 0) {\n      y = `${parseInt(y, 10) * progress}%`;\n    } else {\n      y = `${y * progress}px`;\n    }\n    if (typeof opacity !== \"undefined\" && opacity !== null) {\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n      $el[0].style.opacity = currentOpacity;\n    }\n    if (typeof scale === \"undefined\" || scale === null) {\n      $el.transform(`translate3d(${x}, ${y}, 0px)`);\n    } else {\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n      $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);\n    }\n  };\n  const setTranslate2 = () => {\n    const {\n      $el,\n      slides,\n      progress,\n      snapGrid\n    } = swiper;\n    $el.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((el) => {\n      setTransform(el, progress);\n    });\n    slides.each((slideEl, slideIndex) => {\n      let slideProgress = slideEl.progress;\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== \"auto\") {\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n      }\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n      dom_default(slideEl).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((el) => {\n        setTransform(el, slideProgress);\n      });\n    });\n  };\n  const setTransition2 = function(duration) {\n    if (duration === void 0) {\n      duration = swiper.params.speed;\n    }\n    const {\n      $el\n    } = swiper;\n    $el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((parallaxEl) => {\n      const $parallaxEl = dom_default(parallaxEl);\n      let parallaxDuration = parseInt($parallaxEl.attr(\"data-swiper-parallax-duration\"), 10) || duration;\n      if (duration === 0)\n        parallaxDuration = 0;\n      $parallaxEl.transition(parallaxDuration);\n    });\n  };\n  on2(\"beforeInit\", () => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n  });\n  on2(\"init\", () => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTranslate\", () => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_swiper, duration) => {\n    if (!swiper.params.parallax.enabled)\n      return;\n    setTransition2(duration);\n  });\n}\n\n// node_modules/swiper/modules/zoom/zoom.js\nfunction Zoom(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  const window2 = getWindow();\n  extendParams({\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: \"swiper-zoom-container\",\n      zoomedSlideClass: \"swiper-slide-zoomed\"\n    }\n  });\n  swiper.zoom = {\n    enabled: false\n  };\n  let currentScale = 1;\n  let isScaling = false;\n  let gesturesEnabled;\n  let fakeGestureTouched;\n  let fakeGestureMoved;\n  const gesture = {\n    $slideEl: void 0,\n    slideWidth: void 0,\n    slideHeight: void 0,\n    $imageEl: void 0,\n    $imageWrapEl: void 0,\n    maxRatio: 3\n  };\n  const image = {\n    isTouched: void 0,\n    isMoved: void 0,\n    currentX: void 0,\n    currentY: void 0,\n    minX: void 0,\n    minY: void 0,\n    maxX: void 0,\n    maxY: void 0,\n    width: void 0,\n    height: void 0,\n    startX: void 0,\n    startY: void 0,\n    touchesStart: {},\n    touchesCurrent: {}\n  };\n  const velocity = {\n    x: void 0,\n    y: void 0,\n    prevPositionX: void 0,\n    prevPositionY: void 0,\n    prevTime: void 0\n  };\n  let scale = 1;\n  Object.defineProperty(swiper.zoom, \"scale\", {\n    get() {\n      return scale;\n    },\n    set(value) {\n      if (scale !== value) {\n        const imageEl = gesture.$imageEl ? gesture.$imageEl[0] : void 0;\n        const slideEl = gesture.$slideEl ? gesture.$slideEl[0] : void 0;\n        emit(\"zoomChange\", value, imageEl, slideEl);\n      }\n      scale = value;\n    }\n  });\n  function getDistanceBetweenTouches(e) {\n    if (e.targetTouches.length < 2)\n      return 1;\n    const x1 = e.targetTouches[0].pageX;\n    const y1 = e.targetTouches[0].pageY;\n    const x2 = e.targetTouches[1].pageX;\n    const y2 = e.targetTouches[1].pageY;\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n    return distance;\n  }\n  function onGestureStart(e) {\n    const support2 = swiper.support;\n    const params = swiper.params.zoom;\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n    if (!support2.gestures) {\n      if (e.type !== \"touchstart\" || e.type === \"touchstart\" && e.targetTouches.length < 2) {\n        return;\n      }\n      fakeGestureTouched = true;\n      gesture.scaleStart = getDistanceBetweenTouches(e);\n    }\n    if (!gesture.$slideEl || !gesture.$slideEl.length) {\n      gesture.$slideEl = dom_default(e.target).closest(`.${swiper.params.slideClass}`);\n      if (gesture.$slideEl.length === 0)\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find(\"picture, img, svg, canvas, .swiper-zoom-target\").eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      gesture.maxRatio = gesture.$imageWrapEl.attr(\"data-swiper-zoom\") || params.maxRatio;\n      if (gesture.$imageWrapEl.length === 0) {\n        gesture.$imageEl = void 0;\n        return;\n      }\n    }\n    if (gesture.$imageEl) {\n      gesture.$imageEl.transition(0);\n    }\n    isScaling = true;\n  }\n  function onGestureChange(e) {\n    const support2 = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    if (!support2.gestures) {\n      if (e.type !== \"touchmove\" || e.type === \"touchmove\" && e.targetTouches.length < 2) {\n        return;\n      }\n      fakeGestureMoved = true;\n      gesture.scaleMove = getDistanceBetweenTouches(e);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n      if (e.type === \"gesturechange\")\n        onGestureStart(e);\n      return;\n    }\n    if (support2.gestures) {\n      zoom.scale = e.scale * currentScale;\n    } else {\n      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n    }\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n    }\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n    }\n    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n  function onGestureEnd(e) {\n    const device = swiper.device;\n    const support2 = swiper.support;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    if (!support2.gestures) {\n      if (!fakeGestureTouched || !fakeGestureMoved) {\n        return;\n      }\n      if (e.type !== \"touchend\" || e.type === \"touchend\" && e.changedTouches.length < 2 && !device.android) {\n        return;\n      }\n      fakeGestureTouched = false;\n      fakeGestureMoved = false;\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    currentScale = zoom.scale;\n    isScaling = false;\n    if (zoom.scale === 1)\n      gesture.$slideEl = void 0;\n  }\n  function onTouchStart2(e) {\n    const device = swiper.device;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    if (image.isTouched)\n      return;\n    if (device.android && e.cancelable)\n      e.preventDefault();\n    image.isTouched = true;\n    image.touchesStart.x = e.type === \"touchstart\" ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesStart.y = e.type === \"touchstart\" ? e.targetTouches[0].pageY : e.pageY;\n  }\n  function onTouchMove2(e) {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    swiper.allowClick = false;\n    if (!image.isTouched || !gesture.$slideEl)\n      return;\n    if (!image.isMoved) {\n      image.width = gesture.$imageEl[0].offsetWidth;\n      image.height = gesture.$imageEl[0].offsetHeight;\n      image.startX = getTranslate(gesture.$imageWrapEl[0], \"x\") || 0;\n      image.startY = getTranslate(gesture.$imageWrapEl[0], \"y\") || 0;\n      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n      gesture.$imageWrapEl.transition(0);\n    }\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight)\n      return;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.touchesCurrent.x = e.type === \"touchmove\" ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesCurrent.y = e.type === \"touchmove\" ? e.targetTouches[0].pageY : e.pageY;\n    if (!image.isMoved && !isScaling) {\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n        image.isTouched = false;\n        return;\n      }\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n        image.isTouched = false;\n        return;\n      }\n    }\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n    e.stopPropagation();\n    image.isMoved = true;\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n    if (image.currentX < image.minX) {\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n    }\n    if (image.currentX > image.maxX) {\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n    }\n    if (image.currentY < image.minY) {\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n    }\n    if (image.currentY > image.maxY) {\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n    }\n    if (!velocity.prevPositionX)\n      velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY)\n      velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime)\n      velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2)\n      velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2)\n      velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n  function onTouchEnd2() {\n    const zoom = swiper.zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0)\n      return;\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY;\n    if (velocity.x !== 0)\n      momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0)\n      momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n    image.currentX = newPositionX;\n    image.currentY = newPositionY;\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  }\n  function onTransitionEnd() {\n    const zoom = swiper.zoom;\n    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transform(\"translate3d(0,0,0) scale(1)\");\n      }\n      if (gesture.$imageWrapEl) {\n        gesture.$imageWrapEl.transform(\"translate3d(0,0,0)\");\n      }\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.$slideEl = void 0;\n      gesture.$imageEl = void 0;\n      gesture.$imageWrapEl = void 0;\n    }\n  }\n  function zoomIn(e) {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    if (!gesture.$slideEl) {\n      if (e && e.target) {\n        gesture.$slideEl = dom_default(e.target).closest(`.${swiper.params.slideClass}`);\n      }\n      if (!gesture.$slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n        } else {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n        }\n      }\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find(\"picture, img, svg, canvas, .swiper-zoom-target\").eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0)\n      return;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = \"hidden\";\n      swiper.wrapperEl.style.touchAction = \"none\";\n    }\n    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n    if (typeof image.touchesStart.x === \"undefined\" && e) {\n      touchX = e.type === \"touchend\" ? e.changedTouches[0].pageX : e.pageX;\n      touchY = e.type === \"touchend\" ? e.changedTouches[0].pageY : e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n    zoom.scale = gesture.$imageWrapEl.attr(\"data-swiper-zoom\") || params.maxRatio;\n    currentScale = gesture.$imageWrapEl.attr(\"data-swiper-zoom\") || params.maxRatio;\n    if (e) {\n      slideWidth = gesture.$slideEl[0].offsetWidth;\n      slideHeight = gesture.$slideEl[0].offsetHeight;\n      offsetX = gesture.$slideEl.offset().left + window2.scrollX;\n      offsetY = gesture.$slideEl.offset().top + window2.scrollY;\n      diffX = offsetX + slideWidth / 2 - touchX;\n      diffY = offsetY + slideHeight / 2 - touchY;\n      imageWidth = gesture.$imageEl[0].offsetWidth;\n      imageHeight = gesture.$imageEl[0].offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  }\n  function zoomOut() {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n      gesture.$imageEl = gesture.$slideEl.find(`.${params.containerClass}`).eq(0).find(\"picture, img, svg, canvas, .swiper-zoom-target\").eq(0);\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0 || !gesture.$imageWrapEl || gesture.$imageWrapEl.length === 0)\n      return;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = \"\";\n      swiper.wrapperEl.style.touchAction = \"\";\n    }\n    zoom.scale = 1;\n    currentScale = 1;\n    gesture.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\");\n    gesture.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\");\n    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n    gesture.$slideEl = void 0;\n  }\n  function zoomToggle(e) {\n    const zoom = swiper.zoom;\n    if (zoom.scale && zoom.scale !== 1) {\n      zoomOut();\n    } else {\n      zoomIn(e);\n    }\n  }\n  function getListeners() {\n    const support2 = swiper.support;\n    const passiveListener = swiper.touchEvents.start === \"touchstart\" && support2.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    const activeListenerWithCapture = support2.passiveListener ? {\n      passive: false,\n      capture: true\n    } : true;\n    return {\n      passiveListener,\n      activeListenerWithCapture\n    };\n  }\n  function getSlideSelector() {\n    return `.${swiper.params.slideClass}`;\n  }\n  function toggleGestures(method) {\n    const {\n      passiveListener\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    swiper.$wrapperEl[method](\"gesturestart\", slideSelector, onGestureStart, passiveListener);\n    swiper.$wrapperEl[method](\"gesturechange\", slideSelector, onGestureChange, passiveListener);\n    swiper.$wrapperEl[method](\"gestureend\", slideSelector, onGestureEnd, passiveListener);\n  }\n  function enableGestures() {\n    if (gesturesEnabled)\n      return;\n    gesturesEnabled = true;\n    toggleGestures(\"on\");\n  }\n  function disableGestures() {\n    if (!gesturesEnabled)\n      return;\n    gesturesEnabled = false;\n    toggleGestures(\"off\");\n  }\n  function enable() {\n    const zoom = swiper.zoom;\n    if (zoom.enabled)\n      return;\n    zoom.enabled = true;\n    const support2 = swiper.support;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    if (support2.gestures) {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === \"touchstart\") {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    }\n    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove2, activeListenerWithCapture);\n  }\n  function disable() {\n    const zoom = swiper.zoom;\n    if (!zoom.enabled)\n      return;\n    const support2 = swiper.support;\n    zoom.enabled = false;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n    const slideSelector = getSlideSelector();\n    if (support2.gestures) {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, enableGestures, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, disableGestures, passiveListener);\n    } else if (swiper.touchEvents.start === \"touchstart\") {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, onGestureStart, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, onGestureEnd, passiveListener);\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, onGestureEnd, passiveListener);\n      }\n    }\n    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, onTouchMove2, activeListenerWithCapture);\n  }\n  on2(\"init\", () => {\n    if (swiper.params.zoom.enabled) {\n      enable();\n    }\n  });\n  on2(\"destroy\", () => {\n    disable();\n  });\n  on2(\"touchStart\", (_s, e) => {\n    if (!swiper.zoom.enabled)\n      return;\n    onTouchStart2(e);\n  });\n  on2(\"touchEnd\", (_s, e) => {\n    if (!swiper.zoom.enabled)\n      return;\n    onTouchEnd2(e);\n  });\n  on2(\"doubleTap\", (_s, e) => {\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n      zoomToggle(e);\n    }\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n      onTransitionEnd();\n    }\n  });\n  on2(\"slideChange\", () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n      onTransitionEnd();\n    }\n  });\n  Object.assign(swiper.zoom, {\n    enable,\n    disable,\n    in: zoomIn,\n    out: zoomOut,\n    toggle: zoomToggle\n  });\n}\n\n// node_modules/swiper/modules/lazy/lazy.js\nfunction Lazy(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  extendParams({\n    lazy: {\n      checkInView: false,\n      enabled: false,\n      loadPrevNext: false,\n      loadPrevNextAmount: 1,\n      loadOnTransitionStart: false,\n      scrollingElement: \"\",\n      elementClass: \"swiper-lazy\",\n      loadingClass: \"swiper-lazy-loading\",\n      loadedClass: \"swiper-lazy-loaded\",\n      preloaderClass: \"swiper-lazy-preloader\"\n    }\n  });\n  swiper.lazy = {};\n  let scrollHandlerAttached = false;\n  let initialImageLoaded = false;\n  function loadInSlide(index2, loadInDuplicate) {\n    if (loadInDuplicate === void 0) {\n      loadInDuplicate = true;\n    }\n    const params = swiper.params.lazy;\n    if (typeof index2 === \"undefined\")\n      return;\n    if (swiper.slides.length === 0)\n      return;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const $slideEl = isVirtual ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${index2}\"]`) : swiper.slides.eq(index2);\n    const $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);\n    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n      $images.push($slideEl[0]);\n    }\n    if ($images.length === 0)\n      return;\n    $images.each((imageEl) => {\n      const $imageEl = dom_default(imageEl);\n      $imageEl.addClass(params.loadingClass);\n      const background = $imageEl.attr(\"data-background\");\n      const src = $imageEl.attr(\"data-src\");\n      const srcset = $imageEl.attr(\"data-srcset\");\n      const sizes = $imageEl.attr(\"data-sizes\");\n      const $pictureEl = $imageEl.parent(\"picture\");\n      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, () => {\n        if (typeof swiper === \"undefined\" || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed)\n          return;\n        if (background) {\n          $imageEl.css(\"background-image\", `url(\"${background}\")`);\n          $imageEl.removeAttr(\"data-background\");\n        } else {\n          if (srcset) {\n            $imageEl.attr(\"srcset\", srcset);\n            $imageEl.removeAttr(\"data-srcset\");\n          }\n          if (sizes) {\n            $imageEl.attr(\"sizes\", sizes);\n            $imageEl.removeAttr(\"data-sizes\");\n          }\n          if ($pictureEl.length) {\n            $pictureEl.children(\"source\").each((sourceEl) => {\n              const $source = dom_default(sourceEl);\n              if ($source.attr(\"data-srcset\")) {\n                $source.attr(\"srcset\", $source.attr(\"data-srcset\"));\n                $source.removeAttr(\"data-srcset\");\n              }\n            });\n          }\n          if (src) {\n            $imageEl.attr(\"src\", src);\n            $imageEl.removeAttr(\"data-src\");\n          }\n        }\n        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n        $slideEl.find(`.${params.preloaderClass}`).remove();\n        if (swiper.params.loop && loadInDuplicate) {\n          const slideOriginalIndex = $slideEl.attr(\"data-swiper-slide-index\");\n          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n            const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index=\"${slideOriginalIndex}\"]:not(.${swiper.params.slideDuplicateClass})`);\n            loadInSlide(originalSlide.index(), false);\n          } else {\n            const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index=\"${slideOriginalIndex}\"]`);\n            loadInSlide(duplicatedSlide.index(), false);\n          }\n        }\n        emit(\"lazyImageReady\", $slideEl[0], $imageEl[0]);\n        if (swiper.params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n      });\n      emit(\"lazyImageLoad\", $slideEl[0], $imageEl[0]);\n    });\n  }\n  function load() {\n    const {\n      $wrapperEl,\n      params: swiperParams,\n      slides,\n      activeIndex\n    } = swiper;\n    const isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n    const params = swiperParams.lazy;\n    let slidesPerView = swiperParams.slidesPerView;\n    if (slidesPerView === \"auto\") {\n      slidesPerView = 0;\n    }\n    function slideExist(index2) {\n      if (isVirtual) {\n        if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index=\"${index2}\"]`).length) {\n          return true;\n        }\n      } else if (slides[index2])\n        return true;\n      return false;\n    }\n    function slideIndex(slideEl) {\n      if (isVirtual) {\n        return dom_default(slideEl).attr(\"data-swiper-slide-index\");\n      }\n      return dom_default(slideEl).index();\n    }\n    if (!initialImageLoaded)\n      initialImageLoaded = true;\n    if (swiper.params.watchSlidesProgress) {\n      $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each((slideEl) => {\n        const index2 = isVirtual ? dom_default(slideEl).attr(\"data-swiper-slide-index\") : dom_default(slideEl).index();\n        loadInSlide(index2);\n      });\n    } else if (slidesPerView > 1) {\n      for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n        if (slideExist(i))\n          loadInSlide(i);\n      }\n    } else {\n      loadInSlide(activeIndex);\n    }\n    if (params.loadPrevNext) {\n      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n        const amount = params.loadPrevNextAmount;\n        const spv = Math.ceil(slidesPerView);\n        const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n        const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);\n        for (let i = activeIndex + spv; i < maxIndex; i += 1) {\n          if (slideExist(i))\n            loadInSlide(i);\n        }\n        for (let i = minIndex; i < activeIndex; i += 1) {\n          if (slideExist(i))\n            loadInSlide(i);\n        }\n      } else {\n        const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);\n        if (nextSlide.length > 0)\n          loadInSlide(slideIndex(nextSlide));\n        const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);\n        if (prevSlide.length > 0)\n          loadInSlide(slideIndex(prevSlide));\n      }\n    }\n  }\n  function checkInViewOnLoad() {\n    const window2 = getWindow();\n    if (!swiper || swiper.destroyed)\n      return;\n    const $scrollElement = swiper.params.lazy.scrollingElement ? dom_default(swiper.params.lazy.scrollingElement) : dom_default(window2);\n    const isWindow = $scrollElement[0] === window2;\n    const scrollElementWidth = isWindow ? window2.innerWidth : $scrollElement[0].offsetWidth;\n    const scrollElementHeight = isWindow ? window2.innerHeight : $scrollElement[0].offsetHeight;\n    const swiperOffset = swiper.$el.offset();\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let inView = false;\n    if (rtl)\n      swiperOffset.left -= swiper.$el[0].scrollLeft;\n    const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n    for (let i = 0; i < swiperCoord.length; i += 1) {\n      const point = swiperCoord[i];\n      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {\n        if (point[0] === 0 && point[1] === 0)\n          continue;\n        inView = true;\n      }\n    }\n    const passiveListener = swiper.touchEvents.start === \"touchstart\" && swiper.support.passiveListener && swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (inView) {\n      load();\n      $scrollElement.off(\"scroll\", checkInViewOnLoad, passiveListener);\n    } else if (!scrollHandlerAttached) {\n      scrollHandlerAttached = true;\n      $scrollElement.on(\"scroll\", checkInViewOnLoad, passiveListener);\n    }\n  }\n  on2(\"beforeInit\", () => {\n    if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n      swiper.params.preloadImages = false;\n    }\n  });\n  on2(\"init\", () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on2(\"scroll\", () => {\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled && !swiper.params.freeMode.sticky) {\n      load();\n    }\n  });\n  on2(\"scrollbarDragMove resize _freeModeNoMomentumRelease\", () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on2(\"transitionStart\", () => {\n    if (swiper.params.lazy.enabled) {\n      if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !initialImageLoaded) {\n        if (swiper.params.lazy.checkInView) {\n          checkInViewOnLoad();\n        } else {\n          load();\n        }\n      }\n    }\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n      if (swiper.params.lazy.checkInView) {\n        checkInViewOnLoad();\n      } else {\n        load();\n      }\n    }\n  });\n  on2(\"slideChange\", () => {\n    const {\n      lazy,\n      cssMode,\n      watchSlidesProgress,\n      touchReleaseOnEdges,\n      resistanceRatio\n    } = swiper.params;\n    if (lazy.enabled && (cssMode || watchSlidesProgress && (touchReleaseOnEdges || resistanceRatio === 0))) {\n      load();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (!swiper.$el)\n      return;\n    swiper.$el.find(`.${swiper.params.lazy.loadingClass}`).removeClass(swiper.params.lazy.loadingClass);\n  });\n  Object.assign(swiper.lazy, {\n    load,\n    loadInSlide\n  });\n}\n\n// node_modules/swiper/modules/controller/controller.js\nfunction Controller(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    controller: {\n      control: void 0,\n      inverse: false,\n      by: \"slide\"\n    }\n  });\n  swiper.controller = {\n    control: void 0\n  };\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n        return maxIndex;\n      };\n    }();\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1;\n    let i1;\n    let i3;\n    this.interpolate = function interpolate(x2) {\n      if (!x2)\n        return 0;\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1;\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n    return this;\n  }\n  function getInterpolateFunction(c) {\n    if (!swiper.controller.spline) {\n      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n  }\n  function setTranslate2(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper2 = swiper.constructor;\n    function setControlledTranslate(c) {\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n      if (swiper.params.controller.by === \"slide\") {\n        getInterpolateFunction(c);\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n      if (!controlledTranslate || swiper.params.controller.by === \"container\") {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper2) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper2 && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n  function setTransition2(duration, byController) {\n    const Swiper2 = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n    function setControlledTransition(c) {\n      c.setTransition(duration, swiper);\n      if (duration !== 0) {\n        c.transitionStart();\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n        c.$wrapperEl.transitionEnd(() => {\n          if (!controlled)\n            return;\n          if (c.params.loop && swiper.params.controller.by === \"slide\") {\n            c.loopFix();\n          }\n          c.transitionEnd();\n        });\n      }\n    }\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper2) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper2 && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n  function removeSpline() {\n    if (!swiper.controller.control)\n      return;\n    if (swiper.controller.spline) {\n      swiper.controller.spline = void 0;\n      delete swiper.controller.spline;\n    }\n  }\n  on2(\"beforeInit\", () => {\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on2(\"update\", () => {\n    removeSpline();\n  });\n  on2(\"resize\", () => {\n    removeSpline();\n  });\n  on2(\"observerUpdate\", () => {\n    removeSpline();\n  });\n  on2(\"setTranslate\", (_s, translate, byController) => {\n    if (!swiper.controller.control)\n      return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on2(\"setTransition\", (_s, duration, byController) => {\n    if (!swiper.controller.control)\n      return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate: setTranslate2,\n    setTransition: setTransition2\n  });\n}\n\n// node_modules/swiper/modules/a11y/a11y.js\nfunction A11y(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    a11y: {\n      enabled: true,\n      notificationClass: \"swiper-notification\",\n      prevSlideMessage: \"Previous slide\",\n      nextSlideMessage: \"Next slide\",\n      firstSlideMessage: \"This is the first slide\",\n      lastSlideMessage: \"This is the last slide\",\n      paginationBulletMessage: \"Go to slide {{index}}\",\n      slideLabelMessage: \"{{index}} / {{slidesLength}}\",\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: \"group\",\n      id: null\n    }\n  });\n  let liveRegion = null;\n  function notify(message) {\n    const notification = liveRegion;\n    if (notification.length === 0)\n      return;\n    notification.html(\"\");\n    notification.html(message);\n  }\n  function getRandomNumber(size) {\n    if (size === void 0) {\n      size = 16;\n    }\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\n    return \"x\".repeat(size).replace(/x/g, randomChar);\n  }\n  function makeElFocusable($el) {\n    $el.attr(\"tabIndex\", \"0\");\n  }\n  function makeElNotFocusable($el) {\n    $el.attr(\"tabIndex\", \"-1\");\n  }\n  function addElRole($el, role) {\n    $el.attr(\"role\", role);\n  }\n  function addElRoleDescription($el, description) {\n    $el.attr(\"aria-roledescription\", description);\n  }\n  function addElControls($el, controls) {\n    $el.attr(\"aria-controls\", controls);\n  }\n  function addElLabel($el, label) {\n    $el.attr(\"aria-label\", label);\n  }\n  function addElId($el, id) {\n    $el.attr(\"id\", id);\n  }\n  function addElLive($el, live) {\n    $el.attr(\"aria-live\", live);\n  }\n  function disableEl($el) {\n    $el.attr(\"aria-disabled\", true);\n  }\n  function enableEl($el) {\n    $el.attr(\"aria-disabled\", false);\n  }\n  function onEnterOrSpaceKey(e) {\n    if (e.keyCode !== 13 && e.keyCode !== 32)\n      return;\n    const params = swiper.params.a11y;\n    const $targetEl = dom_default(e.target);\n    if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n      if (!(swiper.isEnd && !swiper.params.loop)) {\n        swiper.slideNext();\n      }\n      if (swiper.isEnd) {\n        notify(params.lastSlideMessage);\n      } else {\n        notify(params.nextSlideMessage);\n      }\n    }\n    if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n      if (!(swiper.isBeginning && !swiper.params.loop)) {\n        swiper.slidePrev();\n      }\n      if (swiper.isBeginning) {\n        notify(params.firstSlideMessage);\n      } else {\n        notify(params.prevSlideMessage);\n      }\n    }\n    if (swiper.pagination && $targetEl.is(classesToSelector(swiper.params.pagination.bulletClass))) {\n      $targetEl[0].click();\n    }\n  }\n  function updateNavigation() {\n    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation)\n      return;\n    const {\n      $nextEl,\n      $prevEl\n    } = swiper.navigation;\n    if ($prevEl && $prevEl.length > 0) {\n      if (swiper.isBeginning) {\n        disableEl($prevEl);\n        makeElNotFocusable($prevEl);\n      } else {\n        enableEl($prevEl);\n        makeElFocusable($prevEl);\n      }\n    }\n    if ($nextEl && $nextEl.length > 0) {\n      if (swiper.isEnd) {\n        disableEl($nextEl);\n        makeElNotFocusable($nextEl);\n      } else {\n        enableEl($nextEl);\n        makeElFocusable($nextEl);\n      }\n    }\n  }\n  function hasPagination() {\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n  }\n  function hasClickablePagination() {\n    return hasPagination() && swiper.params.pagination.clickable;\n  }\n  function updatePagination() {\n    const params = swiper.params.a11y;\n    if (!hasPagination())\n      return;\n    swiper.pagination.bullets.each((bulletEl) => {\n      const $bulletEl = dom_default(bulletEl);\n      if (swiper.params.pagination.clickable) {\n        makeElFocusable($bulletEl);\n        if (!swiper.params.pagination.renderBullet) {\n          addElRole($bulletEl, \"button\");\n          addElLabel($bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, $bulletEl.index() + 1));\n        }\n      }\n      if ($bulletEl.is(`.${swiper.params.pagination.bulletActiveClass}`)) {\n        $bulletEl.attr(\"aria-current\", \"true\");\n      } else {\n        $bulletEl.removeAttr(\"aria-current\");\n      }\n    });\n  }\n  const initNavEl = ($el, wrapperId, message) => {\n    makeElFocusable($el);\n    if ($el[0].tagName !== \"BUTTON\") {\n      addElRole($el, \"button\");\n      $el.on(\"keydown\", onEnterOrSpaceKey);\n    }\n    addElLabel($el, message);\n    addElControls($el, wrapperId);\n  };\n  const handleFocus = (e) => {\n    const slideEl = e.target.closest(`.${swiper.params.slideClass}`);\n    if (!slideEl || !swiper.slides.includes(slideEl))\n      return;\n    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n    if (isActive || isVisible)\n      return;\n    if (swiper.isHorizontal()) {\n      swiper.el.scrollLeft = 0;\n    } else {\n      swiper.el.scrollTop = 0;\n    }\n    swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n  };\n  const initSlides = () => {\n    const params = swiper.params.a11y;\n    if (params.itemRoleDescriptionMessage) {\n      addElRoleDescription(dom_default(swiper.slides), params.itemRoleDescriptionMessage);\n    }\n    if (params.slideRole) {\n      addElRole(dom_default(swiper.slides), params.slideRole);\n    }\n    const slidesLength = swiper.params.loop ? swiper.slides.filter((el) => !el.classList.contains(swiper.params.slideDuplicateClass)).length : swiper.slides.length;\n    if (params.slideLabelMessage) {\n      swiper.slides.each((slideEl, index2) => {\n        const $slideEl = dom_default(slideEl);\n        const slideIndex = swiper.params.loop ? parseInt($slideEl.attr(\"data-swiper-slide-index\"), 10) : index2;\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n        addElLabel($slideEl, ariaLabelMessage);\n      });\n    }\n  };\n  const init = () => {\n    const params = swiper.params.a11y;\n    swiper.$el.append(liveRegion);\n    const $containerEl = swiper.$el;\n    if (params.containerRoleDescriptionMessage) {\n      addElRoleDescription($containerEl, params.containerRoleDescriptionMessage);\n    }\n    if (params.containerMessage) {\n      addElLabel($containerEl, params.containerMessage);\n    }\n    const $wrapperEl = swiper.$wrapperEl;\n    const wrapperId = params.id || $wrapperEl.attr(\"id\") || `swiper-wrapper-${getRandomNumber(16)}`;\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? \"off\" : \"polite\";\n    addElId($wrapperEl, wrapperId);\n    addElLive($wrapperEl, live);\n    initSlides();\n    let $nextEl;\n    let $prevEl;\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n    if ($nextEl && $nextEl.length) {\n      initNavEl($nextEl, wrapperId, params.nextSlideMessage);\n    }\n    if ($prevEl && $prevEl.length) {\n      initNavEl($prevEl, wrapperId, params.prevSlideMessage);\n    }\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.on(\"keydown\", classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    }\n    swiper.$el.on(\"focus\", handleFocus, true);\n  };\n  function destroy() {\n    if (liveRegion && liveRegion.length > 0)\n      liveRegion.remove();\n    let $nextEl;\n    let $prevEl;\n    if (swiper.navigation && swiper.navigation.$nextEl) {\n      $nextEl = swiper.navigation.$nextEl;\n    }\n    if (swiper.navigation && swiper.navigation.$prevEl) {\n      $prevEl = swiper.navigation.$prevEl;\n    }\n    if ($nextEl) {\n      $nextEl.off(\"keydown\", onEnterOrSpaceKey);\n    }\n    if ($prevEl) {\n      $prevEl.off(\"keydown\", onEnterOrSpaceKey);\n    }\n    if (hasClickablePagination()) {\n      swiper.pagination.$el.off(\"keydown\", classesToSelector(swiper.params.pagination.bulletClass), onEnterOrSpaceKey);\n    }\n    swiper.$el.off(\"focus\", handleFocus, true);\n  }\n  on2(\"beforeInit\", () => {\n    liveRegion = dom_default(`<span class=\"${swiper.params.a11y.notificationClass}\" aria-live=\"assertive\" aria-atomic=\"true\"></span>`);\n  });\n  on2(\"afterInit\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    init();\n  });\n  on2(\"slidesLengthChange snapGridLengthChange slidesGridLengthChange\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    initSlides();\n  });\n  on2(\"fromEdge toEdge afterInit lock unlock\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    updateNavigation();\n  });\n  on2(\"paginationUpdate\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    updatePagination();\n  });\n  on2(\"destroy\", () => {\n    if (!swiper.params.a11y.enabled)\n      return;\n    destroy();\n  });\n}\n\n// node_modules/swiper/modules/history/history.js\nfunction History(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    history: {\n      enabled: false,\n      root: \"\",\n      replaceState: false,\n      key: \"slides\",\n      keepQuery: false\n    }\n  });\n  let initialized = false;\n  let paths = {};\n  const slugify = (text2) => {\n    return text2.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n  };\n  const getPathValues = (urlOverride) => {\n    const window2 = getWindow();\n    let location;\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window2.location;\n    }\n    const pathArray = location.pathname.slice(1).split(\"/\").filter((part) => part !== \"\");\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n  const setHistory = (key, index2) => {\n    const window2 = getWindow();\n    if (!initialized || !swiper.params.history.enabled)\n      return;\n    let location;\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window2.location;\n    }\n    const slide = swiper.slides.eq(index2);\n    let value = slugify(slide.attr(\"data-history\"));\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === \"/\")\n        root = root.slice(0, root.length - 1);\n      value = `${root}/${key}/${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key}/${value}`;\n    }\n    if (swiper.params.history.keepQuery) {\n      value += location.search;\n    }\n    const currentState = window2.history.state;\n    if (currentState && currentState.value === value) {\n      return;\n    }\n    if (swiper.params.history.replaceState) {\n      window2.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window2.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHistory = slugify(slide.attr(\"data-history\"));\n        if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index2 = slide.index();\n          swiper.slideTo(index2, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, paths.value, false);\n  };\n  const init = () => {\n    const window2 = getWindow();\n    if (!swiper.params.history)\n      return;\n    if (!window2.history || !window2.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value)\n      return;\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n    if (!swiper.params.history.replaceState) {\n      window2.addEventListener(\"popstate\", setHistoryPopState);\n    }\n  };\n  const destroy = () => {\n    const window2 = getWindow();\n    if (!swiper.params.history.replaceState) {\n      window2.removeEventListener(\"popstate\", setHistoryPopState);\n    }\n  };\n  on2(\"init\", () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on2(\"transitionEnd _freeModeNoMomentumRelease\", () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on2(\"slideChange\", () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}\n\n// node_modules/swiper/modules/hash-navigation/hash-navigation.js\nfunction HashNavigation(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    on: on2\n  } = _ref;\n  let initialized = false;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  extendParams({\n    hashNavigation: {\n      enabled: false,\n      replaceState: false,\n      watchState: false\n    }\n  });\n  const onHashChange = () => {\n    emit(\"hashChange\");\n    const newHash = document2.location.hash.replace(\"#\", \"\");\n    const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr(\"data-hash\");\n    if (newHash !== activeSlideHash) {\n      const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash=\"${newHash}\"]`).index();\n      if (typeof newIndex === \"undefined\")\n        return;\n      swiper.slideTo(newIndex);\n    }\n  };\n  const setHash = () => {\n    if (!initialized || !swiper.params.hashNavigation.enabled)\n      return;\n    if (swiper.params.hashNavigation.replaceState && window2.history && window2.history.replaceState) {\n      window2.history.replaceState(null, null, `#${swiper.slides.eq(swiper.activeIndex).attr(\"data-hash\")}` || \"\");\n      emit(\"hashSet\");\n    } else {\n      const slide = swiper.slides.eq(swiper.activeIndex);\n      const hash = slide.attr(\"data-hash\") || slide.attr(\"data-history\");\n      document2.location.hash = hash || \"\";\n      emit(\"hashSet\");\n    }\n  };\n  const init = () => {\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled)\n      return;\n    initialized = true;\n    const hash = document2.location.hash.replace(\"#\", \"\");\n    if (hash) {\n      const speed = 0;\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides.eq(i);\n        const slideHash = slide.attr(\"data-hash\") || slide.attr(\"data-history\");\n        if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n          const index2 = slide.index();\n          swiper.slideTo(index2, speed, swiper.params.runCallbacksOnInit, true);\n        }\n      }\n    }\n    if (swiper.params.hashNavigation.watchState) {\n      dom_default(window2).on(\"hashchange\", onHashChange);\n    }\n  };\n  const destroy = () => {\n    if (swiper.params.hashNavigation.watchState) {\n      dom_default(window2).off(\"hashchange\", onHashChange);\n    }\n  };\n  on2(\"init\", () => {\n    if (swiper.params.hashNavigation.enabled) {\n      init();\n    }\n  });\n  on2(\"destroy\", () => {\n    if (swiper.params.hashNavigation.enabled) {\n      destroy();\n    }\n  });\n  on2(\"transitionEnd _freeModeNoMomentumRelease\", () => {\n    if (initialized) {\n      setHash();\n    }\n  });\n  on2(\"slideChange\", () => {\n    if (initialized && swiper.params.cssMode) {\n      setHash();\n    }\n  });\n}\n\n// node_modules/swiper/modules/autoplay/autoplay.js\nfunction Autoplay(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2,\n    emit\n  } = _ref;\n  let timeout;\n  swiper.autoplay = {\n    running: false,\n    paused: false\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3e3,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n  function run() {\n    if (!swiper.size) {\n      swiper.autoplay.running = false;\n      swiper.autoplay.paused = false;\n      return;\n    }\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n    if ($activeSlideEl.attr(\"data-swiper-autoplay\")) {\n      delay = $activeSlideEl.attr(\"data-swiper-autoplay\") || swiper.params.autoplay.delay;\n    }\n    clearTimeout(timeout);\n    timeout = nextTick(() => {\n      let autoplayResult;\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else if (!swiper.isBeginning) {\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else {\n          stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else if (!swiper.isEnd) {\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else {\n        stop();\n      }\n      if (swiper.params.cssMode && swiper.autoplay.running)\n        run();\n      else if (autoplayResult === false) {\n        run();\n      }\n    }, delay);\n  }\n  function start() {\n    if (typeof timeout !== \"undefined\")\n      return false;\n    if (swiper.autoplay.running)\n      return false;\n    swiper.autoplay.running = true;\n    emit(\"autoplayStart\");\n    run();\n    return true;\n  }\n  function stop() {\n    if (!swiper.autoplay.running)\n      return false;\n    if (typeof timeout === \"undefined\")\n      return false;\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = void 0;\n    }\n    swiper.autoplay.running = false;\n    emit(\"autoplayStop\");\n    return true;\n  }\n  function pause(speed) {\n    if (!swiper.autoplay.running)\n      return;\n    if (swiper.autoplay.paused)\n      return;\n    if (timeout)\n      clearTimeout(timeout);\n    swiper.autoplay.paused = true;\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      run();\n    } else {\n      [\"transitionend\", \"webkitTransitionEnd\"].forEach((event2) => {\n        swiper.$wrapperEl[0].addEventListener(event2, onTransitionEnd);\n      });\n    }\n  }\n  function onVisibilityChange() {\n    const document2 = getDocument();\n    if (document2.visibilityState === \"hidden\" && swiper.autoplay.running) {\n      pause();\n    }\n    if (document2.visibilityState === \"visible\" && swiper.autoplay.paused) {\n      run();\n      swiper.autoplay.paused = false;\n    }\n  }\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.$wrapperEl)\n      return;\n    if (e.target !== swiper.$wrapperEl[0])\n      return;\n    [\"transitionend\", \"webkitTransitionEnd\"].forEach((event2) => {\n      swiper.$wrapperEl[0].removeEventListener(event2, onTransitionEnd);\n    });\n    swiper.autoplay.paused = false;\n    if (!swiper.autoplay.running) {\n      stop();\n    } else {\n      run();\n    }\n  }\n  function onMouseEnter() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n    } else {\n      emit(\"autoplayPause\");\n      pause();\n    }\n    [\"transitionend\", \"webkitTransitionEnd\"].forEach((event2) => {\n      swiper.$wrapperEl[0].removeEventListener(event2, onTransitionEnd);\n    });\n  }\n  function onMouseLeave() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      return;\n    }\n    swiper.autoplay.paused = false;\n    emit(\"autoplayResume\");\n    run();\n  }\n  function attachMouseEvents() {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.$el.on(\"mouseenter\", onMouseEnter);\n      swiper.$el.on(\"mouseleave\", onMouseLeave);\n    }\n  }\n  function detachMouseEvents() {\n    swiper.$el.off(\"mouseenter\", onMouseEnter);\n    swiper.$el.off(\"mouseleave\", onMouseLeave);\n  }\n  on2(\"init\", () => {\n    if (swiper.params.autoplay.enabled) {\n      start();\n      const document2 = getDocument();\n      document2.addEventListener(\"visibilitychange\", onVisibilityChange);\n      attachMouseEvents();\n    }\n  });\n  on2(\"beforeTransitionStart\", (_s, speed, internal) => {\n    if (swiper.autoplay.running) {\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.pause(speed);\n      } else {\n        stop();\n      }\n    }\n  });\n  on2(\"sliderFirstMove\", () => {\n    if (swiper.autoplay.running) {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        pause();\n      }\n    }\n  });\n  on2(\"touchEnd\", () => {\n    if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n      run();\n    }\n  });\n  on2(\"destroy\", () => {\n    detachMouseEvents();\n    if (swiper.autoplay.running) {\n      stop();\n    }\n    const document2 = getDocument();\n    document2.removeEventListener(\"visibilitychange\", onVisibilityChange);\n  });\n  Object.assign(swiper.autoplay, {\n    pause,\n    run,\n    start,\n    stop\n  });\n}\n\n// node_modules/swiper/modules/thumbs/thumbs.js\nfunction Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: \"swiper-slide-thumb-active\",\n      thumbsContainerClass: \"swiper-thumbs\"\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && dom_default(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass))\n      return;\n    if (typeof clickedIndex === \"undefined\" || clickedIndex === null)\n      return;\n    let slideToIndex;\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt(dom_default(thumbsSwiper.clickedSlide).attr(\"data-swiper-slide-index\"), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix();\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === \"undefined\")\n        slideToIndex = nextIndex;\n      else if (typeof nextIndex === \"undefined\")\n        slideToIndex = prevIndex;\n      else if (nextIndex - currentIndex < currentIndex - prevIndex)\n        slideToIndex = nextIndex;\n      else\n        slideToIndex = prevIndex;\n    }\n    swiper.slideTo(slideToIndex);\n  }\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized)\n      return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject2(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on(\"tap\", onThumbClick);\n    return true;\n  }\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === \"auto\" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix();\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        }\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        if (typeof prevThumbsIndex === \"undefined\") {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === \"undefined\") {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n        direction = swiper.activeIndex > swiper.previousIndex ? \"next\" : \"prev\";\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? \"next\" : \"prev\";\n      }\n      if (useOffset) {\n        newThumbsIndex += direction === \"next\" ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {\n        }\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : void 0);\n      }\n    }\n  }\n  on2(\"beforeInit\", () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper)\n      return;\n    init();\n    update(true);\n  });\n  on2(\"slideChange update resize observerUpdate\", () => {\n    update();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on2(\"beforeDestroy\", () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed)\n      return;\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}\n\n// node_modules/swiper/modules/free-mode/free-mode.js\nfunction freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchStart2() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n  function onTouchMove2() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper;\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? \"startX\" : \"startY\"],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? \"currentX\" : \"currentY\"],\n      time: now()\n    });\n  }\n  function onTouchEnd2(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper;\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        }\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1e3 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl)\n        newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides)\n          needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides)\n          needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === \"next\") {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once(\"transitionEnd\", () => {\n          swiper.loopFix();\n        });\n      }\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce)\n            return;\n          emit(\"momentumBounce\");\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed)\n                return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit(\"_freeModeNoMomentumRelease\");\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed)\n              return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit(\"_freeModeNoMomentumRelease\");\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart: onTouchStart2,\n      onTouchMove: onTouchMove2,\n      onTouchEnd: onTouchEnd2\n    }\n  });\n}\n\n// node_modules/swiper/modules/grid/grid.js\nfunction Grid(_ref) {\n  let {\n    swiper,\n    extendParams\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: \"column\"\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const initSlides = (slidesLength) => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== \"auto\" && fill === \"row\") {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === \"row\" && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        \"-webkit-order\": newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === \"column\") {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.css(getDirectionLabel(\"margin-top\"), row !== 0 ? spaceBetween && `${spaceBetween}px` : \"\");\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css({\n      [getDirectionLabel(\"width\")]: `${swiper.virtualSize + spaceBetween}px`\n    });\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths)\n          slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0])\n          newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\n// node_modules/swiper/modules/manipulation/methods/appendSlide.js\nfunction appendSlide(slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params\n  } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  if (typeof slides === \"object\" && \"length\" in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i])\n        $wrapperEl.append(slides[i]);\n    }\n  } else {\n    $wrapperEl.append(slides);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n}\n\n// node_modules/swiper/modules/manipulation/methods/prependSlide.js\nfunction prependSlide(slides) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  let newActiveIndex = activeIndex + 1;\n  if (typeof slides === \"object\" && \"length\" in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i])\n        $wrapperEl.prepend(slides[i]);\n    }\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    $wrapperEl.prepend(slides);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n  swiper.slideTo(newActiveIndex, 0, false);\n}\n\n// node_modules/swiper/modules/manipulation/methods/addSlide.js\nfunction addSlide(index2, slides) {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n  const baseLength = swiper.slides.length;\n  if (index2 <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n  if (index2 >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n  let newActiveIndex = activeIndexBuffer > index2 ? activeIndexBuffer + 1 : activeIndexBuffer;\n  const slidesBuffer = [];\n  for (let i = baseLength - 1; i >= index2; i -= 1) {\n    const currentSlide = swiper.slides.eq(i);\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n  if (typeof slides === \"object\" && \"length\" in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i])\n        $wrapperEl.append(slides[i]);\n    }\n    newActiveIndex = activeIndexBuffer > index2 ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    $wrapperEl.append(slides);\n  }\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\n    $wrapperEl.append(slidesBuffer[i]);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\n// node_modules/swiper/modules/manipulation/methods/removeSlide.js\nfunction removeSlide(slidesIndexes) {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n  let newActiveIndex = activeIndexBuffer;\n  let indexToRemove;\n  if (typeof slidesIndexes === \"object\" && \"length\" in slidesIndexes) {\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove])\n        swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex)\n        newActiveIndex -= 1;\n    }\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove])\n      swiper.slides.eq(indexToRemove).remove();\n    if (indexToRemove < newActiveIndex)\n      newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\n// node_modules/swiper/modules/manipulation/methods/removeAllSlides.js\nfunction removeAllSlides() {\n  const swiper = this;\n  const slidesIndexes = [];\n  for (let i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n  swiper.removeSlide(slidesIndexes);\n}\n\n// node_modules/swiper/modules/manipulation/manipulation.js\nfunction Manipulation(_ref) {\n  let {\n    swiper\n  } = _ref;\n  Object.assign(swiper, {\n    appendSlide: appendSlide.bind(swiper),\n    prependSlide: prependSlide.bind(swiper),\n    addSlide: addSlide.bind(swiper),\n    removeSlide: removeSlide.bind(swiper),\n    removeAllSlides: removeAllSlides.bind(swiper)\n  });\n}\n\n// node_modules/swiper/shared/effect-init.js\nfunction effectInit(params) {\n  const {\n    effect,\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    overwriteParams,\n    perspective,\n    recreateShadows,\n    getEffectParams\n  } = params;\n  on2(\"beforeInit\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n    if (perspective && perspective()) {\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    }\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n    Object.assign(swiper.params, overwriteParamsResult);\n    Object.assign(swiper.originalParams, overwriteParamsResult);\n  });\n  on2(\"setTranslate\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    if (swiper.params.effect !== effect)\n      return;\n    setTransition2(duration);\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    if (recreateShadows) {\n      if (!getEffectParams || !getEffectParams().slideShadows)\n        return;\n      swiper.slides.each((slideEl) => {\n        const $slideEl = swiper.$(slideEl);\n        $slideEl.find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").remove();\n      });\n      recreateShadows();\n    }\n  });\n  let requireUpdateOnVirtual;\n  on2(\"virtualUpdate\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    if (!swiper.slides.length) {\n      requireUpdateOnVirtual = true;\n    }\n    requestAnimationFrame(() => {\n      if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n        setTranslate2();\n        requireUpdateOnVirtual = false;\n      }\n    });\n  });\n}\n\n// node_modules/swiper/shared/effect-target.js\nfunction effectTarget(effectParams, $slideEl) {\n  if (effectParams.transformEl) {\n    return $slideEl.find(effectParams.transformEl).css({\n      \"backface-visibility\": \"hidden\",\n      \"-webkit-backface-visibility\": \"hidden\"\n    });\n  }\n  return $slideEl;\n}\n\n// node_modules/swiper/shared/effect-virtual-transition-end.js\nfunction effectVirtualTransitionEnd(_ref) {\n  let {\n    swiper,\n    duration,\n    transformEl,\n    allSlides\n  } = _ref;\n  const {\n    slides,\n    activeIndex,\n    $wrapperEl\n  } = swiper;\n  if (swiper.params.virtualTranslate && duration !== 0) {\n    let eventTriggered = false;\n    let $transitionEndTarget;\n    if (allSlides) {\n      $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;\n    } else {\n      $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);\n    }\n    $transitionEndTarget.transitionEnd(() => {\n      if (eventTriggered)\n        return;\n      if (!swiper || swiper.destroyed)\n        return;\n      eventTriggered = true;\n      swiper.animating = false;\n      const triggerEvents = [\"webkitTransitionEnd\", \"transitionend\"];\n      for (let i = 0; i < triggerEvents.length; i += 1) {\n        $wrapperEl.trigger(triggerEvents[i]);\n      }\n    });\n  }\n}\n\n// node_modules/swiper/modules/effect-fade/effect-fade.js\nfunction EffectFade(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    fadeEffect: {\n      crossFade: false,\n      transformEl: null\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      slides\n    } = swiper;\n    const params = swiper.params.fadeEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = swiper.slides.eq(i);\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      let tx = -offset2;\n      if (!swiper.params.virtualTranslate)\n        tx -= swiper.translate;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n      }\n      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.css({\n        opacity: slideOpacity\n      }).transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.fadeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: \"fade\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-cube/effect-cube.js\nfunction EffectCube(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    }\n  });\n  const createSlideShadows = ($slideEl, progress, isHorizontal) => {\n    let shadowBefore = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n    let shadowAfter = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n    if (shadowBefore.length === 0) {\n      shadowBefore = dom_default(`<div class=\"swiper-slide-shadow-${isHorizontal ? \"left\" : \"top\"}\"></div>`);\n      $slideEl.append(shadowBefore);\n    }\n    if (shadowAfter.length === 0) {\n      shadowAfter = dom_default(`<div class=\"swiper-slide-shadow-${isHorizontal ? \"right\" : \"bottom\"}\"></div>`);\n      $slideEl.append(shadowAfter);\n    }\n    if (shadowBefore.length)\n      shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length)\n      shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    const isHorizontal = swiper.isHorizontal();\n    swiper.slides.each((slideEl) => {\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      createSlideShadows(dom_default(slideEl), progress, isHorizontal);\n    });\n  };\n  const setTranslate2 = () => {\n    const {\n      $el,\n      $wrapperEl,\n      slides,\n      width: swiperWidth,\n      height: swiperHeight,\n      rtlTranslate: rtl,\n      size: swiperSize,\n      browser: browser2\n    } = swiper;\n    const params = swiper.params.cubeEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let wrapperRotate = 0;\n    let $cubeShadowEl;\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl = $wrapperEl.find(\".swiper-cube-shadow\");\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = dom_default('<div class=\"swiper-cube-shadow\"></div>');\n          $wrapperEl.append($cubeShadowEl);\n        }\n        $cubeShadowEl.css({\n          height: `${swiperWidth}px`\n        });\n      } else {\n        $cubeShadowEl = $el.find(\".swiper-cube-shadow\");\n        if ($cubeShadowEl.length === 0) {\n          $cubeShadowEl = dom_default('<div class=\"swiper-cube-shadow\"></div>');\n          $el.append($cubeShadowEl);\n        }\n      }\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let slideIndex = i;\n      if (isVirtual) {\n        slideIndex = parseInt($slideEl.attr(\"data-swiper-slide-index\"), 10);\n      }\n      let slideAngle = slideIndex * 90;\n      let round = Math.floor(slideAngle / 360);\n      if (rtl) {\n        slideAngle = -slideAngle;\n        round = Math.floor(-slideAngle / 360);\n      }\n      const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n      if (slideIndex % 4 === 0) {\n        tx = -round * 4 * swiperSize;\n        tz = 0;\n      } else if ((slideIndex - 1) % 4 === 0) {\n        tx = 0;\n        tz = -round * 4 * swiperSize;\n      } else if ((slideIndex - 2) % 4 === 0) {\n        tx = swiperSize + round * 4 * swiperSize;\n        tz = swiperSize;\n      } else if ((slideIndex - 3) % 4 === 0) {\n        tx = -swiperSize;\n        tz = 3 * swiperSize + swiperSize * 4 * round;\n      }\n      if (rtl) {\n        tx = -tx;\n      }\n      if (!isHorizontal) {\n        ty = tx;\n        tx = 0;\n      }\n      const transform2 = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n      if (progress <= 1 && progress > -1) {\n        wrapperRotate = slideIndex * 90 + progress * 90;\n        if (rtl)\n          wrapperRotate = -slideIndex * 90 - progress * 90;\n      }\n      $slideEl.transform(transform2);\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, isHorizontal);\n      }\n    }\n    $wrapperEl.css({\n      \"-webkit-transform-origin\": `50% 50% -${swiperSize / 2}px`,\n      \"transform-origin\": `50% 50% -${swiperSize / 2}px`\n    });\n    if (params.shadow) {\n      if (isHorizontal) {\n        $cubeShadowEl.transform(`translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);\n      } else {\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n        const scale1 = params.shadowScale;\n        const scale2 = params.shadowScale / multiplier;\n        const offset2 = params.shadowOffset;\n        $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset2}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);\n      }\n    }\n    const zFactor = browser2.isSafari || browser2.isWebView ? -swiperSize / 2 : 0;\n    $wrapperEl.transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);\n    $wrapperEl[0].style.setProperty(\"--swiper-cube-translate-z\", `${zFactor}px`);\n  };\n  const setTransition2 = (duration) => {\n    const {\n      $el,\n      slides\n    } = swiper;\n    slides.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n      $el.find(\".swiper-cube-shadow\").transition(duration);\n    }\n  };\n  effectInit({\n    effect: \"cube\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    recreateShadows,\n    getEffectParams: () => swiper.params.cubeEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: false,\n      virtualTranslate: true\n    })\n  });\n}\n\n// node_modules/swiper/shared/create-shadow.js\nfunction createShadow(params, $slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : \"\"}`;\n  const $shadowContainer = params.transformEl ? $slideEl.find(params.transformEl) : $slideEl;\n  let $shadowEl = $shadowContainer.children(`.${shadowClass}`);\n  if (!$shadowEl.length) {\n    $shadowEl = dom_default(`<div class=\"swiper-slide-shadow${side ? `-${side}` : \"\"}\"></div>`);\n    $shadowContainer.append($shadowEl);\n  }\n  return $shadowEl;\n}\n\n// node_modules/swiper/modules/effect-flip/effect-flip.js\nfunction EffectFlip(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true,\n      transformEl: null\n    }\n  });\n  const createSlideShadows = ($slideEl, progress, params) => {\n    let shadowBefore = swiper.isHorizontal() ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n    let shadowAfter = swiper.isHorizontal() ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n    if (shadowBefore.length === 0) {\n      shadowBefore = createShadow(params, $slideEl, swiper.isHorizontal() ? \"left\" : \"top\");\n    }\n    if (shadowAfter.length === 0) {\n      shadowAfter = createShadow(params, $slideEl, swiper.isHorizontal() ? \"right\" : \"bottom\");\n    }\n    if (shadowBefore.length)\n      shadowBefore[0].style.opacity = Math.max(-progress, 0);\n    if (shadowAfter.length)\n      shadowAfter[0].style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    const params = swiper.params.flipEffect;\n    swiper.slides.each((slideEl) => {\n      const $slideEl = dom_default(slideEl);\n      let progress = $slideEl[0].progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n      createSlideShadows($slideEl, progress, params);\n    });\n  };\n  const setTranslate2 = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      let progress = $slideEl[0].progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n      }\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset2 - swiper.translate : -offset2;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n      if (params.slideShadows) {\n        createSlideShadows($slideEl, progress, params);\n      }\n      const transform2 = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform2);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.flipEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n  effectInit({\n    effect: \"flip\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-coverflow/effect-coverflow.js\nfunction EffectCoverflow(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true,\n      transformEl: null\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform2 = swiper.translate;\n    const center = isHorizontal ? -transform2 + swiperWidth / 2 : -transform2 + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth;\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = $slideEl[0].swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === \"function\" ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch;\n      if (typeof stretch === \"string\" && stretch.indexOf(\"%\") !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n      if (Math.abs(translateX) < 1e-3)\n        translateX = 0;\n      if (Math.abs(translateY) < 1e-3)\n        translateY = 0;\n      if (Math.abs(translateZ) < 1e-3)\n        translateZ = 0;\n      if (Math.abs(rotateY) < 1e-3)\n        rotateY = 0;\n      if (Math.abs(rotateX) < 1e-3)\n        rotateX = 0;\n      if (Math.abs(scale) < 1e-3)\n        scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(slideTransform);\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n      if (params.slideShadows) {\n        let $shadowBeforeEl = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n        let $shadowAfterEl = isHorizontal ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n        if ($shadowBeforeEl.length === 0) {\n          $shadowBeforeEl = createShadow(params, $slideEl, isHorizontal ? \"left\" : \"top\");\n        }\n        if ($shadowAfterEl.length === 0) {\n          $shadowAfterEl = createShadow(params, $slideEl, isHorizontal ? \"right\" : \"bottom\");\n        }\n        if ($shadowBeforeEl.length)\n          $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if ($shadowAfterEl.length)\n          $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.coverflowEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n  };\n  effectInit({\n    effect: \"coverflow\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-creative/effect-creative.js\nfunction EffectCreative(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    creativeEffect: {\n      transformEl: null,\n      limitProgress: 1,\n      shadowPerProgress: false,\n      progressMultiplier: 1,\n      perspective: true,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n  const getTranslateValue = (value) => {\n    if (typeof value === \"string\")\n      return value;\n    return `${value}px`;\n  };\n  const setTranslate2 = () => {\n    const {\n      slides,\n      $wrapperEl,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.creativeEffect;\n    const {\n      progressMultiplier: multiplier\n    } = params;\n    const isCenteredSlides = swiper.params.centeredSlides;\n    if (isCenteredSlides) {\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n      $wrapperEl.transform(`translateX(calc(50% - ${margin}px))`);\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max($slideEl[0].progress, -params.limitProgress), params.limitProgress);\n      let originalProgress = progress;\n      if (!isCenteredSlides) {\n        originalProgress = Math.min(Math.max($slideEl[0].originalProgress, -params.limitProgress), params.limitProgress);\n      }\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      const t = [swiper.params.cssMode ? -offset2 - swiper.translate : -offset2, 0, 0];\n      const r = [0, 0, 0];\n      let custom = false;\n      if (!swiper.isHorizontal()) {\n        t[1] = t[0];\n        t[0] = 0;\n      }\n      let data = {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        scale: 1,\n        opacity: 1\n      };\n      if (progress < 0) {\n        data = params.next;\n        custom = true;\n      } else if (progress > 0) {\n        data = params.prev;\n        custom = true;\n      }\n      t.forEach((value, index2) => {\n        t[index2] = `calc(${value}px + (${getTranslateValue(data.translate[index2])} * ${Math.abs(progress * multiplier)}))`;\n      });\n      r.forEach((value, index2) => {\n        r[index2] = data.rotate[index2] * Math.abs(progress * multiplier);\n      });\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const translateString = t.join(\", \");\n      const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n      const transform2 = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\n      if (custom && data.shadow || !custom) {\n        let $shadowEl = $slideEl.children(\".swiper-slide-shadow\");\n        if ($shadowEl.length === 0 && data.shadow) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n        if ($shadowEl.length) {\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n          $shadowEl[0].style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n        }\n      }\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform2).css({\n        opacity: opacityString\n      });\n      if (data.origin) {\n        $targetEl.css(\"transform-origin\", data.origin);\n      }\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.creativeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow\").transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: \"creative\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    perspective: () => swiper.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\n// node_modules/swiper/modules/effect-cards/effect-cards.js\nfunction EffectCards(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on: on2\n  } = _ref;\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset2 = $slideEl[0].swiperSlideOffset;\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset2 -= slides[0].swiperSlideOffset;\n      }\n      let tX = swiper.params.cssMode ? -offset2 - swiper.translate : -offset2;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -2 * progress;\n      let tXAdd = 8 - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n      if (progress < 0) {\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform2 = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n      if (params.slideShadows) {\n        let $shadowEl = $slideEl.find(\".swiper-slide-shadow\");\n        if ($shadowEl.length === 0) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n        if ($shadowEl.length)\n          $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform2);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find(\".swiper-slide-shadow\").transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n  effectInit({\n    effect: \"cards\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\n\nexport {\n  core_default,\n  Virtual,\n  Keyboard,\n  Mousewheel,\n  Navigation,\n  Pagination,\n  Scrollbar,\n  Parallax,\n  Zoom,\n  Lazy,\n  Controller,\n  A11y,\n  History,\n  HashNavigation,\n  Autoplay,\n  Thumb,\n  freeMode,\n  Grid,\n  Manipulation,\n  EffectFade,\n  EffectCube,\n  EffectFlip,\n  EffectCoverflow,\n  EffectCreative,\n  EffectCards\n};\n//# sourceMappingURL=chunk-2T3Q367C.js.map\n","start":1663399072802,"end":1663399072804,"order":"normal"}]}
